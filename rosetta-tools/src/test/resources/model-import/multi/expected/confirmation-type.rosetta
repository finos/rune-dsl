namespace fpml.confirmation : < "fpml.confirmation definition" >
version "${project.version}"

typeAlias PointValue: <"Constrains the forward point tick/pip factor to 1, 0.1, 0.01, 0.001, etc.">
	number

typeAlias CorrelationValue: <"A type defining a number specified as a decimal between -1 and 1 inclusive.">
	number(min: -1, max: 1)

typeAlias HourMinuteTime: <"A type defining a time specified in hh:mm:ss format where the second component must be \'00\', e.g. 11am would be represented as 11:00:00.">
	time

typeAlias Initial: string(minLength: 1, maxLength: 1)

typeAlias NonNegativeDecimal: <"A type defining a number specified as non negative decimal greater than 0 inclusive.">
	number(min: 0)

typeAlias PositiveDecimal: <"A type defining a number specified as positive decimal greater than 0 exclusive.">
	number(min: 0)

typeAlias RestrictedPercentage: <"A type defining a percentage specified as decimal from 0 to 1. A percentage of 5% would be represented as 0.05.">
	number(min: 0, max: 1)

typeAlias Scheme: <"The base class for all types which define coding schemes that are allowed to be empty.">
	NormalizedString

typeAlias NonEmptyScheme: <"The base class for all types which define coding schemes that must be populated.">
	NormalizedString

typeAlias NonEmptyLongScheme: <"The base class for all types which define coding schemes that must be populated.">
	NormalizedString

typeAlias NonEmptyURI: <"A URI that cannot be empty.">
	string(pattern: "\\w+:(\\/?\\/?)[^\\s]+", minLength: 1)

typeAlias String: <"A string. FpML may define lenght restrictions in some views.">
	string(maxLength: 255)

typeAlias NormalizedString: <"A normalized string">
	string

typeAlias Token: <"A token. FpML redefines this type so that in some views it can enforce that it may not be empty">
	string

typeAlias Token60: <"A type defining a token of length between 1 and 60 characters inclusive.">
	Token

typeAlias CryptoBinary: string

typeAlias DigestValueType: string

typeAlias HMACOutputLengthType: int

type DataDocument extends Document: <"A document containing trade and/or portfolio and/or party data without expressing any processing intention. A type defining a content model that is backwards compatible with older FpML releases and which can be used to contain sets of data without expressing any processing intention.">
	[rootType]

	validationModel ValidationModel (1..1)
	onBehalfOf OnBehalfOf (0..1) <"Indicates which party (and accounts) a trade is being processed for.">
	originatingEvent OriginatingEvent (0..1)
	trade Trade (0..*) <"The root element in an FpML trade document.">
	portfolio Portfolio (0..*) <"An arbitary grouping of trade references (and possibly other portfolios).">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type ValuationDocument extends DataDocument: <"A document that includes trade and/or valuation (pricing and risk) data without expressing any processing intention. A type defining a content model that includes valuation (pricing and risk) data without expressing any processing intention.">
	[rootType]

	market Market (0..*)
	valuationSet ValuationSet (0..*)

type GenericProduct extends Product: <"Generic products - for use in Transparency reporting to define a product that represents an OTC derivative transaction whose economics are not fully described using an FpML schema. In other views, generic products are present for convenience to support internal messaging and workflows that are cross-product. Generic products are not full trade representations as such they are not intended to be used for confirming trades. Simple product representation providing key information about a variety of different products. Generic products - for use in Transparency reporting to define a product that represents an OTC derivative transaction whose economics are not fully described using an FpML schema. In other views, generic products are present for convenience to support internal messaging and workflows that are cross-product. Generic products are not full trade representations as such they are not intended to be used for confirming trades.">

	multiLeg boolean (0..1) <"Indicates whether this transaction has multiple components, not all of which may be reported. The use of this field is not recommended, and it may be deprecated in a future version of this standard.">
	buyerSellerModel BuyerSellerModel (0..1)
	counterpartyReference PartyReference (0..2)
	premium SimplePayment (0..1)
	effectiveDate AdjustableDate2 (1..1) <"The earliest of all the effective dates of all constituent streams.">
	expirationDate AdjustableDate2 (0..1) <"For options, the last exercise date of the option.">
	terminationDate AdjustableDate2 (1..1) <"The latest of all of the termination (accrual end) dates of the constituent or underlying streams.">
	underlyer TradeUnderlyer2 (0..*) <"The set of underlyers to the trade that can be used in computing the trade\'s cashflows. If this information is needed to identify the trade, all of the trade\'s underlyers should be specified, whether or not they figure into the cashflow calculation. Otherwise, only those underlyers used to compute this particular cashflow need be supplied.">
	notional CashflowNotional (0..*) <"The notional or notionals in effect on the reporting date.">
	genericCommodityAttributesModel GenericCommodityAttributesModel (0..1)
	genericEquityAttributesModel GenericEquityAttributesModel (0..1)
	genericOptionAttributesModel GenericOptionAttributesModel (0..1)
	paymentFrequency GenericFrequency (0..*)
	resetFrequency GenericResetFrequency (0..*)
	settlementCurrency IdentifiedCurrency (0..*) <"The currency or currencies in which the product can settle.">
	settlementType SettlementTypeEnum (0..1) <"How the trade settles (cash or physical). This element is also used for CFTC the \"Delivery Type\" field.">
	additionalPayment Payment (0..*) <"Additional payments between the principal parties.">

	condition Choice:
		optional choice buyerSellerModel, counterpartyReference

type StandardProduct extends Product: <"Standard products - for use in Transparency reporting to define a product that represents a standardized OTC derivative transaction whose economics do not need to be fully described using an FpML schema because they are implied by the product ID. In other views, standard products are present for convenience to support internal messaging and workflows that are cross-product. Standard products are not full trade representations as such they are not intended to be used for confirming trades. Simple product representation providing key information about a variety of different products. Standard products - for use in Transparency reporting to define a product that represents a standardized OTC derivative transaction whose economics do not need to be fully described using an FpML schema because they are implied by the product ID. In other views, standard products are present for convenience to support internal messaging and workflows that are cross-product. Standard products are not full trade representations as such they are not intended to be used for confirming trades.">

	notional CashflowNotional (0..1) <"The notional amount that was traded.">
	quote BasicQuotation (0..*) <"Pricing information for the trade.">

type BulletPayment extends Product: <"A product to represent a single known payment. A product to represent a single cashflow.">

	payment Payment (1..1) <"A known payment between two parties.">

type CapFloor extends Product: <"A cap, floor or cap floor structures product definition. A type defining an interest rate cap, floor, or cap/floor strategy (e.g. collar) product.">

	capFloorStream InterestRateStream (1..1) <"Reference to the leg, where date adjustments may apply.">
	premium Payment (0..*) <"The option premium amount payable by buyer to seller on the specified payment date.">
	additionalPayment Payment (0..*) <"Additional payments between the principal parties.">
	earlyTerminationProvision EarlyTerminationProvision (0..1) <"Parameters specifying provisions relating to the optional and mandatory early terminarion of a CapFloor transaction.">

type FloatingRateCalculation extends FloatingRate: <"A floating rate calculation definition. A type defining the floating rate and definitions relating to the calculation of floating rate amounts.">

	initialRate number (0..1) <"The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.">
	finalRateRounding Rounding (0..1) <"The rounding convention to apply to the final rate used in determination of a calculation period amount.">
	averagingMethod AveragingMethodEnum (0..1) <"If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies.">
	negativeInterestRateTreatment NegativeInterestRateTreatmentEnum (0..1) <"The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).">

type Fra extends Product: <"A forward rate agreement product definition. A type defining a Forward Rate Agreement (FRA) product.">

	buyerSellerModel BuyerSellerModel (1..1)
	adjustedEffectiveDate RequiredIdentifierDate (1..1) <"The start date of the calculation period. This date should already be adjusted for any applicable business day convention. This is also the date when the observed rate is applied, the reset date.">
	adjustedTerminationDate date (1..1) <"The end date of the calculation period. This date should already be adjusted for any applicable business day convention.">
	paymentDate AdjustableDate (1..1) <"The payment date. This date is subject to adjustment in accordance with any applicable business day convention.">
	fixingDateOffset RelativeDateOffset (1..1) <"Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA\'s Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction. The href attribute on the dateRelativeTo element should reference the id attribute on the adjustedEffectiveDate element.">
	dayCountFraction DayCountFraction (1..1) <"The day count fraction.">
	calculationPeriodNumberOfDays int(min: 1) (1..1) <"The number of days from the adjusted effective date to the adjusted termination date calculated in accordance with the applicable day count fraction.">
	notional Money (1..1) <"The notional amount.">
	fixedRate IdentifiedRate (1..1) <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">
	floatingRateIndex FloatingRateIndex (1..1)
	indexTenor Period (1..*) <"The ISDA Designated Maturity, i.e. the tenor of the floating rate. A FRA can contain either one or two indexTenor instances.">
	fraDiscounting FraDiscountingEnum (1..1) <"Specifies whether discounting applies and, if so, what type.">
	additionalPayment Payment (0..*) <"Additional payments between the principal parties (i.e. the parties referenced as the FRA buyer and seller).">

type InflationRateCalculation extends FloatingRateCalculation: <"An inflation rate calculation definition. A type defining the components specifiying an Inflation Rate Calculation">

	inflationLag Offset (1..1) <"an offsetting period from the payment date which determines the reference period for which the inflation index is onserved.">
	indexSource RateSourcePage (1..1) <"The reference source such as Reuters or Bloomberg.">
	mainPublication MainPublication (0..1) <"The current main publication source such as relevant web site or a government body.">
	interpolationMethod InterpolationMethod (1..1) <"The method used when calculating the Inflation Index Level from multiple points - the most common is Linear.">
	initialIndexLevel number (0..1) <"initial known index level for the first calculation period.">
	fallbackBondApplicable boolean (1..1) <"The applicability of a fallback bond as defined in the 2006 ISDA Inflation Derivatives Definitions, sections 1.3 and 1.8.">

type Swap extends Product: <"A swap product definition. A type defining swap streams and additional payments between the principal parties involved in the swap.">

	swapStream InterestRateStream (1..*) <"The swap streams.">
	earlyTerminationProvision EarlyTerminationProvision (0..1) <"Parameters specifying provisions relating to the optional and mandatory early terminarion of a swap transaction.">
	cancelableProvision CancelableProvision (0..1) <"A provision that allows the specification of an embedded option within a swap giving the buyer of the option the right to terminate the swap, in whole or in part, on the early termination date.">
	extendibleProvision ExtendibleProvision (0..1) <"A provision that allows the specification of an embedded option with a swap giving the buyer of the option the right to extend the swap, in whole or in part, to the extended termination date.">
	additionalPayment Payment (0..*) <"Additional payments between the principal parties.">
	additionalTerms SwapAdditionalTerms (0..1) <"Contains any additional terms to the swap contract.">

type Swaption extends Product: <"A swaption product definition. A type to define an option on a swap.">

	buyerSellerModel BuyerSellerModel (1..1)
	premium Payment (0..*) <"The option premium amount payable by buyer to seller on the specified payment date.">
	exercise Exercise (1..1)
	exerciseProcedure ExerciseProcedure (0..1) <"A set of parameters defining procedures associated with the exercise.">
	calculationAgent CalculationAgent (0..1) <"The ISDA Calculation Agent responsible for performing duties associated with an optional early termination.">
	cashSettlement CashSettlement (0..1) <"If specified, this means that cash settlement is applicable to the transaction and defines the parameters associated with the cash settlement procedure. If not specified, then physical settlement is applicable.">
	physicalSettlement SwaptionPhysicalSettlement (0..1) <"If specified, this defines physical settlement terms which apply to the transaction.">
	swaptionStraddle boolean (1..1) <"Whether the option is a swaption or a swaption straddle.">
	swaptionAdjustedDates SwaptionAdjustedDates (0..1) <"The adjusted dates associated with swaption exercise. These dates have been adjusted for any applicable business day convention.">
	swap Swap (1..1)

	condition Choice:
		optional choice cashSettlement, physicalSettlement

type FxDigitalOption extends Option: <"An FX digital option transaction definition. Describes an option having a triggerable fixed payout.">

	effectiveDate AdjustableOrRelativeDate (0..1) <"Effective date for a forward starting derivative. If this element is not present, the effective date is the trade date.">
	tenorPeriod Period (0..1) <"A tenor expressed as a period type and multiplier (e.g. 1D, 1Y, etc.)">
	fxDigitalOptionSequence0 FxDigitalOptionSequence0 (0..1)
	fxDigitalOptionSequence1 FxDigitalOptionSequence1 (0..1)
	exerciseProcedure ExerciseProcedure (0..1) <"A set of parameters defining procedures associated with the exercise.">
	payout FxOptionPayout (1..1) <"The amount of currency which becomes payable if and when a trigger event occurs.">
	premium FxOptionPremium (0..*) <"Premium amount or premium installment amount for an option.">

	condition Choice:
		required choice fxDigitalOptionSequence0, fxDigitalOptionSequence1

type FxFlexibleForward extends Product: <"A flexible term fx forward product definition. Product model for a flexible-term fx forward (also known as callable forward, window forward). This is a term forward transaction over a specific period, allowing the client full flexibility on the timing of the transactional flow(s). The product allows for (full or partial) execution at a predetermined forward rate, at any time between the start date and the expiry date. Although, the product is an outright, it has some option-like characteristics, leading to the use of option components in the model: (i) the BuyerSeller model expresses the roles of the parties in the overall transaction - the client \"buys\" the product (ii) the PutCallCurrency model expresses the buyer\'s perspective on the exchanged currencies i.e. the client may buy (call) or sell (put) the notional currency for the alternative currency.">

	buyerSellerModel BuyerSellerModel (1..1)
	putCallCurrencyModel PutCallCurrencyModel (1..1)
	notionalAmount PositiveMoney (1..1) <"The aggregate notional amount which will be exchanged, possibly as multiple partial executions, during the course of the execution period. Any residual notional which remains unexchanged at the expiry date will automatically be executed at the applicable exchange rate (strike).">
	minimumExecutionAmount PositiveMoney (0..1) <"The minimum notional amount which must be executed in any single transaction.">
	settlementAmount NonNegativeMoney (0..1) <"The total amount of settlement currency that will be paid over the life of the trade if calculable. The Settlement Amount element is a synonym for Contra Amount.">
	executionPeriodDates FxFlexibleForwardExecutionPeriod (1..1) <"The period during which the client has the right to execute a transaction, on any business day defined by reference to the specified business centers, subject to the constraints of the minimum execution amount and aggregate total notional amount. * Period dates are inclusive i.e. the expiry date is the final date on which execution may occur.">
	fxFlexibleForwardSequence FxFlexibleForwardSequence (0..1)
	settlementDateOffset RelativeDateOffset (0..1) <"The date on which delivery of the transacted currency amounts will occur, expressed as an offset from the execution date. * This property is optional in the schema, allowing it to be omitted by systems which do not support it; however this information would be expected in contractual documentation (e.g. termsheet, confirmation).">
	finalSettlementDate date (0..1) <"The final date for settlement. This is the date on which any residual exchange amount will be delivered. * This is an adjusted date i.e. a good business day for delivery in the location(s) specified in executionPeriodDates /businessCenters">
	forwardRate FxFlexibleForwardRate (1..1) <"Definition of the forward exchange rate for transactions executed during the execution period.">
	additionalPayment Payment (0..1) <"Fee paid by the client at inception (analagous to an option premium).">

type FxForwardVolatilityAgreement extends Product: <"An FX Forward Volatility Agreement transaction definition. Describes a contract on future levels of implied volatility. The main characteristic of this product is that the underlying is a straddle (underlying options) with a specific tenor starting from the fixing (effective or pricing) date, and are priced on that fixing date using a level of volatility that is agreed at the time of execution of the volatility agreement.">

	buyerSellerModel BuyerSellerModel (1..1)
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"A currency Pair the straddle is based on.">
	fixingDate date (1..1) <"The date when the underlying options are priced using the agreed forwardVolatilityStrikePrice and other market factors as agreed by the parties. Also known as \"Effective Date\" or \"Reference Date\".">
	fixingTime BusinessCenterTime (0..1) <"The time of the fixing date when the underlying options are priced using the agreed forwardVolatilityStrikePrice and other market factors as agreed by the parties.">
	forwardVolatilityStrikePrice PositiveDecimal (1..1) <"the Volatility level as agreed on the Trade Date.">
	straddle FxStraddle (1..1) <"details of the straddle (underlying options).">
	additionalPayment Payment (0..*) <"The currency, amount and payment details for the Forward Volatility Agreement, as agreed at the time of execution.">

type FxOption extends Option: <"An FX option transaction definition. Describes an FX option with optional asian and barrier features.">

	effectiveDate AdjustableOrRelativeDate (0..1) <"Effective date for a forward starting derivative. If this element is not present, the effective date is the trade date.">
	tenorPeriod Period (0..1) <"A tenor expressed as a period type and multiplier (e.g. 1D, 1Y, etc.)">
	americanExercise FxAmericanExercise (0..1) <"The parameters for defining the exercise period for an American style option.">
	europeanExercise FxEuropeanExercise (0..1) <"The parameters for defining the exercise period for an European style option.">
	exerciseProcedure ExerciseProcedure (0..1) <"A set of parameters defining procedures associated with the exercise.">
	putCurrencyAmount NonNegativeMoney (1..1) <"The currency amount that the option gives the right to sell.">
	callCurrencyAmount NonNegativeMoney (1..1) <"The currency amount that the option gives the right to buy.">
	soldAs PutCallEnum (0..1) <"Indicates how the product was original sold as a Put or a Call.">
	strike FxStrikePrice (1..1) <"Defines the option strike price.">
	spotRate PositiveDecimal (0..1) <"An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move \"up\" or \"down\" to be triggered.">
	features FxOptionFeatures (0..1) <"Describes additional features within the option.">
	premium FxOptionPremium (0..1) <"Premium amount or premium installment amount for an option.">
	cashSettlement FxCashSettlement (0..1) <"Specifies the currency and fixing details for cash settlement. This optional element is produced only where it has been specified at execution time that the option wlll be settled into a single cash payment - for example, in the case of a non-deliverable option (although note that an Fx option may be contractually cash settled, without necessarily being non-deliverable).">

	condition Choice:
		required choice americanExercise, europeanExercise

type FxSingleLeg extends Product: <"A simple FX spot or forward transaction definition. A type defining either a spot or forward FX transactions.">

	fxCoreDetailsModel FxCoreDetailsModel (1..1)

type FxSwap extends Product: <"An FX Swap transaction definition. A type defining either a spot/forward or forward/forward FX swap transaction.">

	nearLeg FxSwapLeg (1..1) <"The FX transaction with the earliest value date.">
	farLeg FxSwapLeg (1..1) <"The FX transaction with the latest value date.">

type FxVarianceSwap extends FxPerformanceSwap: <"An FX variance swap transaction definition.">

type FxVolatilitySwap extends FxPerformanceSwap: <"An FX volatility swap transaction definition.">

type TermDeposit extends Product: <"A term deposit product definition. A class defining the content model for a term deposit product.">

	payerReceiverModel PayerReceiverModel (1..1)
	startDate date (1..1) <"The start date of the calculation period.">
	maturityDate date (1..1) <"The end date of the calculation period. This date should already be adjusted for any applicable business day convention.">
	fxTenorModel FxTenorModel (0..1)
	principal PositiveMoney (1..1) <"The principal amount of the trade.">
	fixedRate PositiveDecimal (1..1) <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">
	dayCountFraction DayCountFraction (1..1) <"The day count fraction.">
	features TermDepositFeatures (0..1) <"An optional container that holds additional features of the deposit (e.g. Dual Currency feature).">
	interest Money (0..1) <"The total interest of at maturity of the trade.">
	payment Payment (0..*) <"A known payment between two parties.">

type CalculationAgentDetermination extends FxDisruptionFallback: <"Indicates that the Calculation Agent shall determine the Spot Rate (or a method for determining the Spot Rate) taking into consideration all available information that it reasonably and in good faith deems relevent.">

type DualExchangeRate extends FxDisruptionEvent: <"If present indicates that the event is considered to have occured if two or more numeric values of currency exchange rate specified in the Settllement Option are applicable to the transaction.">

type ExchangeRestrictions extends FxDisruptionEvent: <"If present indicates that the event is considered to have occured if the settlement in either currency is prohibited or materially restricted.">

type FallbackReferencePrice extends FxFallbackReferencePrice: <"If present indicates alternative price sources">

type NoFaultTermination extends FxDisruptionFallback: <"Indicates that the event may cause the transaction to terminate if all applicable provisions have been met.">

type NonDeliverableSubstitute extends FxDisruptionFallback: <"If present indicates that the obligation to pay the In-the-Money amount of foreign currency is replaced with an obligation to pay an equivalent amount in another currency. Describes a currency which may be delivered instead">

	currency Currency (1..1) <"The code for the currency which can be delivered if settlement in the original non-deliverable currency is not possible.">

type PriceSourceDisruption extends FxDisruptionEvent: <"If present indicates that the event is considered to have occurred if it is impossible to obtain information about the Spot Rate for a Valuation Date from the price source specified in the Settlement Rate Option that hass been agreed by the parties.">

type PriceMateriality extends FxDisruptionEvent: <"Defines the require price materiality percentage for the rate source to be considered valid. A structure describing the criteria for price materiality.">

	prioritizedRateSourceModel PrioritizedRateSourceModel (1..1)
	percentage PositiveDecimal (1..1)

type SettlementPostponement extends Postponement: <"Indicates that the Settlement Date for the tranaction shall be deemed to be the first Business Day following the day on which the applicable Disruption Event ceases to exist, unless the events continues to exists for more than a maximum number of days.">

type ValuationPostponement extends Postponement: <"Indicates that the Valuation Date for the tranaction shall be deemed to be the first Business Day following the day on which the applicable Disruption Event ceases to exist, unless the events continues to exists for more than a maximum number of days.">

type FxTargetKnockoutForward extends Product: <"A structured forward product which consists of a strip of forwards. Each forward may be settled as an exchange of currencies or cash settled. At each settlement, the amount of gain that one party achieves is measured. The product has a target level of gain. Once the accumulated gain exceeds the target level, the product terminates and there are no further settlements. A structured forward product which consists of a strip of forwards. Each forward may be settled as an exchange of currencies or cash settled. At each settlement, the amount of gain that one party achieves is measured. The product has a target level of gain. Once the accumulated gain exceeds the target level, the product terminates and there are no further settlements.">

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"The Quoted Currency Pair that is used accross the product.">
	notionalAmount NonNegativeAmountSchedule (1..1) <"Notional amount of the Target.">
	target FxTarget (1..2) <"It defines the target level of gain. Once the accumulated gain exceeds the target level, the product terminates and there are no further settlements.">
	expirySchedule FxExpirySchedule (1..1) <"Defines the expiry/observation schedule of the target product.">
	settlementSchedule FxSettlementSchedule (1..1) <"Defines the settlement/payment schedule of the target product.">
	fixingInformationSource FxInformationSource (1..1) <"Information source for fixing the exchange rate. It is the same for all fixing periods.">
	spotRate NonNegativeDecimal (0..1) <"Spot rate">
	fxTargetKnockoutForwardSequence FxTargetKnockoutForwardSequence (0..1)
	constantPayoffRegion FxTargetConstantPayoffRegion (0..*) <"It defines a region in which a digital payment occurs.">
	linearPayoffRegion FxTargetLinearPayoffRegion (1..1) <"A region in which linear payoff applies i.e. the payoff bears a linear relationship to the fixing value (increases/decreases linearly with the fixing).">
	fxTargetKnockoutForwardChoice FxTargetKnockoutForwardChoice (0..*)
	barrier FxTargetBarrier (0..*) <"Generic FxTarget barrier. Element \"scope\" specifies whether the barrier has effect for the expiry period in which it is observed, or globally for whole product. Optional element \"rebate\" may be produced in conjunction with a Global Knockout barrier, to specify a rebate payable in the event of knockout.">
	additionalPayment SimplePayment (0..*) <"It supports the representation of premiums, fees, etc.">
	cashSettlement FxCashSettlementSimple (0..1) <"Cash settlement currency.">
	settlementPeriodSchedule FxTargetSettlementPeriodSchedule (0..1) <"It supports the representation of a matrix/tabular approach of the product by defining a set of settlement periods.">

type FxAccrualDigitalOption extends Option: <"A structured option product which consists of a single digital option or a strip of digital options. At each settlement the settled amounts are a fraction of the notional amount for that settlement period calculated as the number of fixings which fall within accrual regions divided by the total number of fixings in the settlement period. An FX Accrual Digital Option product The product defines a list of fixing (or observation) dates. There are m total fixings. At the expiry date of the product, the buyer of the option has the right to an FX settlement with n/m * Notional. Payout can be cash or physical.">

	notionalAmount NonNegativeAmountSchedule (1..1) <"Notional amount Schedule. The notional value of the product. This number divided by the total number of fixings in the fixing schedule is the amount that is accrued at each fixing if the accrual factor is one.">
	accrual FxAccrual (1..1) <"Describes accrual features within the product.">
	fxExpiryDateOrScheduleModel FxExpiryDateOrScheduleModel (1..1)
	fxSettlementDateOrScheduleModel FxSettlementDateOrScheduleModel (1..1)
	exerciseProcedure ExerciseProcedure (0..1) <"A set of parameters defining procedures associated with the exercise.">
	trigger FxAccrualTrigger (1..1) <"Defines one or more conditions under which the option will payout if exercisable.">
	barrier FxAccrualBarrier (0..*) <"Defines a knockout barrier conditions where if a barrier event occurs, the accrual process is terminated for the duration of all remaining accrual periods. Settlement rights for the next settlement are either retained or extinguished.">
	premium FxOptionPremium (0..*) <"Premium amount or premium installment amount for an option.">

type FxAccrualForward extends Product: <"A structured forward product consisting of a single forward or a strip of forwards. For each forward, a fixed proportion of Notional is accumulated for each occasion that spot fixes within pre-defined limits (the \'accrual region\') - the proportion determined by the number of fixings, which may occur every business day or with some other defined frequency. The Notional does not accumulate during any period where fixings fall outside the accrual region, but resumes accruing when spot returns within the limits. At expiry, the accrued Notional is bought at the pre-agreed hedge rate (the \'strike\' rate). The trade allows for a hedge rate that is better than the forward rate, however the notional amount hedged is uncertain, and can be zero in the worst case. The product defines a schedule of expiry and delivery dates which specify settlement periods. The product further defines a schedule of fixing (or observation) dates and defines regions of spot where the product settlement amounts will accrue. There are n total fixings. One accumulates a fixed proportion of Notional (1/n) for every observation date that spot fixes within the pre-defined limits of the accrual regions. If spot breaks the limits, the Notional stops accumulating during the fixings outside the limits, but continues accruing once spot comes back to the accruing region. At expiry, one buys the accrued Notional at the pre-agreed hedge rate. Payout can be cash or physical. The variation of this product include: Accrual Forward (European and American), Double Accrual Forward (DAF), Boosted Accrual Forward, Fading Forward, Leveraged Accrual Forward, Accrual Forward with Collars, etc.">

	notionalAmount NonNegativeAmountSchedule (1..1) <"Notional amount Schedule. The notional value of the product per settlement period. The notional amount may differ for each settlement period. This number divided by the total number of fixings in the settlement period is the amount that is accrued at each fixing if the accrual factor is one.">
	accrual FxAccrual (1..1) <"Describes accrual features within the product.">
	fxExpiryDateOrScheduleModel FxExpiryDateOrScheduleModel (1..1)
	fxSettlementDateOrScheduleModel FxSettlementDateOrScheduleModel (1..1)
	spotRate PositiveDecimal (0..1) <"An optional element used for FX forwards and certain types of FX OTC options. For deals consummated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move \"up\" or \"down\" to be triggered.">
	linearPayoffRegion FxAccrualLinearPayoffRegion (1..*) <"A region in which linear payoff applies i.e. the payoff bears a linear relationship to the fixing value (increases/decreases linearly with the fixing).">
	averageRate FxAverageRate (0..1) <"Average Rate Forward: means the average of the Reference Spot Rate on each Business Day from and including the Calculation Start Date up to and including the Calculation End Date rounded to the precision decimal places.">
	barrier FxAccrualBarrier (0..*) <"Defines a FX Accrual barrier conditions. Element barrier/scope specifies whether the barrier applies to the expiry period in which it is observed, or globally for whole product.">
	additionalPayment SimplePayment (0..*) <"It supports the representation of premiums, fees, etc.">
	cashSettlement FxCashSettlementSimple (0..1) <"Cash settlement currency.">
	settlementPeriodSchedule FxAccrualSettlementPeriodSchedule (0..1) <"It supports the representation of a matrix/tabular approach of the product by defining a set of settlement periods.">

type FxAccrualOption extends Option: <"A financial contract between two parties (the buyer and the seller) that provides the buyer the right to buy a currency (or receive a payment) at expiry. The distinctive characteristic of this contract is that the Notional to be transacted at expiry is uncertain and depends on the amount of time that the underlying currency trades within a pre-set level, or levels (the \'accrual barrier\', or \'barriers\'). The total Notional is only known at the end of the accrual period, and this extra uncertainty can make an accrual option substantially cheaper than the comparable vanilla one. An FX Accrual Option product The product defines a list of fixing (or observation) dates. There are m total fixings. At the expiry date of the product, the buyer of the option has the right to an FX settlement with n/m * Notional. Payout can be cash or physical.">

	putCallCurrencyModel PutCallCurrencyModel (1..1)
	notionalAmount NonNegativeAmountSchedule (1..1) <"Notional amount Schedule. The notional value of the product. This number divided by the total number of fixings in the fixing schedule is the amount that is accrued at each fixing if the accrual factor is one.">
	accrual FxAccrual (1..1) <"Describes accrual features within the product.">
	fxExpiryDateOrScheduleModel FxExpiryDateOrScheduleModel (1..1)
	fxSettlementDateOrScheduleModel FxSettlementDateOrScheduleModel (1..1)
	exerciseProcedure ExerciseProcedure (0..1) <"A set of parameters defining procedures associated with the exercise.">
	spotRate PositiveDecimal (0..1) <"An optional element used for FX forwards and certain types of FX OTC options. For deals consummated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move \"up\" or \"down\" to be triggered.">
	fxAccrualOptionSequence FxAccrualOptionSequence (0..1)
	averageStrike FxAverageStrike (0..1) <"Average Strike: means the average of the Reference Spot Rate on each Business Day from and including the Calculation Start Date up to and including the Calculation End Date rounded to the precision decimal places.">
	averageRate FxAverageRate (0..1) <"Average Rate: means the average of the Reference Spot Rate on each Business Day from and including the Calculation Start Date up to and including the Calculation End Date rounded to the precision decimal places.">
	barrier FxAccrualBarrier (0..*) <"Defines a knockout barrier conditions where if a barrier event occurs, the accrual process is terminated for the duration of all remaining accrual periods. Settlement rights for the next settlement are either retained or extinguished.">
	premium FxOptionPremium (0..*) <"Premium amount or premium installment amount for an option.">

	condition Choice:
		required choice fxAccrualOptionSequence, averageStrike

type FxRangeAccrual extends Product: <"A structured product which consists of a single cash payment or a strip of cash payments. At each settlement the settled amounts are a fraction of the notional amount for that settlement period calculated as the number of fixings which fall within accrual regions divided by the total number of fixings in the settlement period. An FX Range Accrual product. A strip of Digital Options product The product defines a list of fixing (or observation) dates. There are m total fixings. On the relevant Settlement Date, the Option Seller shall pay to the Option Buyer an amount, in the Settlement Currency, calculated according to the following formula: Accrual Currency and Notional Amount x (the total number of Accrual Days / Total Number of Calendar Days in the Accrual Period). Payout can be cash.">

	payerReceiverModel PayerReceiverModel (1..1)
	notionalAmount NonNegativeAmountSchedule (1..1) <"Notional amount Schedule. The notional value of the product. This number divided by the total number of fixings in the fixing schedule is the amount that is accrued at each fixing if the accrual factor is one.">
	accrual FxAccrual (1..1) <"Describes accrual features within the product.">
	fxExpiryDateOrScheduleModel FxExpiryDateOrScheduleModel (1..1)
	fxSettlementDateOrScheduleModel FxSettlementDateOrScheduleModel (1..1)
	barrier FxAccrualBarrier (0..*) <"Defines a knockout barrier conditions where if a barrier event occurs, the accrual process is terminated for the duration of all remaining accrual periods. Settlement rights for the next settlement are either retained or extinguished.">
	premium FxOptionPremium (0..*) <"Premium amount or premium installment amount for an option.">

type BrokerEquityOption extends EquityDerivativeShortFormBase: <"A component describing a Broker View of an Equity Option. A type for defining the broker equity options.">

	deltaCrossed boolean (1..1)
	brokerageFee Money (1..1)
	brokerNotes String (1..1)

type EquityForward extends EquityDerivativeLongFormBase: <"A component describing an Equity Forward product. A type for defining equity forwards.">

	forwardPrice NonNegativeMoney (0..1) <"The forward price per share, index or basket.">

type EquityOption extends EquityDerivativeLongFormBase: <"A component describing an Equity Option product. A type for defining equity options.">

	strike EquityStrike (0..1) <"Defines whether it is a price or level at which the option has been, or will be, struck.">
	spotPrice NonNegativeDecimal (0..1) <"The price per share, index or basket observed on the trade or effective date.">
	numberOfOptions NonNegativeDecimal (0..1) <"The number of options comprised in the option transaction.">
	optionEntitlement PositiveDecimal (1..1) <"The number of shares per option comprised in the option transaction.">
	equityPremium EquityPremium (1..1) <"The equity option premium payable by the buyer to the seller.">

type EquityOptionTransactionSupplement extends EquityDerivativeShortFormBase: <"A component describing an Equity Option Transaction Supplement. A type for defining equity option transaction supplements.">

	exchangeLookAlike boolean (0..1) <"For a share option transaction, a flag used to indicate whether the transaction is to be treated as an \'exchange look-alike\'. This designation has significance for how share adjustments (arising from corporate actions) will be determined for the transaction. For an \'exchange look-alike\' transaction the relevant share adjustments will follow that for a corresponding designated contract listed on the related exchange (referred to as Options Exchange Adjustment (ISDA defined term), otherwise the share adjustments will be determined by the calculation agent (referred to as Calculation Agent Adjustment (ISDA defined term)).">
	exchangeTradedContractNearest boolean (0..1) <"For an index option transaction, a flag used in conjuction with Futures Price Valuation (ISDA defined term) to indicate whether the Nearest Index Contract provision is applicable. The Nearest Index Contract provision is a rule for determining the Exchange-traded Contract (ISDA defined term) without having to explicitly state the actual contract, delivery month and exchange on which it is traded.">
	indexAnnexFallbackModel IndexAnnexFallbackModel (0..1)
	methodOfAdjustment MethodOfAdjustmentEnum (0..1)
	localJurisdiction CountryCode (0..1) <"Local Jurisdiction is a term used in the AEJ Master Confirmation, which is used to determine local taxes, which shall mean taxes, duties, and similar charges imposed by the taxing authority of the Local Jurisdiction If this element is not present Local Jurisdiction is Not Applicable.">
	optionEntitlement PositiveDecimal (0..1) <"The number of shares per option comprised in the option transaction supplement.">
	multiplier PositiveDecimal (0..1) <"Specifies the contract multiplier that can be associated with an index option.">
	extraordinaryEvents ExtraordinaryEvents (0..1) <"A component to contain elements that represent an extraordinary event.">

	condition Choice:
		optional choice optionEntitlement, multiplier

type EquitySwapTransactionSupplement extends ReturnSwapBase: <"Specifies the structure of the equity swap transaction supplement. A type for defining Equity Swap Transaction Supplement">

	mutualOrOptionalEarlyTerminationModel MutualOrOptionalEarlyTerminationModel (0..1)
	equityUnderlyerProvisionsModel EquityUnderlyerProvisionsModel (0..1)
	extraordinaryEvents ExtraordinaryEvents (0..1) <"Where the underlying is shares, specifies events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.">

type CreditDefaultSwap extends Product: <"In a credit default swap one party (the protection seller) agrees to compensate another party (the protection buyer) if a specified company or Sovereign (the reference entity) experiences a credit event, indicating it is or may be unable to service its debts. The protection seller is typically paid a fee and/or premium, expressed as an annualized percent of the notional in basis points, regularly over the life of the transaction or otherwise as agreed by the parties.">

	generalTerms GeneralTerms (1..1) <"This element contains all the data that appears in the section entitled \"1. General Terms\" in the 2003 ISDA Credit Derivatives Confirmation.">
	feeLeg FeeLeg (1..1) <"This element contains all the terms relevant to defining the fixed amounts/payments per the applicable ISDA definitions.">
	protectionTerms ProtectionTerms (1..*) <"This element contains all the terms relevant to defining the applicable floating rate payer calculation amount, credit events and associated conditions to settlement, and reference obligations.">
	creditDefaultSwapChoice CreditDefaultSwapChoice (0..*)

type CreditDefaultSwapOption extends OptionBaseExtended: <"An option on a credit default swap. A complex type to support the credit default swap option.">

	clearingInstructions SwaptionPhysicalSettlement (0..1) <"Specifies any instructions on how the physical settlement is to be effected when the option is exercised.">
	strike CreditOptionStrike (1..1) <"Specifies the strike of the option on credit default swap.">
	creditDefaultSwap CreditDefaultSwap (1..1)

type BondOption extends OptionBaseExtended: <"A component describing a Bond Option product. A Bond Option">

	strike BondOptionStrike (1..1) <"Strike of the the Bond Option.">
	bondChoiceModel BondChoiceModel (1..1)

type CorrelationSwap extends NettedSwapBase: <"Specifies the structure of a correlation swap. A Correlation Swap modelled using a single netted leg.">

	correlationLeg CorrelationLeg (1..1) <"Correlation Leg. Correlation Buyer is deemed to be the Equity Amount Receiver, Correlation Seller is deemed to be the Equity Amount Payer.">

type DividendSwapOptionTransactionSupplement extends OptionBase: <"Specifies the structure of the dividend swap transaction supplement.">

	equityPremium EquityPremium (1..1) <"The variance option premium payable by the buyer to the seller.">
	equityExercise EquityExerciseValuationSettlement (1..1) <"The parameters for defining how the equity option can be exercised, how it is valued and how it is settled.">
	exchangeLookAlike boolean (0..1) <"For a share option transaction, a flag used to indicate whether the transaction is to be treated as an \'exchange look-alike\'. This designation has significance for how share adjustments (arising from corporate actions) will be determined for the transaction. For an \'exchange look-alike\' transaction the relevant share adjustments will follow that for a corresponding designated contract listed on the related exchange (referred to as Options Exchange Adjustment (ISDA defined term), otherwise the share adjustments will be determined by the calculation agent (referred to as Calculation Agent Adjustment (ISDA defined term)).">
	methodOfAdjustment MethodOfAdjustmentEnum (0..1) <"Defines how adjustments will be made to the contract should one or more of the extraordinary events occur.">
	optionEntitlement PositiveDecimal (0..1) <"The number of shares per option comprised in the option transaction supplement.">
	multiplier PositiveDecimal (0..1) <"Specifies the contract multiplier that can be associated with an index option.">
	clearingInstructions SwaptionPhysicalSettlement (0..1) <"Specifies any instructions on how the physical settlement is to be effected when the option is exercised.">
	dividendSwapTransactionSupplement DividendSwapTransactionSupplement (1..1) <"The variance swap details.">

	condition Choice:
		optional choice optionEntitlement, multiplier

type DividendSwapTransactionSupplement extends Product: <"Specifies the structure of the dividend swap transaction supplement. A Dividend Swap Transaction Supplement.">

	dividendLeg DividendLeg (1..1) <"Dividend leg.">
	fixedLeg FixedPaymentLeg (1..1) <"Fixed payment leg.">
	equityUnderlyerProvisionsModel EquityUnderlyerProvisionsModel (0..1)

type VarianceOptionTransactionSupplement extends OptionBase: <"Specifies the structure of a variance option.">

	equityPremium EquityPremium (1..1) <"The variance option premium payable by the buyer to the seller.">
	equityExercise EquityExerciseValuationSettlement (1..1) <"The parameters for defining how the equity option can be exercised, how it is valued and how it is settled.">
	exchangeLookAlike boolean (0..1) <"For a share option transaction, a flag used to indicate whether the transaction is to be treated as an \'exchange look-alike\'. This designation has significance for how share adjustments (arising from corporate actions) will be determined for the transaction. For an \'exchange look-alike\' transaction the relevant share adjustments will follow that for a corresponding designated contract listed on the related exchange (referred to as Options Exchange Adjustment (ISDA defined term), otherwise the share adjustments will be determined by the calculation agent (referred to as Calculation Agent Adjustment (ISDA defined term)).">
	methodOfAdjustment MethodOfAdjustmentEnum (0..1) <"Defines how adjustments will be made to the contract should one or more of the extraordinary events occur.">
	optionEntitlement PositiveDecimal (0..1) <"The number of shares per option comprised in the option transaction supplement.">
	multiplier PositiveDecimal (0..1) <"Specifies the contract multiplier that can be associated with an index option.">
	clearingInstructions SwaptionPhysicalSettlement (0..1) <"Specifies any instructions on how the physical settlement is to be effected when the option is exercised.">
	varianceSwapTransactionSupplement VarianceSwapTransactionSupplement (1..1) <"The variance swap details.">

	condition Choice:
		optional choice optionEntitlement, multiplier

type VarianceSwap extends NettedSwapBase: <"Specifies the structure of a variance swap. A Variance Swap.">

	varianceLeg VarianceLeg (1..*) <"Variance Leg.">

type VarianceSwapTransactionSupplement extends Product: <"Specifies the structure of a variance swap transaction supplement. A Variance Swap Transaction Supplement.">

	varianceLeg VarianceLeg (1..*) <"Variance Leg.">
	equityUnderlyerProvisionsModel EquityUnderlyerProvisionsModel (0..1)

type VolatilitySwap extends NettedSwapBase: <"Specifies the structure of a volatility swap. A Volatility Swap.">

	volatilityLeg VolatilityLeg (1..*)

type VolatilitySwapTransactionSupplement extends Product:

	volatilityLeg VolatilityLeg (1..*)
	equityUnderlyerProvisionsModel EquityUnderlyerProvisionsModel (0..1)

type BullionPhysicalLeg extends PhysicalForwardLeg: <"The physical leg of a Commodity Forward Transaction for which the underlyer is Bullion. Physically settled leg of a physically settled Bullion Transaction.">

	bullionType BullionTypeEnum (1..1) <"The type of Bullion underlying a Bullion Transaction.">
	deliveryLocation BullionDeliveryLocation (1..1) <"The physical delivery location for the transaction.">
	commodityFixedPhysicalQuantityModel CommodityFixedPhysicalQuantityModel (1..1)
	settlementDate AdjustableOrRelativeDate (1..1) <"Date on which the bullion will settle.">

type CoalPhysicalLeg extends PhysicalSwapLeg: <"Physically settled coal leg. Physically settled leg of a physically settled coal transaction.">

	deliveryPeriods CommodityDeliveryPeriods (1..1) <"The period during which delivery/deliveries of Coal Products may be scheduled. Equivalent to Nomination Period(s) for US Coal.">
	coal CoalProduct (1..1) <"The specification of the Coal Product to be delivered.">
	deliveryConditions CoalDelivery (1..1) <"The physical delivery conditions for the transaction.">
	deliveryQuantity CommodityPhysicalQuantity (1..1) <"The different options for specifying the quantity.">

type CommodityBasketOption extends Option: <"Defines a commodity basket option product.">

	optionType PutCallEnum (1..1) <"The type of option transaction.">
	commodityBasketOptionFeaturesModel CommodityBasketOptionFeaturesModel (0..1)
	commodityBasketModel CommodityBasketModel (1..1)
	strikePriceUnderlyingReference StrikePriceUnderlyingReference (0..1)
	strikePriceBasketReference StrikePriceBasketReference (0..1)
	commodityStrikePriceModel CommodityStrikePriceModel (0..1)
	commodityFloatingStrikePriceModel CommodityFloatingStrikePriceModel (0..1)
	exercise CommodityExerciseBasket (1..1) <"The parameters for defining how the commodity option can be exercised and how it is settled.">
	premium CommodityPremium (1..*) <"The option premium payable by the buyer to the seller.">
	commodityContentModel CommodityContentModel (0..1)

	condition Choice0:
		required choice strikePriceUnderlyingReference, strikePriceBasketReference

	condition Choice1:
		required choice commodityStrikePriceModel, commodityFloatingStrikePriceModel

type CommodityDigitalOption extends Option: <"Defines a commodity digital option product. Defines the digital commodity option product type. Digital options exercise when a barrier is breached and are financially settled. The \'commodityDigitalOption\' type is an extension of the \'commodityOption\' product.">

	optionType PutCallEnum (1..1) <"The type of option transaction.">
	commodity Commodity (1..1) <"Specifies the underlying instrument. Usual content is an ISDA Commodity Reference Price Name. The \'commodity\' underlyer component is specified using a reference to the \'commodity\' asset (see description above at the Commodity Underlyer section).">
	commodityDigitalOptionFeaturesModel CommodityDigitalOptionFeaturesModel (1..1)
	notionalAmount NotionalAmount (0..1) <"Volume contracted when volume is specified as a currency-denominated amount.">
	commodityDigitalOptionSequence CommodityDigitalOptionSequence (0..1)
	exercise CommodityDigitalExercise (1..1) <"The parameters for defining how the commodity option can be exercised and how it is settled.">
	premium CommodityPremium (1..*) <"The option premium payable by the buyer to the seller.">
	commodityContentModel CommodityContentModel (0..1)

	condition Choice:
		required choice notionalAmount, commodityDigitalOptionSequence

type CommodityForward extends Product: <"Defines a commodity forward product. Commodity Forward">

	valueDate AdjustableOrRelativeDate (0..1) <"Specifies the value date of the Commodity Forward Transaction. This is the day on which both the cash and the physical commodity settle.">
	fixedLeg NonPeriodicFixedPriceLeg (0..1) <"The fixed leg of a Commodity Forward Transaction.">
	averagePriceLeg AveragePriceLeg (0..1) <"Specifies the calculated floating price leg of a Commodity Forward Transaction.">
	commodityForwardLeg CommodityForwardLeg (1..1)
	commodityContentModel CommodityContentModel (0..1)

	condition Choice:
		required choice fixedLeg, averagePriceLeg

type CommodityInterestLeg extends CommodityPerformanceSwapLeg: <"Specifies the fixed payments of a commodity performance swap. Sometimes also referred to as the fee. A type describing the interest rate leg (a.k.a fee leg) of the commodity performance swap.">

	commodityCalculationPeriodsModel CommodityCalculationPeriodsModel (1..1)
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)
	notionalAmount CommodityNotionalAmount (0..1) <"Specifies the notional amount of a commodity performance type swap. It is a currency-denominated value (i.e. price-times-quantity). In confirmations is also referred to as the Notional Quantity (sic, expressed in currency units), Notional Amount, Equity Notional Amount and, in the case of reinvesting swaps, Initial Notional Amount.">
	notionalAmountReference CommodityNotionalAmountReference (0..1) <"A reference to the Return swap notional amount defined in another leg of the return swap.">
	commodityFixedInterestCalculation CommodityFixedInterestCalculation (1..1) <"Specifies the interest payment amount on a return swap. This amount may be referred to as the interest amount or the fee amount. Used when the interest (a.k.a. \"Fee\") is calculated very simply: notional amount * (rate * (number of days in Calculation Period / number of days assumed in the the year)).">

	condition Choice:
		required choice notionalAmount, notionalAmountReference

type CommodityOption extends Product: <"Defines a commodity option product. The product support for financially-settled exercises or exercise into physical forward contracts written on precious and non-precious metals. options in FpML is based on the creation of a \'commodityOption\' product. The product references the \'commodity\' underlyer in order to support the underlying asset of the option. Defines a commodity option product type. The product support for financially-settled exercises or exercise into physical forward contracts written on precious and non-precious metals. options in FpML is based on the creation of a \'commodityOption\' product. The product references the \'commodity\' underlyer in order to support the underlying asset of the option.">

	buyerSellerModel BuyerSellerModel (1..1)
	optionType PutCallEnum (1..1) <"The type of option transaction.">
	commodityFinancialOptionModel CommodityFinancialOptionModel (0..1)
	commodityPhysicalOptionModel CommodityPhysicalOptionModel (0..1)
	commodityWeatherOptionModel CommodityWeatherOptionModel (0..1)
	premium CommodityPremium (1..*) <"The option premium payable by the buyer to the seller.">
	commodityContentModel CommodityContentModel (0..1)

	condition Choice:
		required choice commodityFinancialOptionModel, commodityPhysicalOptionModel , commodityWeatherOptionModel

type CommodityPerformanceSwap extends CommodityPerformanceSwapBase: <"A swap the payoff of which is linked to the performance of the underlying asset. Examples of potential performance features are return, correlation, covariance, variance and volatility. A type describing a commodity performance swap in which one leg pays out based on the return on a reference commodity index or commodity reference price.">

	earlyTermination CommodityPerformanceSwapEarlyTermination (0..*) <"Specifies, for one or for both the parties to the trade, the date prior to the Termination Date from which the contract can be terminated.">

type CommodityReturnLeg extends CommodityPerformanceSwapLeg: <"Specifies the return payments of a commodity return swap. There can be one or two return legs. In simple return swaps there is a return leg and an interest (a.k.a. \'fee\') leg. In the case of a outperformance swap there are two return legs: the return performance of two commodity underlyers are swapped. In the case of a fully-funded return swap there is no financing component and, therefore, only a single return leg is specified. A type describing the return leg of a commodity return swap.">

	commodityCalculationPeriodsModel CommodityCalculationPeriodsModel (1..1)
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)
	commodityUnderlyerChoiceModel CommodityUnderlyerChoiceModel (1..1)
	notionalAmount CommodityNotionalAmount (0..1) <"Specifies the notional amount of a commodity performance type swap. It is a currency-denominated value (i.e. price-times-quantity). In confirmations is also referred to as the Notional Quantity (sic, expressed in currency units), Notional Amount, Equity Notional Amount and, in the case of reinvesting swaps, Initial Notional Amount.">
	notionalAmountReference CommodityNotionalAmountReference (0..1) <"A reference to the Return swap notional amount defined in another leg of the return swap.">
	commodityReturnCalculation CommodityReturnCalculation (1..1) <"Specifies, in relation to each Payment Date, the return percentage which, when multiplied times the notional amount is the amount to which the Payment Date relates.">

	condition Choice:
		required choice notionalAmount, notionalAmountReference

type CommoditySwap extends Product: <"Defines a commodity swap product. The commodity swap product model is designed to support fixed-float swaps, float-float swaps, fixed vs. physical swaps, float vs. physical swaps as well as, weather specific swaps. Its design is fully compatible with other FpML products and the product reuses standard common types.">

	commoditySwapDetailsModel CommoditySwapDetailsModel (1..1)

type CommoditySwaption extends Product: <"Defines a commodity swaption product Commodity Swaption.">

	buyerSellerModel BuyerSellerModel (1..1)
	optionType PutCallEnum (1..1) <"The type of option transaction.">
	commoditySwap CommoditySwaptionUnderlying (1..1) <"The underlying commodity swap definiton.">
	physicalExercise CommodityPhysicalExercise (1..1) <"The parameters for defining how the commodity option can be exercised into a physical transaction.">
	premium CommodityPremium (1..1) <"The option premium payable by the buyer to the seller.">
	commodityContentModel CommodityContentModel (0..1)

type CommodityVarianceLeg extends CommodityPerformanceSwapLeg: <"Specifies the variance payments of a commodity variance swap. A type describing the variance leg of a commodity variance swap.">

	commodityCalculationPeriodsModel CommodityCalculationPeriodsModel (1..1)
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)
	commodityUnderlyerChoiceModel CommodityUnderlyerChoiceModel (1..1)
	notionalAmount CommodityNotionalAmount (0..1) <"Specifies the notional amount of a commodity performance type swap. It is a currency-denominated value (i.e. price-times-quantity). In confirmations is also referred to as the Notional Quantity (sic, expressed in currency units), Notional Amount, Equity Notional Amount and, in the case of reinvesting swaps, Initial Notional Amount.">
	notionalAmountReference CommodityNotionalAmountReference (0..1) <"A reference to the Return swap notional amount defined in another leg of the return swap.">
	varianceStrikePrice number (0..1) <"Specifies the variance strike price when this strike is expressed in variance units. Payments on the variance leg are equal to the national amount multiplied by the realized variance minus this variance strike price: notional amount * (realized variance - variance strike price).">
	volatilityStrikePrice number (0..1) <"Specifies the volatility strike price when this strike is expressed in standard deviation units. Payments on the variance leg are equal to the national amount multiplied by the realized volatility squared minus the volatility strike price squared. Notional amount * (realized volatility^2 - volatility strike^2). Squaring the volatility strike price converts the volatility strike price into a variance strike price. Squaring the realized volatility converts realized volatility to realized variance.">
	varianceCalculation CommodityVarianceCalculation (1..1) <"Specifies, in relation to each Payment Date, the variance percentage which, when multiplied times the notional amount is the amount to which the Payment Date relates. For purposes of this representation the realized variance is: (annualizationFactor / N) * signma from i = 1 to N (ln (S sub (i+1)) / (S sub i)), where: ln is the natural logarithm, N is the number of pricing dates, S sub i is the relevant price on the observation date i. If nAdjustment is \'true\' then the denominator of the annualization factor is (N - 1) rather than N. If realized volatility is the performance metric in a variance swap rather than realized variance then the square root of the formula above will appear in the confirmation.">

	condition Choice0:
		required choice notionalAmount, notionalAmountReference

	condition Choice1:
		required choice varianceStrikePrice, volatilityStrikePrice

type ElectricityPhysicalLeg extends PhysicalSwapLeg: <"Physically settled electricity leg. Physically settled leg of a physically settled electricity transaction.">

	deliveryPeriods CommodityDeliveryPeriods (1..1) <"The different options for specifying the Delivery or Supply Periods. Unless the quantity or price is to vary periodically during the trade or physical delivery occurs on a periodic basis, periodsSchedule should be used and set to 1T.">
	settlementPeriods SettlementPeriods (1..*) <"The specification of the Settlement Periods in which the electricity will be delivered. The Settlement Periods will apply from and including the Effective Date up to and including the Termination Date. If more than one settlementPeriods element is present this indicates multiple ranges of Settlement Periods apply to the entire trade - for example off-peak weekdays and all day weekends. Settlement Period ranges should not overlap.">
	settlementPeriodsSchedule SettlementPeriodsSchedule (0..1) <"The specification of the Settlement Periods in which the electricity will be delivered for a \"shaped\" trade i.e. where different Settlement Period ranges will apply to different periods of the trade.">
	loadType LoadTypeEnum (0..1) <"LoadType is a summary of the full description of the settlement periods with respect to the region. Used for describing Electricity delivery schedules (e.g. Base, Peak, Off-Peak, Custom).">
	electricity ElectricityProduct (1..1) <"The specification of the electricity to be delivered.">
	deliveryConditions ElectricityDelivery (1..1) <"The physical delivery conditions for the transaction.">
	deliveryQuantity ElectricityPhysicalQuantity (1..1) <"The different options for specifying the quantity.">

type EnvironmentalPhysicalLeg extends PhysicalSwapLeg: <"Physically settled environmental leg.">

	numberOfAllowances UnitQuantity (1..1) <"The number of allowances, certificates or credit to be transaction in the transaction.">
	environmental EnvironmentalProduct (1..1) <"The specification of the type of allowance or credit.">
	abandonmentOfScheme EnvironmentalAbandonmentOfSchemeEnum (0..1) <"Applies to U.S. Emissions Allowance Transactions. Specifies terms which apply in the event of an Abandonment of Scheme event.">
	deliveryDate AdjustableOrRelativeDate (1..1) <"The date on which allowances are to be delivered as specified in the related Confirmation.">
	paymentDate DateOffset (1..1)
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)
	failureToDeliverApplicable boolean (0..1) <"Applies to EU Emissions Allowance Transactions. Holds the Failure to Deliver (Alternative Method) election. Used to determine how provisions in Part [7] Page 7 (B) Failure to Deliver Not Remedied are to be applied.">
	eEPParameters EEPParameters (0..1) <"Applies to EU Emissions Allowance Transactions. Contains a series of parameters controlling Excess Emissions Penalty payments.">

type FixedLeg extends FixedPriceLeg: <"Fixed Price Leg.">

type FloatingLeg extends FloatingPriceLeg: <"Floating Price leg.">

type GasPhysicalLeg extends PhysicalSwapLeg: <"Physically settled natural gas leg. Physically settled leg of a physically settled gas transaction.">

	deliveryPeriods GasDeliveryPeriods (1..1) <"The different options for specifying the Delivery or Supply Periods. Unless the quantity or price is to vary periodically during the trade or physical delivery occurs on a periodic basis, periodsSchedule should be used and set to 1T.">
	gas GasProduct (1..1) <"The specification of the gas to be delivered.">
	deliveryConditions GasDelivery (1..1) <"The physical delivery conditions for the transaction.">
	deliveryQuantity GasPhysicalQuantity (1..1) <"The different options for specifying the quantity. For Fixed trades where the quantity is known at the time of confirmation, a single quantity or a quantity per Delivery Period may be specified. For Variable trades minimum and maximum trades may be specified.">

type MetalPhysicalLeg extends PhysicalForwardLeg: <"Physically settled metal products leg. Physically settled leg of a physically settled Metal transaction.">

	metal Metal (1..1) <"The specification of the Metal Product to be delivered.">
	deliveryPeriods CommodityDeliveryPeriods (1..1) <"The period during which delivery/deliveries of Metal may be scheduled.">
	deliveryConditions MetalDelivery (1..1) <"The physical delivery arrangements and requirements for a physically settled non-precious metal transaction.">
	commodityFixedPhysicalQuantityModel CommodityFixedPhysicalQuantityModel (1..1)
	conversionFactor number (0..1) <"If the Notional Quantity is specified in a unit that does not match the unit in which the Commodity Reference Price is quoted, the scaling or conversion factor used to convert the Commodity Reference Price unit into the Notional Quantity unit should be stated here. If there is no conversion, this element is not intended to be used.">

type OilPhysicalLeg extends PhysicalSwapLeg: <"Physically settled oil or refined products leg. Physically settled leg of a physically settled oil product transaction.">

	deliveryPeriods CommodityDeliveryPeriods (1..1) <"The different options for specifying the Delivery or Supply Periods. Unless the quantity or price is to vary periodically during the trade or physical delivery occurs on a periodic basis, periodsSchedule should be used and set to 1T.">
	oil OilProduct (1..1) <"The specification of the oil product to be delivered.">
	deliveryConditions OilDelivery (1..1) <"The physical delivery conditions for the transaction.">
	deliveryQuantity CommodityPhysicalQuantity (1..1) <"The different options for specifying the quantity.">

type Repo extends Product: <"Global element representing a Repo. A Repo, modeled as an FpML:Product. Note: this Repo model is a candidate model for further industry input.">

	fixedRateSchedule Schedule (0..1) <"The fixed repo rate. It is usually fixed for the duration of the agreement but can be changed with mid-life events (rate changes) except for sell/buy-back trades.">
	floatingRateCalculation FloatingRateCalculation (0..1) <"The floating rate index and tenor, with additional definitions relating to the calculation of floating rate amounts, including spread and multiplier. It is used for floating rate repos. For example, floating rate repos on European markets are made against EONIA.">
	dayCountFraction DayCountFraction (1..1) <"The day count fraction.">
	duration RepoDurationEnum (0..1) <"A duration code for the repo transaction. This defines a type of a repo transaction with fixed duration.">
	repoSequence RepoSequence (0..1)
	initialMargin InitialMargin (0..1) <"Defines initial margin applied to a repo transaction.">
	nearLeg RepoNearLeg (1..1) <"A repo contract is modeled as two purchase/repurchase transactions which are called legs. This is the near leg, i.e. the transaction that will be executed on the near settlement date of the contract.">
	farLeg RepoFarLeg (0..1) <"The far leg of the repo contract, i.e. the repurchase transaction. The BuyerSeller model in the far leg must be the exact opposite of the one found in the near leg.">
	bondEquityModel BondEquityModel (0..*)
	triParty TriParty (0..1)

	condition Choice0:
		required choice fixedRateSchedule, floatingRateCalculation

	condition Choice1:
		required choice duration, repoSequence

	condition Choice2:
		required choice bondEquityModel, triParty

type RequestClearingEligibility extends CorrectableRequestMessage:
	[rootType]

	requestingPartyReference PartyReference (0..1)
	tradingEventsModel TradingEventsModel (0..1)
	deClear DeClear (0..1) <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that it has been done.">
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice tradingEventsModel, deClear

type ClearingEligibility extends ResponseMessage:
	[rootType]

	tradingEventsModel TradingEventsModel (0..1)
	deClear DeClear (0..1) <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that it has been done.">
	partyTradeIdentifier PartyTradeIdentifier (0..1)
	eligibleForClearing boolean (1..1)
	clearingRequirements ClearingRequirements (0..*)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		optional choice tradingEventsModel, deClear , partyTradeIdentifier

type ClearingEligibilityException extends Exception:
	[rootType]

type ClearingEligibilityAcknowledgement extends Acknowledgement:
	[rootType]

type RequestExecution extends CorrectableRequestMessage: <"A message requesting that an order be executed.">
	[rootType]

	tradingEventsModel TradingEventsModel (0..1)
	optionExercise OptionExercise (0..1) <"A structure describing an option exercise event. The optionExercise event supports partial exercise (specify the number of options or amount to exercise), full exercise (use fullExercise flag), as well as the option to request options not to be exercised.">
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice tradingEventsModel, optionExercise

type RequestExecutionRetracted extends NonCorrectableRequestMessage: <"A message withdrawing a request that an order be executed.">
	[rootType]

	tradingEventsModel TradingEventsModel (0..1)
	optionExercise OptionExercise (0..1) <"A structure describing an option exercise event. The optionExercise event supports partial exercise (specify the number of options or amount to exercise), full exercise (use fullExercise flag), as well as the option to request options not to be exercised.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		optional choice tradingEventsModel, optionExercise

type ExecutionNotification extends CorrectableRequestMessage: <"A message notifying a party that a trade execution has occurred. (Typically this is sent by an execution platform to a participant.)">
	[rootType]

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	amendment TradeAmendmentContent (0..1)
	optionsEventsBaseModel OptionsEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)
	eventValuationModel EventValuationModel (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice tradingEventsBaseModel, amendment , optionsEventsBaseModel , additionalEvent

type ExecutionRetracted extends NonCorrectableRequestMessage: <"A message retracting a notification to a party that a trade execution has occurred. (Typically this is sent by an execution platform to a participant.)">
	[rootType]

	tradingEventsModel TradingEventsModel (0..1)
	optionExercise OptionExercise (0..1) <"A structure describing an option exercise event. The optionExercise event supports partial exercise (specify the number of options or amount to exercise), full exercise (use fullExercise flag), as well as the option to request options not to be exercised.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		optional choice tradingEventsModel, optionExercise

type ExecutionAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type ExecutionException extends Exception:
	[rootType]

type ExecutionAdvice extends CorrectableRequestMessage: <"A message advising a third party that a trade execution has occurred.">
	[rootType]

	productType ProductType (0..1)
	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	postTradeEventsBaseModel PostTradeEventsBaseModel (0..1)
	changeEventsBaseModel ChangeEventsBaseModel (0..1)
	optionsEventsBaseModel OptionsEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)
	eventValuationModel EventValuationModel (0..1)
	paymentDetails PaymentDetails (0..*) <"Details of the payments, like amount breakdowns, settlement information.">
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice tradingEventsBaseModel, postTradeEventsBaseModel , changeEventsBaseModel , optionsEventsBaseModel , additionalEvent

type ExecutionAdviceRetracted extends NonCorrectableRequestMessage: <"A message that withdraws an advice to a third party that a trade execution has occurred.">
	[rootType]

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	postTradeEventsBaseModel PostTradeEventsBaseModel (0..1)
	changeEventsBaseModel ChangeEventsBaseModel (0..1)
	optionsEventsBaseModel OptionsEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)
	paymentDetails PaymentDetails (0..*) <"Details of the payments, like amount breakdowns, settlement information.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		optional choice tradingEventsBaseModel, postTradeEventsBaseModel , changeEventsBaseModel , optionsEventsBaseModel , additionalEvent

type ExecutionAdviceAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type ExecutionAdviceException extends Exception:
	[rootType]

type MaturityNotification extends CorrectableRequestMessage: <"A message used to notify another party that a trade has matured. This can be used to report, for example, that a swap has passed its final payment and can be removed, or that an option has expired without being executed.">
	[rootType]

	optionExpiry OptionExpiryBase (0..1)
	tradeMaturity TradeMaturity (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice optionExpiry, tradeMaturity

type MaturityAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type MaturityException extends Exception:
	[rootType]

type RequestTradeReferenceInformationUpdate extends CorrectableRequestMessage: <"Defines the structure for a message requesting information updates to a trade. The trade reference information should contain at least one trade identifier that the recipient is aware of.">
	[rootType]

	tradeReferenceInformationModel TradeReferenceInformationModel (1..1)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

type RequestTradeReferenceInformationUpdateRetracted extends NonCorrectableRequestMessage: <"Defines the structure for a message retracting a request to updated information about trade.">
	[rootType]

	tradeReferenceInformationModel TradeReferenceInformationModel (1..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type TradeReferenceInformationUpdateAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type TradeReferenceInformationUpdateException extends Exception:
	[rootType]

type TradeChangeAdvice extends CorrectableRequestMessage: <"Defines the structure for a message indicating that a trade is being changed due to a non-negotiated event.">
	[rootType]

	change TradeChangeContent (1..1) <"Describes the details of the change.">
	eventValuationModel EventValuationModel (0..1)
	paymentDetails PaymentDetails (0..*) <"Details of the payments, like amount breakdowns, settlement information.">
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

type TradeChangeAdviceRetracted extends NonCorrectableRequestMessage: <"Defines the structure for a message retracting a prior change advice.">
	[rootType]

	tradeIdentifier PartyTradeIdentifier (1..*) <"The qualified identifiers of the subject trade.">
	change TradeChangeContent (0..1) <"Describes the details of the change being retracted.">
	paymentDetails PaymentDetails (0..*) <"Details of the payments, like amount breakdowns, settlement information.">
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

type TradeChangeAdviceAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type TradeChangeAdviceException extends Exception:
	[rootType]

type RequestConsent extends CorrectableRequestMessage: <"A message requesting that the sender be authorized by the recipient to peform an action.">
	[rootType]

	requestedAction RequestedAction (0..1) <"The reason the consent was requested.">
	_type ApprovalType (0..1) <"The type of approval (e.g. \"pre-clearing credit\").">
	approver PersonId (0..1) <"The full name or identifiying ID of the relevant approver.">
	approvingPartyReference PartyReference (0..1) <"A pointer style reference to a party defined elsewhere in the document. The party referenced needs to approve the specified item (e.g. trade or allocation).">
	portfolioReferenceModel PortfolioReferenceModel (0..1)
	compressionModel CompressionModel (0..1)
	tradingAndPostTradeEventsModel TradingAndPostTradeEventsModel (0..1)
	deClear DeClear (0..1) <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that it has been done.">
	eventValuationModel EventValuationModel (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice tradingAndPostTradeEventsModel, deClear

type RequestConsentRetracted extends NonCorrectableRequestMessage: <"A message withdrawing a request that the sender be authorized by the recipient to peform an action.">
	[rootType]

	_type ApprovalType (0..1) <"The type of approval (e.g. \"pre-clearing credit\").">
	approver PersonId (0..1) <"The full name or identifiying ID of the relevant approver.">
	approvingPartyReference PartyReference (0..1) <"A pointer style reference to a party defined elsewhere in the document. The party referenced needs to approve the specified item (e.g. trade or allocation).">
	tradingAndPostTradeEventsModel TradingAndPostTradeEventsModel (0..1)
	deClear DeClear (0..1) <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that it has been done.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		optional choice tradingAndPostTradeEventsModel, deClear

type ConsentAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type ConsentException extends Exception:
	[rootType]

type ConsentGranted extends ResponseMessage: <"A message indicating that the sender grants consent for the recipient to perform the requested action.">
	[rootType]

	_type ApprovalType (0..1) <"The type of approval (e.g. \"pre-clearing credit\").">
	approver PersonId (0..1) <"The full name or identifiying ID of the relevant approver.">
	approvingPartyReference PartyReference (0..1) <"A pointer style reference to a party defined elsewhere in the document. The party referenced needs to approve the specified item (e.g. trade or allocation).">
	approvalId ApprovalId (0..1) <"An identifer for a specific appoval, to allow the approval to be identified and tracked.">
	portfolioReferenceBaseModel PortfolioReferenceBaseModel (0..1)
	eventsOrInfoModel EventsOrInfoModel (0..1)
	creditLimitInformation CreditLimitInformation (0..*)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type ConsentRefused extends ResponseMessage: <"A message indicating that the sender does not grant consent for the recipient to perform the requested action.">
	[rootType]

	_type ApprovalType (0..1) <"The type of approval (e.g. \"pre-clearing credit\").">
	approver PersonId (0..1) <"The full name or identifiying ID of the relevant approver.">
	approvingPartyReference PartyReference (0..1) <"A pointer style reference to a party defined elsewhere in the document. The party referenced needs to approve the specified item (e.g. trade or allocation).">
	portfolioReferenceBaseModel PortfolioReferenceBaseModel (0..1)
	eventsOrInfoModel EventsOrInfoModel (0..1)
	creditLimitInformation CreditLimitInformation (0..*)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)
	reason Reason (0..*)

type ApprovalStatusNotification extends NotificationMessage: <"A message describing the approvals currently applied to the trade and their status (e.g. pending, approved, refused).">
	[rootType]

	trade Trade (0..1)
	tradeIdentifier TradeIdentifier (0..1)
	approvals Approvals (1..1) <"All of the approvals for a specific trade.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		required choice trade, tradeIdentifier

type RequestConfirmation extends CorrectableRequestMessage: <"The confirmation process starts with the requestConfirmation message. The message may be used to request the confirmation of a new trade or any other event supported by FpML such as novation, terminations, amendments, etc. A message type defining the start of the confirmation process. The message may be used to request the confirmation of a new trade or any other event supported by FpML such as novation, terminations, amendments, etc.">
	[rootType]

	tradingAndPostTradeEventsModel TradingAndPostTradeEventsModel (0..1)
	optionExercise OptionExercise (0..1) <"A structure describing an option exercise event. The optionExercise event supports partial exercise (specify the number of options or amount to exercise), full exercise (use fullExercise flag), as well as the option to request options not to be exercised.">
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice tradingAndPostTradeEventsModel, optionExercise

type RequestConfirmationRetracted extends ConfirmationRetracted: <"A requestConfirmation message may be cancelled using the requestConfirmationRetracted message.">
	[rootType]

type ConfirmationAcknowledgement extends EventRequestAcknowledgement: <"A business acknowledgement message to indicate that the previously sent message was sucessfully processed.">
	[rootType]

type ConfirmationException extends Exception: <"A message sent to inform another system that some exception has been detected.">
	[rootType]

type ConfirmationStatus extends ResponseMessage: <"The confirmationStatus message provides the status of the matching process: matched, mismatched, unmatched, or alleged. It may also provide the best fit trade(s) or event(s) as result of the matching process. Message for sending matching results. Response message that returns the status of an event that have been submitted for matching.">
	[rootType]

	status EventStatus (1..1) <"Defines the confirmation status of a trade or post-trade event (e.g. Matched, Mismatched, Unmatched, Alleged).">
	confirmationStatusSequence ConfirmationStatusSequence (0..1)
	allegedEvent EventsChoice (0..1) <"Event (trade post-trade event) asserted by the \"other side\'s\" party.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		required choice confirmationStatusSequence, allegedEvent

type ConfirmationAgreed extends ResponseMessage: <"The confirmationAgreed message is sent when the matching process returns a proposed match (trade or event) and the Confirmation Requester agrees with it. A message indicating that a confirmation has been agreed by a counterparty.">
	[rootType]

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	postTradeEventsBaseModel PostTradeEventsBaseModel (0..1)
	changeEventsBaseModel ChangeEventsBaseModel (0..1)
	optionsEventsBaseModel OptionsEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		optional choice tradingEventsBaseModel, postTradeEventsBaseModel , changeEventsBaseModel , optionsEventsBaseModel , additionalEvent

type ConfirmationDisputed extends ResponseMessage: <"The confirmationDisputed message is sent when the matching process returns a proposed match (trade or event) and the Confirmation Requester disputes it. A message indicating that a confirmation has not been agreed by a counterparty.">
	[rootType]

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	postTradeEventsBaseModel PostTradeEventsBaseModel (0..1)
	changeEventsBaseModel ChangeEventsBaseModel (0..1)
	optionsEventsBaseModel OptionsEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)
	reason Reason (0..*)

	condition Choice:
		optional choice tradingEventsBaseModel, postTradeEventsBaseModel , changeEventsBaseModel , optionsEventsBaseModel , additionalEvent

type RequestClearing extends CorrectableRequestMessage: <"A message requesting that a trade be cleared by a clearing service.">
	[rootType]

	portfolioReferenceModel PortfolioReferenceModel (0..1)
	tradingEventsModel TradingEventsModel (0..1)
	deClear DeClear (0..1) <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that it has been done.">
	eventValuationModel EventValuationModel (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

	condition Choice:
		required choice tradingEventsModel, deClear

type RequestClearingRetracted extends NonCorrectableRequestMessage: <"A message withdrawing a request that a trade be cleared by a clearing service.">
	[rootType]

	tradingEventsModel TradingEventsModel (0..1)
	deClear DeClear (0..1) <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that it has been done.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		optional choice tradingEventsModel, deClear

type ClearingAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type ClearingException extends Exception:
	[rootType]

type ClearingRefused extends NotificationMessage: <"A message indicating that a clearing request has not been acted on due to a business decision and therefore no trade has been cleared.">
	[rootType]

	tradingEventsModel TradingEventsModel (0..1)
	eventValuationModel EventValuationModel (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)
	reason Reason (0..*)

type ClearingStatus extends NotificationMessage: <"A message providing the current status of a clearing request.">
	[rootType]

	clearingStatusItem ClearingStatusItem (0..1) <"Describes the status of the clearing process relating to the identified trade.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type ClearingConfirmed extends NotificationMessage: <"A message indicating that a clearing request has been acted on and as a result a trade has been cleared.">
	[rootType]

	compressionModel CompressionModel (0..1)
	portfolioReferenceModel PortfolioReferenceModel (0..1)
	clearingResultsModel ClearingResultsModel (0..1)
	eventValuationModel EventValuationModel (0..1)
	creditLimitInformation CreditLimitInformation (0..*)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type RequestAllocation extends CorrectableRequestMessage: <"A message requesting that a trade be split among several accounts.">
	[rootType]

	relatedParty RelatedParty (0..*) <"Identifies a related party performing a role within the transaction.">
	blockTradeIdentifier TradeIdentifier (1..1)
	allocations Allocations (1..1)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

type RequestAllocationRetracted extends NonCorrectableRequestMessage: <"A message withdrawing a request that a trade be split among several accounts.">
	[rootType]

	blockTradeIdentifier TradeIdentifier (0..1)
	allocations Allocations (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type AllocationAcknowledgement extends EventRequestAcknowledgement:
	[rootType]

type AllocationException extends Exception:
	[rootType]

type AllocationRefused extends ResponseMessage: <"A message indicating that a request to allocate a trade has been refused by the sender.">
	[rootType]

	blockTradeIdentifier TradeIdentifier (0..1)
	allocations Allocations (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)
	reason Reason (0..*)

type AllocationApproved extends ResponseMessage: <"A message indicating that a request to allocate a trade has been approved by the sender.">
	[rootType]

	blockTradeIdentifier TradeIdentifier (0..1)
	allocations Allocations (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type RequestCollateralAllocation extends CorrectableRequestMessage:
	[rootType]

	serviceName NormalizedString (0..1) <"The name of the service to which the message applies">
	requestedAction RequestedCollateralAllocationAction (0..1) <"The type of change requested for the collateral allocation.">
	collateralGiverPartyReference PartyReference (1..1) <"The party paying the margin / issuing the allocation request.">
	collateralAllocation ProposedCollateralAllocation (1..*) <"Allocation details">
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

type CollateralAllocationAcknowledgement extends Acknowledgement:
	[rootType]

type CollateralAllocationRejected extends Exception:
	[rootType]

type CollateralAllocationAccepted extends ResponseMessage:
	[rootType]

type OptionExpirationNotification extends ExecutionNotification:
	[rootType]

type Bankruptcy extends BankruptcyEvent:

type CreditEventNotice extends CreditEventNoticeDocument: <"A global element used to hold CENs.">
	[rootType]

type FailureToPay extends FailureToPayEvent:

type ObligationAcceleration extends ObligationAccelerationEvent:

type ObligationDefault extends ObligationDefaultEvent:

type RepudiationMoratorium extends RepudiationMoratoriumEvent:

type RestructuringElement extends RestructuringEvent:

type CreditEventNotification extends CorrectableRequestMessage: <"A message defining the ISDA defined Credit Event Notice. ISDA defines it as an irrevocable notice from a Notifying Party to the other party that describes a Credit Event that occurred. A Credit Event Notice must contain detail of the facts relevant to the determination that a Credit Event has occurred. A message type defining the ISDA defined Credit Event Notice. ISDA defines it as an irrevocable notice from a Notifying Party to the other party that describes a Credit Event that occurred. A Credit Event Notice must contain detail of the facts relevant to the determination that a Credit Event has occurred.">
	[rootType]

	creditEventNotice CreditEventNoticeDocument (1..1)
	party Party (2..*)

type CreditEventNotificationRetracted extends NonCorrectableRequestMessage: <"A message retracting a previous credit event notification. A message type retracting a previous credit event notification.">
	[rootType]

	creditEventNotice CreditEventNoticeDocument (0..1)
	party Party (2..*)

type CreditEventAcknowledgement extends Acknowledgement:
	[rootType]

type CreditEventException extends Exception:
	[rootType]

type ValuationSet: <"A set of valuation inputs and results. This structure can be used for requesting valuations, or for reporting them. In general, the request fills in fewer elements.">
	[rootType]

	name String (0..1) <"The name of the valuation set, used to understand what it means. E.g., \"EOD Values and Risks for Party A\".">
	valuationScenario ValuationScenario (0..*) <"Valuation scenerios used (requested/reported) in this valuation set. E.g., the EOD valuation scenario for a particular value date. Used for the first occurrence of a valuation scenario in a document.">
	valuationScenarioReference ValuationScenarioReference (0..*) <"References to valuation scenarios used (requested/reported) in this valuation set. E..g, a reference to the EOD valuation scenario for a particular value date. Used for subsequence occurrences of a valuation set in an FpML document.">
	baseParty PartyReference (0..1) <"Reference to the party from whose point of view the assets are valued.">
	quotationCharacteristics QuotationCharacteristics (0..*) <"Charactistics (measure types, units, sides, etc.) of the quotes used (requested/reported) in the valuation set.">
	sensitivitySetDefinition SensitivitySetDefinition (0..*) <"Definition(s) of sensitivity sets used (requested or reported) in this valuation set.">
	detail ValuationSetDetail (0..1) <"Does this valuation set include a market environment?">
	assetValuation AssetValuation (0..*) <"Valuations reported in this valuation set. These values can be values (NPVs, prices, etc.) or risks (DAR, etc.) and can include sensitivities.">
	id string (0..1)

type DelayedDraw extends AbstractFacility: <"A revolver facility. A facility which can be drawn at any point during a pre-defined period after the initial deal closing date,">

	delayedDraw boolean (1..1) <"A flag to determine whether the Term Loan has a delayed draw feature.">
	mustDrawByDate date (0..1) <"The date by which funds must be drawn.">

type LetterOfCreditFacility extends AbstractFacility: <"A letter of credit facility. A facility designed to issue letter of credit products.">

type Revolver extends AbstractFacility: <"A revolver facility. A facility which allows a flexible line of credit which can be drawn and repaid multiple times over the life of the facility.">

type TermLoan extends AbstractFacility: <"A term loan facility. A facility which is fully funded (utilized) at deal closing.">

type AmendmentFeePayment extends NonRecurringFeePayment: <"A fee charged to the borrower for an amendment being made to the originally agreed credit agreement. The fee is based on a rate (as stated in the agreement) applied to the current commitment level. Calculated as a percentage of the unutilized portion of the facility.">

type BreakageFeePayment extends NonRecurringFeePayment: <"A fee calculated as the cost of breaking financing against a loan contract which is repaid early.">

	breakageFeeClaimDate date (0..1) <"The date by which any breakage costs (if applicable) must be submitted by Lenders to the Agent.">
	breakageFeeCalculatedBy BreakageCalculatedByEnum (0..1) <"Where breakage cost is applicable, this enumeration defines who is calculating it - agent bank or lender.">

type FacilityExtensionFeePayment extends NonRecurringFeePayment: <"This fee represents any fee paid by the borrower to the syndicate lenders for extending an existing facility.">

type FundingFeePayment extends NonRecurringFeePayment: <"A fee associated with the funding requirements for given facility.">

type MiscFeePayment extends NonRecurringFeePayment: <"An event describing a non-recurring fee being paid at either the loan contract or facility level.">

	_type NonRecurringMiscFeeType (1..1)

type UpfrontFeePayment extends NonRecurringFeePayment: <"A structure that represents a fee, also known as Participation Fee, Arrangement Fee etc. This fee represents compensation to the members of the lending syndicate (and sometimes to institutional investors as well) in return for their commitment of capital.">

type WaiverFeePayment extends NonRecurringFeePayment: <"A fee structure that represents a payment made by the borrower to the syndicate lenders for processing and accepting a waiver request. The request is sent by the borrower to obtain approval from the syndicate lenders formally requesting waivers around particular terms of the credit agreement.">

type AccruingFeeChange extends AbstractFacilityEvent: <"An event describing a future change an accruing fee associated with a specific facility.">

	accruingFeeOption AccruingFeeOption (1..1) <"Defines new rate and the date on which the rate is no longer valid.">

type AccruingFeeExpiry extends AbstractFacilityEvent: <"An event describing a future expiry of one of the accruing fees associated with a specific facility.">

	id AccrualTypeId (1..1) <"A unique id associated with the loan accrual type.">
	_type AccruingFeeType (1..1) <"The accruing fee type which ix expiring.">

type CommitmentAdjustment extends AbstractFacilityEvent: <"An event defining a future change in facility commitment.">

	refusalAllowed boolean (1..1) <"Defines whether the lender has an option to accept or deny the commitment change.">
	scheduled boolean (1..1) <"Defines whether the commitment adjustment is scheduled.">
	pik boolean (1..1) <"Defines whether the commitment adjustment is related to a PIK.">
	facilityCommitment FacilityCommitment (1..1) <"The global/lender commitment amount stated AFTER a commitment adjustment has taken place.">
	adjustment AdjustmentType (1..1) <"Defines the type of adjustment applied - increase or decrease.">
	commitmentSchedule CommitmentSchedule (0..1) <"The amortization schedule associated with the facility commitment.">

type FacilityTermination extends AbstractFacilityEvent: <"An event describing the early termination of a facility.">

type Rollover extends AbstractFacilityEvent: <"An event representing the prepayment structure associated within a facility.">

	maturingContracts string (1..1) <"A list of all contracts that are maturing during the rollover event.">
	currentContracts string (1..1) <"A list of all contracts whose rates are resetting or contracts that are initiating as part of the rollover event.">
	rolloverChoice RolloverChoice (1..*)

type LoanPrepayment extends AbstractFacilityEvent: <"A structure that represents the prepayment structure associated within a facility.">

	repayment Repayment (1..1)
	commitmentAdjustment CommitmentAdjustment (0..1)
	breakageFeePayment BreakageFeePayment (0..1)

type DefaultRateChange extends FacilityRateChangeEvent: <"An event representing a change in the default rate, applicable to outstanding loans in the event that the borrower is declared to be in default.">

type DefaultRateExpiry extends AbstractFacilityContractEvent: <"An event representing expiration of the default rate applicable to borrowers in default.">

type MandatoryCostRateChange extends FacilityRateChangeEvent: <"An event representing a change in the mandatory cost rate, applicable to certain outstanding loans in the UK market.">

type MandatoryCostRateExpiry extends AbstractFacilityContractEvent: <"An event representing expiration of the mandatory cost rate applicable in the UK market.">

type PenaltyRateChange extends FacilityRateChangeEvent: <"An event representing a change in the penalty rate applicable to outstanding loans.">

type PenaltyRateExpiry extends AbstractFacilityContractEvent: <"An event representing expiration of the penalty rate.">

type Adjustment extends LoanContractAdjustment:

type BaseRateSet extends LoanContractBaseRateSet:

type Borrowing extends AbstractLoanContractEvent: <"An event representing the fact that a new loan contract (funded borrowing) has been requested by the borrower.">

	amount MoneyWithParticipantShare (1..1)
	conditionsPrecedentMet ConditionsPrecedentMetEnum (0..1) <"An enumeration which describes whether the condition precent have been met, not met or been waived. Please note: this field in not required since conditions precedent may not be applicable in certain scenarios.">

type InterestCapitalization extends AbstractLoanContractEvent: <"An event representing the lender-specific capitalization of interest amounts for a given accrual period against a single loan contract.">

	periodModel PeriodModel (1..1)
	calculationMethod InterestCalculationMethodEnum (1..1) <"Defines the way in which the agent bank is allocating cash/PIK interest - can be (i) pro-rata at the time of the interest payment/PIK or (ii) based on the loan contract share throughout the interest period (which is the preferred method).">
	amount MoneyWithParticipantShare (1..1)
	interestCapitalizationSequence InterestCapitalizationSequence (0..1)

type InterestPayment extends LoanInterestPayment:

type MaturityChange extends LoanContractMaturityChange:

type Repayment extends AbstractLoanContractEvent: <"An event representing a principal repayment being made by the borrower.">

	amount MoneyWithParticipantShare (1..1)
	price NonNegativeDecimal (0..1) <"The price at which the repayment occurred. This is usually Par but there could be scenarios where a repayment was made at a discounted level.">
	repaymentTypeModel RepaymentTypeModel (1..1)

type LcAdjustment extends AbstractLcEvent: <"An event representing a change in the notional amount associated with an outstanding letter of credit.">

	adjustment AdjustmentType (1..1) <"Defines the type of adjustment applied - increase or decrease.">
	amount MoneyWithParticipantShare (1..1) <"The letter of credit amount after the adjustment has been applied.">
	relatedBorrowing boolean (1..1) <"Set to false for a normal increase or decrease in the letter of credit amount. If set to true, it signifies that a loan borrowing will take place in conjunction with this business event.">

type LcFxRevaluation extends AbstractLcEvent: <"An event representing a change in either the [L/C -&gt; Facility] or [Accrual -&gt; L/C] FX rates (or both) on an outstanding letter of credit.">

	lcFxRate FxTerms (0..1) <"Defines exchange rate between the letter of credit accrual and letter of credit currencies.">
	facilityFxRate FxTerms (0..1) <"Defines exchange rate between the letter of credit and facility.">

type LcIssuance extends AbstractLcEvent: <"An event representing the issuance of a new letter of credit under an existing facility.">

	amount MoneyWithParticipantShare (1..1) <"The letter of credit notional amount.">

type LcIssuanceFeePayment extends AbstractLcEvent: <"An event representing a letter of credit issuance fee payment.">

	id AccrualTypeId (1..1) <"A unique id associated with the loan accrual type.">
	periodModel PeriodModel (1..1)
	amount MoneyWithParticipantShare (1..1)
	accrualSchedule AccrualPeriod (0..*) <"A schedule that incorporates all sub-periods of an accrual calculation.">

type LcRateChange extends AbstractLcEvent: <"An event representing a change in the rate on an outstanding letter of credit.">

	rate number (1..1)

type LcRenewal extends AbstractLcEvent: <"An event representing a change in the maturity date on an outstanding letter of credit.">

	finalExpiryDate date (1..1) <"The final letter of credit expiry date (as defined by the evergreen option).">
	maturityDate date (0..1) <"The original maturity date of the letter of credit.">

type LcTermination extends AbstractLcEvent: <"An event representing either the expiry or cancellation of a letter of credit">

	expiry boolean (1..1) <"Determines whether this event was created due to a natural expiration of the letter of credit or an unscheduled cancellation.">

type LoanBulkServicingNotification extends AbstractContractNotification: <"A loan servicing notification used to communicate multiple business events, within a single notification.">
	[rootType]

	loanBulkServicingNotificationChoice0 LoanBulkServicingNotificationChoice0 (2..*)
	loanBulkServicingNotificationChoice1 LoanBulkServicingNotificationChoice1 (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanNotificationAcknowledgement extends LoanAcknowledgement: <"A message used to acknowledge a loan notification.">
	[rootType]

	loanIdentifiersModel LoanIdentifiersModel (1..1)

type LoanNotificationException extends Exception: <"A message used to indicate an exception issue with a loan notification.">
	[rootType]

	loanNotificationExceptionSequence LoanNotificationExceptionSequence (0..1)

type LoanNotificationRetracted extends NonCorrectableRequestMessage: <"A message used to indicate a retraction of a loan notification.">
	[rootType]

	loanIdentifiersModel LoanIdentifiersModel (1..1)
	party Party (1..1)
	originalMessage UnprocessedElementWrapper (0..1)

type LoanPartyEventInstructionOverrideNotification extends AbstractLoanPartyProfileNotification: <"A set of instructions communicated by parties to override standard payment details for a specific to a set of (any) loan events.">
	[rootType]

	^override EventInstructionOverride (1..1) <"The event for which the (currency-specific) settlement instructions should be applied.">
	party Party (1..*)

type LoanPartyProfileNotification extends AbstractLoanPartyProfileNotification: <"A profile generated and communicated by parties containing their relevant contact and payment details. This is communicated by parties to anyone who wishes to initiate payments and/or communicate with them.">
	[rootType]

	partyProfile PartyProfile (1..1)
	party Party (1..*)

type LoanPartyTradingInstructionOverrideNotification extends AbstractLoanPartyProfileNotification: <"A set of instructions communicated by parties to override standard payment details for a specific trade or allocation settlement only.">
	[rootType]

	^override TradingInstructionOverride (1..1)
	tradeSummary LoanTradeSummary (1..1) <"A summary structure representing a loan trade.">
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type AccrualOptionChangeNotification extends AbstractContractNotification: <"A loan servicing notification used to update an accrual option within a single facility. Embedded business events simply re-state the given accrual option.">
	[rootType]

	accrualOptionChangeNotificationSequence0 AccrualOptionChangeNotificationSequence0 (0..1)
	accruingPikOptionChange AccruingPikOptionChange (0..1)
	accrualOptionChangeNotificationSequence1 AccrualOptionChangeNotificationSequence1 (0..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	loanContractDetailsModel LoanContractDetailsModel (0..*)
	letterOfCreditDetailsModel LetterOfCreditDetailsModel (0..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

	condition Choice:
		required choice accrualOptionChangeNotificationSequence0, accruingPikOptionChange , accrualOptionChangeNotificationSequence1

type AccruingFeeChangeNotification extends AbstractFacilityNotification: <"A loan servicing notification used to communicate a change in an accruing fee option. These options define the rates/calculations associated with facility-level accruing fees.">
	[rootType]

	accruingFeeChangeGroup AbstractFacilityEvent (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type AccruingFeePaymentNotification extends AbstractFacilityNotification: <"A loan servicing notification used to communicate an accruing fee payment made by the borrower.">
	[rootType]

	accruingFeePayment AccruingFeePayment (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type AccruingPikPaymentNotification extends AbstractFacilityNotification: <"A loan servicing notification used to communicate an accruing PIK rate being capitalized by the borrower.">
	[rootType]

	accruingPikPayment AccruingPikPayment (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type FacilityNotification extends AbstractFacilityNotification: <"A loan servicing notification which can be used to communicate any facility-level business event.">
	[rootType]

	facilityEventGroup AbstractFacilityEvent (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type FacilityRateChangeNotification extends AbstractFacilityNotification: <"A loan servicing notification used to communicate changes in facility-level rates (e.g. penalty rate, default rate etc.).">
	[rootType]

	facilityRateChangeGroup AbstractFacilityContractEvent (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	loanContractDetailsModel LoanContractDetailsModel (0..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LcNotification extends AbstractContractNotification: <"A loan servicing notification used to communicate various letter of credit business events.">
	[rootType]

	lcEventGroup AbstractLcEvent (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	letterOfCreditDetailsModel LetterOfCreditDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanContractNotification extends AbstractContractNotification: <"A loan servicing notification used to communicate various loan contract business events.">
	[rootType]

	loanContractEventGroup AbstractLoanContractEvent (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	loanContractDetailsModel LoanContractDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type NonRecurringFeePaymentNotification extends AbstractContractNotification: <"A loan servicing notification used to communicate a non-recurring fee payment made by the borrower.">
	[rootType]

	facilityFeePaymentGroup NonRecurringFeePayment (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	loanContractDetailsModel LoanContractDetailsModel (0..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type PrepaymentNotification extends AbstractContractNotification: <"A loan servicing notification designed to communicate the specific business events associated with a pre-payment made by the borrower.">
	[rootType]

	prepayment LoanPrepayment (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	loanContractDetailsModel LoanContractDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type RolloverNotification extends AbstractContractNotification: <"A loan servicing notification designed to communicate the combination of business events associated with a rollover transaction.">
	[rootType]

	rollover Rollover (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationConfirmationNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate confirmation of trade allocation details, from counterparty to counterparty, or admin agent to counterparty.">
	[rootType]

	confirmation LoanAllocationEvent (1..1) <"A structure to confirm the allocation of a loan trade.">
	allocationIdentifier LoanAllocationIdentifier (1..*) <"Unique allocation id used to identify the allocation record.">
	tradeSummary LoanTradeSummary (1..1)
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate trade allocation details, from counterparty to counterparty, or counterparty to admin agent.">
	[rootType]

	allocationEvent LoanAllocationEvent (1..1) <"A structure to establish the loan trade allocation event. This structure contains an event identifier for the allocation event as well as a reference to the details of the loan trade alloocation, contained in an element in the message.">
	allocation LoanAllocation (1..*) <"A structure defining information related to a loan trade allocation.">
	tradeSummary LoanTradeSummary (1..1) <"A summary structure representing a loan trade.">
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationSettlementNotification extends AbstractLoanAllocationPaymentNotification: <"A loan servicing notification used to communicate trade settlement details (including funding economics), from counterparty to counterparty.">
	[rootType]

	settlement LoanAllocationSettlementEvent (1..*) <"A structure to detail the settlement of an allocation.">
	loanTradeAllocationDetailsModel LoanTradeAllocationDetailsModel (1..*)
	facilityLoanContractDetailsModel FacilityLoanContractDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationSettlementTaskNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate allocation-level tasks and their statuses, the completion of which are deemed by the sender of the notification to be prerequisites to the settlement of a trade or allocation.">
	[rootType]

	task LoanAllocationSettlementTask (1..*) <"The task, which is a prerequisite to allocation settlement.">
	loanTradeAllocationDetailsModel LoanTradeAllocationDetailsModel (1..*)
	facilityDetailsModel FacilityDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationSettlementDateAvailabilityNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate trade settlement date coordination (i.e. availability) details, between admin agent and counterparties.">
	[rootType]

	settlementDateAvailability LoanSettlementDateAvailabilityEvent (1..*) <"An event structure defining information related to date availability to settle an allocation.">
	loanTradeAllocationDetailsModel LoanTradeAllocationDetailsModel (1..*)
	facilityDetailsModel FacilityDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationSettlementDateFinalizationNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate finalized trade settlement date details, from admin agent to counterparties.">
	[rootType]

	settlementDateFinalization LoanSettlementDateFinalizationEvent (1..*) <"An event structure defining information related to date availability to settle an allocation.">
	loanTradeAllocationDetailsModel LoanTradeAllocationDetailsModel (1..*)
	facilityDetailsModel FacilityDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationTransferFeeDueNotification extends AbstractLoanAllocationPaymentNotification: <"A loan servicing notification used to communicate transfer fee details, from admin agent to counterparty.">
	[rootType]

	feeDue LoanAllocationTransferFeeDueEvent (1..*) <"A structure to indicate the transfer fee due at the allocation level.">
	loanTradeAllocationDetailsModel LoanTradeAllocationDetailsModel (1..*)
	facilityDetailsModel FacilityDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanAllocationTransferFeeOwedNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate transfer fee details, from admin agent to counterparty.">
	[rootType]

	feeOwed LoanAllocationTransferFeeOwedEvent (1..*) <"A structure to detail the fee owed to the agent for the transfer of a commitment from seller to buyer.">
	loanTradeAllocationDetailsModel LoanTradeAllocationDetailsModel (1..*)
	facilityDetailsModel FacilityDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanTradeConfirmationNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate confirmation of master trade details, from counterparty to counterparty.">
	[rootType]

	confirmation LoanTradeEvent (1..1) <"A structure to confirm the original loan trade event, conveyed in the Loan Trade Notification.">
	tradeSummary LoanTradeSummary (1..1) <"A summary of the trade.">
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanTradeNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate details to establish a master trade, from counterparty to counterparty.">
	[rootType]

	tradeEvent LoanTradeEvent (1..1) <"A structure to establish the loan trade event. This structure contains an event identifier for the trade as well as a reference to the details of the trade, contained in an element in the message.">
	trade LoanTrade (1..1) <"A structure defining counterparty-to-counterparty loan trade information. This structure contains the main (e.g. fund manager/main counterparty) trade details.">
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanTradeSettlementTaskNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate master trade-level tasks and their statuses, the completion of which are deemed by the sender of the notification to be prerequisites to the settlement of a trade or allocation.">
	[rootType]

	task LoanTradeSettlementTask (1..*) <"The task, which is a prerequisite to trade settlement.">
	tradeSummary LoanTradeSummary (1..*) <"A summary of the master trade.">
	facilityDetailsModel FacilityDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanTradeTransferFeeOwedNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate transfer fee details, from admin agent to counterparty.">
	[rootType]

	feeOwed LoanTradeTransferFeeOwedEvent (1..1) <"A structure to detail the fee owed to the agent for the transfer of a commitment from seller to buyer.">
	tradeSummary LoanTradeSummary (1..1) <"A summary of the trade.">
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanTradeTransferFeeDueNotification extends AbstractLoanTradePaymentNotification: <"A loan servicing notification used to communicate transfer fee details, from admin agent to counterparty.">
	[rootType]

	feeDue LoanTradeTransferFeeDueEvent (1..*) <"A structure to indicate the transfer fee due at the loan trade level.">
	tradeSummary LoanTradeSummary (1..*) <"A summary of the trade.">
	facilityDetailsModel FacilityDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanTransferNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate details to establish a master trade, from counterparty to admin agent.">
	[rootType]

	transferEvent LoanTradeEvent (1..1) <"A structure to establish the loan transfer event. This structure contains an event identifier for the trade as well as a reference to the details of the trade, contained in an element in the message.">
	transfer LoanTransfer (1..1) <"An event structure defining loan transfer information, sent from counterparty to agent. This structure contains the main (e.g. fund manager/main counterparty) trade details.">
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type LoanTransferSettlementNotification extends AbstractLoanTradingNotification: <"A loan servicing notification used to communicate trade settlement position and outstandings details, from admin agent to counterparty.">
	[rootType]

	settlement LoanTransferSettlementEvent (1..*) <"The transfer settlement event.">
	loanTradeAllocationDetailsModel LoanTradeAllocationDetailsModel (1..*)
	facilityLoanContractDetailsModel FacilityLoanContractDetailsModel (1..*)
	party Party (1..*) <"A legal entity or a subdivision of a legal entity.">

type DealStatement extends AbstractLoanStatement: <"A full set of deal and facility definitions valid as of a specific date.">
	[rootType]

	deal Deal (1..1) <"A complete deal structure.">
	party Party (0..*) <"A legal entity or a subdivision of a legal entity.">

type FacilityStatement extends AbstractLoanStatement: <"A single facility definition stated as of a certain date.">
	[rootType]

	facilityGroup AbstractFacility (1..1)
	party Party (0..*) <"A legal entity or a subdivision of a legal entity.">

type OutstandingContractsStatement extends AbstractLoanStatement: <"A collection of outstanding loan contract and/or letter of credit structures belonging to a single facility.">
	[rootType]

	facilityIdentifier FacilityIdentifier (1..1) <"The facility to which the loan contracts and/or letter of credits belong.">
	outstandingContractsStatementChoice OutstandingContractsStatementChoice (1..*)
	party Party (0..*) <"A legal entity or a subdivision of a legal entity.">

type FacilityPositionStatement extends AbstractLoanStatement: <"A statement containing the commitment amounts for a single facility at the global and (optionally) the lender postion levels, on a specific date.">
	[rootType]

	facilityPosition FacilityPosition (1..1) <"Commitment position details for a single facility. Positions can be stated at the global and (optionally) at the lender-specific level.">
	positionPartyReference PartyReference (0..1) <"A reference to the party for whom positions are being reported (if applicable position amounts are populated).">
	facilityDetailsModel FacilityDetailsModel (1..1)
	party Party (0..*) <"A legal entity or a subdivision of a legal entity.">

type FacilityOutstandingsPositionStatement extends AbstractLoanStatement: <"A structure that represents position details (including outstandings) for a single facility. Positions can be stated at the global and (optionally) at the lender-specific level.">
	[rootType]

	facilityOutstandingsPosition FacilityOutstandingsPosition (1..1) <"Commitment and outstanding position details for a single facility. Positions can be stated at the global and (optionally) at the lender-specific level.">
	positionPartyReference PartyReference (0..1) <"A reference to the party for whom positions are being reported.">
	facilityDetailsModel FacilityDetailsModel (1..1)
	loanContractDetailsModel LoanContractDetailsModel (0..*)
	party Party (0..*) <"A legal entity or a subdivision of a legal entity.">

type AmericanExercise extends Exercise: <"The parameters for defining the exercise period for an American style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees. A type defining the exercise period for an American style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.">

	commencementDate AdjustableOrRelativeDate (1..1) <"The first day of the exercise period for an American style option.">
	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.">
	relevantUnderlyingDate AdjustableOrRelativeDates (0..1) <"The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).">
	earliestExerciseTime BusinessCenterTime (1..1) <"The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.">
	latestExerciseTime BusinessCenterTime (0..1) <"For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.">
	expirationTime BusinessCenterTime (1..1) <"The latest time for exercise on expirationDate.">
	multipleExercise MultipleExercise (0..1) <"As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an intergral multiple of, the integral multiple amount.">
	exerciseFeeSchedule ExerciseFeeSchedule (0..1) <"The fees associated with an exercise date. The fees are conditional on the exercise occuring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.">

type BermudaExercise extends Exercise: <"The parameters for defining the exercise period for a Bermuda style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees. A type defining the Bermuda option exercise dates and the expiration date together with any rules govenerning the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fee.">

	bermudaExerciseDates AdjustableOrRelativeDates (1..1) <"The dates the define the Bermuda option exercise dates and the expiration date. The last specified date is assumed to be the expiration date. The dates can either be specified as a series of explicit dates and associated adjustments or as a series of dates defined relative to another schedule of dates, for example, the calculation period start dates. Where a relative series of dates are defined the first and last possible exercise dates can be separately specified.">
	relevantUnderlyingDate AdjustableOrRelativeDates (0..1) <"The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).">
	earliestExerciseTime BusinessCenterTime (1..1) <"The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.">
	latestExerciseTime BusinessCenterTime (0..1) <"For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.">
	expirationTime BusinessCenterTime (1..1) <"The latest time for exercise on expirationDate.">
	multipleExercise MultipleExercise (0..1) <"As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an intergral multiple of, the integral multiple amount.">
	exerciseFeeSchedule ExerciseFeeSchedule (0..1) <"The fees associated with an exercise date. The fees are conditional on the exercise occuring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.">

type EuropeanExercise extends Exercise: <"The parameters for defining the exercise period for a European style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees. A type defining the exercise period for a European style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.">

	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.">
	relevantUnderlyingDate AdjustableOrRelativeDates (0..1) <"The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).">
	earliestExerciseTime BusinessCenterTime (1..1) <"The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.">
	expirationTime BusinessCenterTime (1..1) <"The latest time for exercise on expirationDate.">
	partialExercise PartialExercise (0..1) <"As defined in the 2000 ISDA Definitions, Section 12.3. Partial Exercise, the buyer of the option has the right to exercise all or less than all the notional amount of the underlying swap on the expiration date, but may not exercise less than the minimum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.">
	exerciseFee ExerciseFee (0..1) <"A fee to be paid on exercise. This could be represented as an amount or a rate and notional reference on which to apply the rate.">

type InterestLeg extends DirectionalLeg: <"The fixed income amounts of the return type swap. A type describing the fixed income leg of the equity swap.">

	interestLegCalculationPeriodDates InterestLegCalculationPeriodDates (1..1) <"Component that holds the various dates used to specify the interest leg of the equity swap. It is used to define the InterestPeriodDates identifyer.">
	notional ReturnSwapNotional (1..1) <"Specifies the notional of a return type swap. When used in the equity leg, the definition will typically combine the actual amount (using the notional component defined by the FpML industry group) and the determination method. When used in the interest leg, the definition will typically point to the definition of the equity leg.">
	interestAmount LegAmount (1..1) <"Specifies, in relation to each Interest Payment Date, the amount to which the Interest Payment Date relates. Unless otherwise specified, this term has the meaning defined in the ISDA 2000 ISDA Definitions.">
	interestCalculation InterestCalculation (1..1) <"Specifies the calculation method of the interest rate leg of the equity swap. Includes the floating or fixed rate calculation definitions, along with the determination of the day count fraction.">
	stubCalculationPeriod StubCalculationPeriod (0..1) <"Specifies the stub calculation period.">

type ReturnLeg extends ReturnSwapLegUnderlyer: <"Return amounts of the return type swap. A type describing the return leg of a return type swap.">

	rateOfReturn ReturnLegValuation (1..1) <"Specifies the terms of the initial price of the return type swap and of the subsequent valuations of the underlyer.">
	notional ReturnSwapNotional (1..1) <"Specifies the notional of a return type swap. When used in the equity leg, the definition will typically combine the actual amount (using the notional component defined by the FpML industry group) and the determination method. When used in the interest leg, the definition will typically point to the definition of the equity leg.">
	amount ReturnSwapAmount (1..1) <"Specifies, in relation to each Payment Date, the amount to which the Payment Date relates. For return swaps this element is equivalent to the Equity Amount term as defined in the ISDA 2002 Equity Derivatives Definitions.">
	return Return (1..1) <"Specifies the conditions under which dividend affecting the underlyer will be paid to the receiver of the amounts.">
	notionalAdjustments NotionalAdjustmentEnum (1..1) <"Specifies the conditions that govern the adjustment to the number of units of the return swap.">
	fxFeature FxFeature (0..1) <"A quanto or composite FX feature.">
	averagingDates AveragingPeriod (0..1) <"Averaging Dates used in the swap.">

type ReturnSwap extends ReturnSwapBase: <"Specifies the structure of a return type swap. It can represent return swaps, total return swaps, variance swaps. A type describing return swaps including return swaps (long form), total return swaps, and variance swaps.">

	earlyTermination ReturnSwapEarlyTermination (0..*) <"Specifies, for one or for both the parties to the trade, the date from which it can early terminate it.">
	extraordinaryEvents ExtraordinaryEvents (0..1) <"Where the underlying is shares, specifies events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.">

type Basket extends Asset: <"Defines the underlying asset when it is a basket. A type describing the underlyer features of a basket swap. Each of the basket constituents are described through an embedded component, the basketConstituentsType.">

	openUnits number (0..1) <"The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.">
	basketConstituent BasketConstituent (1..*) <"Describes each of the components of the basket.">
	basketDivisor number (0..1) <"Specifies the basket divisor amount. This value is normally used to adjust the constituent weight for pricing or to adjust for dividends, or other corporate actions.">
	basketVersion int(min: 0) (0..1) <"Basket version, used to record changes in basket composition or weights">
	basketIdentifierModel BasketIdentifierModel (0..1)
	basketCurrency Currency (0..1) <"Specifies the currency for this basket.">

type Bond extends UnderlyingAsset: <"Identifies the underlying asset when it is a series or a class of bonds. An exchange traded bond.">

	fixedIncomeSecurityContentModel FixedIncomeSecurityContentModel (1..1)
	parValue number (0..1) <"Specifies the nominal amount of a fixed income security or convertible bond.">
	faceAmount number (0..1) <"Specifies the total amount of the issue. Corresponds to the par value multiplied by the number of issued security.">
	bondCalculationModel BondCalculationModel (1..1)

type Cash extends Asset: <"Identifies a simple underlying asset type that is a cash payment. Used for specifying discounting factors for future cash flows in the pricing and risk model.">

	instrumentId InstrumentId (0..*) <"Identification of the underlying asset, using public and/or private identifiers.">
	description String (0..1) <"Long name of the underlying asset.">
	currency Currency (1..1) <"The currency in which an amount is denominated.">

type Commodity extends IdentifiedAsset: <"Identifies the underlying asset when it is a listed commodity. A type describing a commodity underlying asset.">

	commodityProductModel CommodityProductModel (1..1)

type ConvertibleBond extends Bond: <"Identifies the underlying asset when it is a convertible bond.">

	underlyingEquity EquityAsset (0..1) <"Specifies the equity in which the convertible bond can be converted.">
	redemptionDate date (0..1) <"Earlier date between the convertible bond put dates and its maturity date.">

type Deposit extends UnderlyingAsset: <"Identifies a simple underlying asset that is a term deposit.">

	term Period (1..1) <"Specifies the term of the deposit, e.g. 5Y.">
	paymentFrequency Period (0..1) <"Specifies the frequency at which the deposit pays, e.g. 6M.">
	dayCountFraction DayCountFraction (0..1) <"The day count basis for the deposit.">

type Equity extends EquityAsset: <"Identifies the underlying asset when it is a listed equity.">

type ExchangeTradedFund extends ExchangeTradedCalculatedPrice: <"Identifies the underlying asset when it is an exchange-traded fund. An exchange traded fund whose price depends on exchange traded constituents.">

	fundManager String (0..1) <"Specifies the fund manager that is in charge of the fund.">

type Future extends ExchangeTraded: <"Identifies the underlying asset when it is a listed future contract. An exchange traded future contract.">

	multiplier PositiveDecimal (0..1) <"The multiplier is the minimum number of the underlying - index or stock - that a participant has to trade while taking a position in the Future contract. The purpose of the multiplier is to inflate the value of the contract to add leverage to the trade. The multiplier for the Dow is 10, for the Nasdaq it is 100 and it is 250 for the Standard and Poor\'s index.">
	futureContractReference String (0..1) <"Native identifier for the contract on the listing exchange.">
	maturity date (0..1) <"The date when the future contract expires.">
	contractYearMonth int (0..1) <"The contract month of the futures contract. i.e. F13 WTI NYMEX Contract is 2013-01.">
	underlyer ExchangeTradedContractUnderlyer (0..1) <"Underlyer of the option e.g. a listed future.">
	settlementType SettlementTypeEnum (0..1) <"Settlement method for the contract (Cash, Physical). This value is used to populate the \"Delivery Type\" field for regulatory reporting (CFTC, ESMA).">

	condition Choice:
		optional choice maturity, contractYearMonth

type Fx extends FxRateAsset: <"Identifies a simple underlying asset type that is an FX rate. Used for specifying FX rates in the pricing and risk model.">

type Index extends ExchangeTradedCalculatedPrice: <"Identifies the underlying asset when it is a financial index. A published index whose price depends on exchange traded constituents.">

	futureId FutureId (0..1) <"A short form unique identifier for the reference future contract in the case of an index underlyer.">

type Loan extends UnderlyingAsset: <"Identifies a simple underlying asset that is a loan. A type describing a loan underlying asset.">

	loanChoice LoanChoice (0..*)
	lien Lien (0..1) <"Specifies the seniority level of the lien.">
	facilityType FacilityType (0..1) <"The type of loan facility (letter of credit, revolving, ...).">
	maturity date (0..1) <"The date when the principal amount of the loan becomes due and payable.">
	creditAgreementDate date (0..1) <"The credit agreement date is the closing date (the date where the agreement has been signed) for the loans in the credit agreement. Funding of the facilities occurs on (or sometimes a little after) the Credit Agreement date. This underlyer attribute is used to help identify which of the company\'s outstanding loans are being referenced by knowing to which credit agreement it belongs. ISDA Standards Terms Supplement term: Date of Original Credit Agreement.">
	tranche UnderlyingAssetTranche (0..1) <"The loan tranche that is subject to the derivative transaction. It will typically be referenced as the Bloomberg tranche number. ISDA Standards Terms Supplement term: Bloomberg Tranche Number.">
	seniority CreditSeniority (0..1) <"The seniority. E.g. senior, senior secured etc.">

type Mortgage extends UnderlyingAsset: <"Identifies a mortgage backed security. A type describing a mortgage asset.">

	insurer LegalEntity (0..1)
	insurerReference LegalEntityReference (0..1)
	fixedIncomeSecurityContentModel FixedIncomeSecurityContentModel (1..1)
	bondCalculationModel BondCalculationModel (1..1)
	originalPrincipalAmount number (0..1) <"The initial issued amount of the mortgage obligation.">
	pool AssetPool (0..1) <"The morgage pool that is underneath the mortgage obligation.">
	sector MortgageSector (0..1) <"The sector classification of the mortgage obligation.">
	tranche Token (0..1) <"The mortgage obligation tranche that is subject to the derivative transaction.">

	condition Choice:
		optional choice insurer, insurerReference

type MutualFund extends UnderlyingAsset: <"Identifies the class of unit issued by a fund.">

	openEndedFund boolean (0..1) <"Boolean indicator to specify whether the mutual fund is an open-ended mutual fund.">
	fundManager String (0..1) <"Specifies the fund manager that is in charge of the fund.">

type OptionElement extends ExchangeTradedOption: <"Identifies the underlying asset when it is a listed option contract.">

type RateIndex extends UnderlyingAsset: <"Identifies a simple underlying asset that is an interest rate index. Used for specifying benchmark assets in the market environment in the pricing and risk model.">

	floatingRateIndex FloatingRateIndex (1..1)
	term Period (1..1) <"Specifies the term of the simple swap, e.g. 5Y.">
	paymentFrequency Period (0..1) <"Specifies the frequency at which the index pays, e.g. 6M.">
	dayCountFraction DayCountFraction (0..1) <"The day count basis for the index.">

type SimpleCreditDefaultSwap extends UnderlyingAsset: <"Identifies a simple underlying asset that is a credit default swap.">

	creditEntityModel CreditEntityModel (1..1)
	term Period (1..1) <"Specifies the term of the simple CD swap, e.g. 5Y.">
	paymentFrequency Period (0..1) <"Specifies the frequency at which the swap pays, e.g. 6M.">

type SimpleFra extends UnderlyingAsset: <"Identifies a simple underlying asset that is a forward rate agreement.">

	startTerm Period (1..1) <"Specifies the start term of the simple fra, e.g. 3M.">
	endTerm Period (1..1) <"Specifies the end term of the simple fra, e.g. 9M.">
	dayCountFraction DayCountFraction (0..1) <"The day count basis for the FRA.">

type SimpleIRSwap extends UnderlyingAsset: <"Identifies a simple underlying asset that is a swap.">

	term Period (1..1) <"Specifies the term of the simple swap, e.g. 5Y.">
	paymentFrequency Period (0..1) <"Specifies the frequency at which the swap pays, e.g. 6M.">
	dayCountFraction DayCountFraction (0..1) <"The day count basis for the swap.">

type Warrant extends ExchangeTradedContract: <"Defines the underlying asset when it is a warrant.">

type BasketChange extends BasketChangeEvent: <"Describes a change due to change in composition of basket underlyer">
	[rootType]

type ChangeEvent extends AbstractEvent: <"Abstract substitutable place holder for specific change details. Abstract base type for non-negotiated trade change descriptions">
	[rootType]

type CorporateAction extends CorporateActionEvent: <"Describes a change due to a corporate action">
	[rootType]

type IndexChange extends ChangeEvent: <"Describes a change due to an index component being adjusted. A structure describing the effect of a change to an index.">
	[rootType]

	indexFactor number (1..1)
	factoredCalculationAmount Money (1..1)

type EventStatusResponse extends ResponseMessage: <"A type defining the content model for a message normally generated in response to a requestEventStatus request.">
	[rootType]

	statusItem EventStatusItem (1..*)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type EventStatusException extends Exception:
	[rootType]

type MessageRejected extends Exception: <"The root element used for rejected message exceptions">
	[rootType]

type ServiceNotification extends NotificationMessage: <"A type defining the content model for a message that allows a service to send a notification message to a user of the service.">
	[rootType]

	serviceName NormalizedString (0..1) <"The name of the service to which the message applies">
	status ServiceStatus (0..1) <"The current state of the service (e.g. Available, Unavailable).">
	processingStatus ServiceProcessingStatus (0..1) <"A description of the stage of processing of the service, for example EndofDayProcessingCutoffOccurred, EndOfDayProcessingCompleted. [TBD: could be combined with advisory]">
	advisory ServiceAdvisory (0..1) <"A human-readable message providing information about the service..">

	condition Choice:
		required choice status, processingStatus , advisory

type ServiceNotificationException extends Exception:
	[rootType]

type RequestEventStatus extends NonCorrectableRequestMessage: <"A type defining the content model for a message allowing one party to query the status of one event (trade or post-trade event) previously sent to another party.">
	[rootType]

	businessProcess BusinessProcess (0..1)
	eventIdentifier EventIdentifier (1..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type RequestRetransmission extends NonCorrectableRequestMessage: <"A message to request that a message be retransmitted. The original message will typically be a component of a group of messages, such as a portfolio or a report in multiple parts.">
	[rootType]

	portfolioReferenceOrReportIdentificationModel PortfolioReferenceOrReportIdentificationModel (1..1)
	partiesAndAccountsModel PartiesAndAccountsModel (1..1)

type VerificationStatusNotification extends NonCorrectableRequestMessage:
	[rootType]

	status VerificationStatus (1..1)
	reason Reason (0..*) <"The reason for any dispute or change in verification status.">
	partyTradeIdentifier PartyTradeIdentifier (1..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type VerificationStatusException extends Exception:
	[rootType]

type VerificationStatusAcknowledgement extends Acknowledgement:
	[rootType]

type CreditCurve extends PricingStructure: <"A generic credit curve definition.">

	creditCurveCharacteristicsModel CreditCurveCharacteristicsModel (0..1)

type CreditCurveValuation extends PricingStructureValuation: <"A set of credit curve values, which can include pricing inputs (which are typically credit spreads), default probabilities, and recovery rates.">

	^inputs QuotedAssetSet (0..1)
	defaultProbabilityCurve DefaultProbabilityCurve (0..1) <"A curve of default probabilities.">
	recoveryRateModel RecoveryRateModel (0..1)

type FxCurve extends PricingStructure: <"An fx curve object., which includes pricing inputs and term structures for fx forwards.">

	fxCurveCharacteristicsModel FxCurveCharacteristicsModel (0..1)

type FxCurveValuation extends PricingStructureValuation: <"A valuation of an FX curve object., which includes pricing inputs and term structures for fx forwards.">

	settlementCurrencyYieldCurve PricingStructureReference (0..1)
	forecastCurrencyYieldCurve PricingStructureReference (0..1)
	spotRate FxRateSet (0..1)
	fxForwardCurve TermCurve (0..1) <"A curve of fx forward rates.">
	fxForwardPointsCurve TermCurve (0..1) <"A curve of fx forward point spreads.">

type VolatilityMatrixValuation extends VolatilityMatrix:

type VolatilityRepresentation extends PricingStructure: <"A representation of volatilities of an asset. This is a generic structure whose values can be supplied in a specific volatility matrix.">

	asset AnyAssetReference (1..1) <"A reference to the asset whose volatility is modeled.">

type YieldCurve extends PricingStructure: <"A generic yield curve object, which can be valued in a variety of ways.">

	yieldCurveCharacteristicsModel YieldCurveCharacteristicsModel (0..1)

type YieldCurveValuation extends PricingStructureValuation: <"The values of a yield curve, including possibly inputs and outputs (dfs, forwards, zero rates).">

	^inputs QuotedAssetSet (0..1)
	zeroCurve ZeroRateCurve (0..1) <"A curve of zero rates.">
	forwardCurve ForwardRateCurve (0..*) <"A curve of forward rates.">
	discountFactorCurve TermCurve (0..1) <"A curve of discount factors.">

type Signature extends SignatureType:
	[rootType]

type SignatureValue extends SignatureValueType:
	[rootType]

type SignedInfo extends SignedInfoType:
	[rootType]

type CanonicalizationMethod extends CanonicalizationMethodType:
	[rootType]

type SignatureMethod extends SignatureMethodType:
	[rootType]

type ReferenceElement extends ReferenceType:
	[rootType]

type Transforms extends TransformsType:
	[rootType]

type Transform extends TransformType:
	[rootType]

type DigestMethod extends DigestMethodType:
	[rootType]

type DigestValue:
	[rootType]

	value DigestValueType (1..1)

type KeyInfo extends KeyInfoType:
	[rootType]

type KeyName:
	[rootType]

	value string (1..1)

type MgmtData:
	[rootType]

	value string (1..1)

type KeyValue extends KeyValueType:
	[rootType]

type RetrievalMethod extends RetrievalMethodType:
	[rootType]

type X509Data extends X509DataType:
	[rootType]

type PGPData extends PGPDataType:
	[rootType]

type SPKIData extends SPKIDataType:
	[rootType]

type _Object extends ObjectType:
	[rootType]

type Manifest extends ManifestType:
	[rootType]

type SignatureProperties extends SignaturePropertiesType:
	[rootType]

type SignatureProperty extends SignaturePropertyType:
	[rootType]

type DSAKeyValue extends DSAKeyValueType:
	[rootType]

type RSAKeyValue extends RSAKeyValueType:
	[rootType]

type InstrumentTradeDetails extends Product: <"A type to hold trades of multiply-traded instruments such as securities (e.g., stocks or bonds) or listed derivatives. Typically this will be used to represent the trade resulting from a physically-settled OTC product where the underlying is a security, for example the exercise of a physically-settled option. The economics of a trade of a multiply traded instrument.">

	buyerSellerModel BuyerSellerModel (1..1)
	underlyingAsset Asset (1..1)
	quantity InstrumentTradeQuantity (0..1) <"A description of how much of the instrument was traded.">
	pricing InstrumentTradePricing (0..1) <"The price paid for the instrument.">
	principal InstrumentTradePrincipal (0..1) <"The value, in instrument currency, of the amount of the instrument that was traded.">

type Strategy extends Product: <"A strategy product. A type defining a group of products making up a single trade.">

	strategyComponentIdentifier StrategyComponentIdentification (0..*) <"Provides distinct identification for a component of a strategy.">
	premiumProductReference ProductReference (0..1) <"Indicates which product within a strategy represents the premium payment.">
	product Product (1..*)

type Market: <"This is a global element used for creating global types. It holds Market information, e.g. curves, surfaces, quotes, etc. A collection of pricing inputs.">
	[rootType]

	name String (0..1) <"The name of the market, e.g. the USDLIBOR market. Used for description and understandability.">
	benchmarkQuotes QuotedAssetSet (0..1) <"A collection of benchmark instruments and quotes used as inputs to the pricing models.">
	pricingStructure PricingStructure (0..*)
	pricingStructureValuation PricingStructureValuation (0..*)
	benchmarkPricingMethod PricingMethod (0..*) <"The pricing structure used to quote a benchmark instrument.">
	id string (0..1)

type GenericCommodityDeliveryPeriod:

	applicableDay DayOfWeekExtEnum (1..7) <"Specifies the Applicable Day with respect to a range of Settlement Periods.">
	genericCommodityDeliveryPeriodSequence GenericCommodityDeliveryPeriodSequence (0..1)

type GenericCommodityDeliveryPeriodSequence:

	startTime OffsetPrevailingTime (1..1) <"Specifies the hour-ending Start Time with respect to a range of Settlement Periods.">
	endTime OffsetPrevailingTime (1..1) <"Specifies the hour-ending End Time with respect to a range of Settlement Periods. If neither startTime nor endTime contain an offset element and endTime is earlier than startTime, this indicates that the time period \"wraps around\" midnight. For example, if startTime is 23:00 and endTime is 01:00 then Settlement Periods apply from 00:00 to 01:00 and 23:00 to 00:00 on each included day.">

type GenericCommodityGrade: <"A flexible description of the type or characteristics of a commodity grade">

	value Scheme (1..1)
	commodityGradeScheme NonEmptyURI (0..1) <"The type scheme used with this commodity grade.">

type GenericExerciseStyle: <"The data type used to hold the exercise style description of an option in a generic product (e.g. American, European, Bermudan).">

	value Scheme (1..1)
	exerciseStyleScheme NonEmptyURI (0..1) <"The value scheme used with this property.">

type GenericFrequency extends Frequency:

	payerPartyReference PartyReference (0..1)
	underlyerReference UnderlyerReference (0..1)

	condition Choice:
		optional choice payerPartyReference, underlyerReference

type GenericProductExchangeRate: <"A type that is used for describing the exchange rate for a particular transaction.">

	quotedCurrencyPair GenericProductQuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	rate PositiveDecimal (1..1) <"The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.">
	genericProductExchangeRateSequence GenericProductExchangeRateSequence (0..1)
	crossRate CrossRate (0..*) <"An optional element that allow for definition of the currency exchange rates used to cross between the traded currencies for non-base currency FX contracts.">

type GenericProductExchangeRateSequence:

	spotRate PositiveDecimal (1..1) <"An element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move \"up\" or \"down\" to be triggered.">
	genericProductExchangeRateSequenceSequence GenericProductExchangeRateSequenceSequence (0..1)

type GenericProductExchangeRateSequenceSequence:

	forwardPoints number (1..1) <"An optional element used for deals consumated in the FX Forwards market. Forward points represent the interest rate differential between the two currencies traded and are quoted as a preminum or a discount. Forward points are added to, or subtracted from, the spot rate to create the rate of the forward trade.">
	pointValue PointValue (0..1) <"An optional element that documents the size of point (pip) in which a rate was quoted (or in this case, forwardPoints are calculated). Point (pip) size varies by currency pair: major currencies are all traded in points of 0.0001, with the exception of JPY which has a point size of 0.01.">

type GenericProductFeature: <"A flexible description a special feature or characteristic of a complex product not otherwise modeled, such as digital payout.">

	value Scheme (1..1)
	featureScheme NonEmptyURI (0..1) <"A feature included as part of this product.">

type GenericProductQuotedCurrencyPair: <"A type that describes the composition of a rate that has been quoted or is to be quoted. This includes the two currencies and the quotation relationship between the two currencies and is used as a building block throughout the FX specification.">

	currency1 Currency (1..1) <"The first currency specified when a pair of currencies is to be evaluated.">
	currency2 Currency (1..1) <"The second currency specified when a pair of currencies is to be evaluated.">
	quoteBasis QuoteBasisEnum (1..1) <"The method by which the exchange rate is quoted.">

type GenericOptionStrike extends EquityStrike:

	units NormalizedString (1..1) <"The units in which an amount (not monetary) is denominated.">

type GenericResetFrequency extends Frequency:

	underlyerReference UnderlyerReference (1..1)

type OptionType: <"The type of option transaction (e.g. Call, Put); specifies whether the option allows the holder to buy or sell the underlying asset, or pay or receive a payment related to the price of underlying asset, in the event of exercise.">

	value Scheme (1..1)
	optionTypeScheme NonEmptyURI (0..1) <"The type scheme used with this option type.">

type TradeUnderlyer2: <"The underlying asset/index/reference price etc. whose rate/price may be observed to compute the value of the cashflow. It can be an index, fixed rate, listed security, quoted currency pair, or a reference entity (for credit derivatives). For use with Generic products in Transparency reporting. Generic products define a product that represents an OTC derivative transaction whose economics are not fully described using an FpML schema. In other views, generic products are present for convenience to support internal messaging and workflows that are cross-product. Generic products are not full trade representations as such they are not intended to be used for confirming trades.">

	floatingRate FloatingRate (0..1) <"A floating rate.">
	fixedRate Schedule (0..1) <"The fixed rate or fixed rate schedule expressed as explicit fixed rates and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">
	exchangeRate GenericProductExchangeRate (0..1) <"The rate of exchange between two currencies.">
	underlyingAsset Asset (0..1)
	quotedCurrencyPair QuotedCurrencyPair (0..1) <"Describes the composition of a rate that has been quoted. This includes the two currencies and the quotation relationship between the two currencies.">
	referenceEntity LegalEntity (0..1) <"The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity">
	indexReferenceInformation IndexReferenceInformation (0..1) <"This element contains all the terms relevant to defining the Credit DefaultSwap Index.">
	averagingMethod AveragingMethodEnum (0..1) <"The parties may specify a Method of Averaging where more than one pricing Dates is being specified as being applicable. This defines the averaging method applicable to this asset (used for Commodities).">
	payerReceiverModel PayerReceiverModel (0..1)
	buyerSellerModel BuyerSellerModel (0..1)
	dayCountFraction DayCountFraction (0..1) <"Specifies a day count fraction or fractions that apply to this underlyer; this is provided to meet regulatory reporting requirements, but is not sufficient to to fully represent the economics of the trade..">
	id string (0..1)

	condition Choice0:
		required choice floatingRate, fixedRate , exchangeRate , underlyingAsset , quotedCurrencyPair , referenceEntity , indexReferenceInformation

	condition Choice1:
		optional choice payerReceiverModel, buyerSellerModel

type UnderlyerReference extends Reference: <"Reference to an underlyer">

type GenericCommodityAttributesModel:

	grade GenericCommodityGrade (0..*) <"The grade(s) of material which can be delivered in seller\'s option.">
	settlementPeriods GenericCommodityDeliveryPeriod (0..*) <"Specifies the delivery time periods (normally used for electricity swaps).">
	loadType LoadTypeEnum (0..1) <"LoadType is a summary of the full description of the settlement periods with respect to the region. Used for describing Electricity delivery schedules (e.g. Base, Peak, Off-Peak, Custom).">
	quantity number (0..1) <"The periodic quantity. Used in conjunction with the quantityFrequency to define quantity per period.">
	quantityFrequency CommodityQuantityFrequency (0..1) <"The frequency at which the Notional Quantity is deemed to apply for purposes of calculating the Total Notional Quantity.">
	fixedPrice FixedPrice (0..1) <"Fixed price on which fixed payments are based.">
	interconnectionPoint InterconnectionPoint (0..1) <"Identification of the border(s) or border point(s) of a transportation contract.">

type GenericEquityAttributesModel:

	optionEntitlement PositiveDecimal (1..1) <"The number of units of underlyer per option comprised in the option transaction.">
	numberOfOptions PositiveDecimal (0..1) <"The number of options comprised in the option transaction.">

type GenericOptionAttributesModel:

	optionType OptionType (0..1) <"For options, what type of option it is (e.g. butterfly).">
	commencementDate AdjustableDate2 (0..1) <"For options, the earliest exercise date of the option. (For CFTC Part 43, this element corresponds to the option lock-out period defined in the option field table).">
	exerciseStyle GenericExerciseStyle (0..1) <"For options, whether the option is a put or call option.">
	strike GenericOptionStrike (0..*) <"The option strike or strikes.">
	feature GenericProductFeature (0..*) <"Special features that the option may have, such as Asian averaging, Barriers, Digital payout, etc.">

type BondReference: <"A type including a reference to a bond to support the representation of an asset swap or Condition Precedent Bond.">

	bond Bond (1..1)
	conditionPrecedentBond boolean (1..1) <"To indicate whether the Condition Precedent Bond is applicable. The swap contract is only valid if the bond is issued and if there is any dispute over the terms of fixed stream then the bond terms would be used.">
	discrepancyClause boolean (0..1) <"To indicate whether the Discrepancy Clause is applicable.">

type Calculation: <"A type definining the parameters used in the calculation of fixed or floating calculation period amounts.">

	notionalSchedule Notional (0..1) <"The notional amount or notional amount schedule.">
	fxLinkedNotionalSchedule FxLinkedNotionalSchedule (0..1) <"A notional amount schedule where each notional that applied to a calculation period is calculated with reference to a notional amount or notional amount schedule in a different currency by means of a spot currency exchange rate which is normally observed at the beginning of each period.">
	calculationSequence CalculationSequence (0..1)
	rateCalculation Rate (0..1)
	dayCountFraction DayCountFraction (1..1) <"The day count fraction.">
	discounting Discounting (0..1) <"The parameters specifying any discounting conventions that may apply. This element must only be included if discounting applies.">
	compoundingMethod CompoundingMethodEnum (0..1) <"If more that one calculation period contributes to a single payment amount this element specifies whether compounding is applicable, and if so, what compounding method is to be used. This element must only be included when more that one calculation period contributes to a single payment amount.">

	condition Choice0:
		required choice notionalSchedule, fxLinkedNotionalSchedule

	condition Choice1:
		required choice calculationSequence, rateCalculation

type CalculationSequence:

	fixedRateSchedule Schedule (1..1) <"The fixed rate or fixed rate schedule expressed as explicit fixed rates and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">
	futureValueNotional FutureValueAmount (0..1) <"The future value notional is normally only required for BRL CDI Swaps. The value is calculated as follows: Future Value Notional = Notional Amount * (1 + Fixed Rate) ^ (Fixed Rate Day Count Fraction). The currency should always match that expressed in the notional schedule. The value date should match the adjusted termination date.">

type CalculationPeriod: <"A type defining the parameters used in the calculation of a fixed or floating rate calculation period amount. This type forms part of cashflows representation of a swap stream.">

	unadjustedStartDate date (0..1)
	unadjustedEndDate date (0..1)
	adjustedStartDate date (0..1) <"The calculation period start date, adjusted according to any relevant business day convention.">
	adjustedEndDate date (0..1) <"The calculation period end date, adjusted according to any relevant business day convention.">
	calculationPeriodNumberOfDays int(min: 1) (0..1) <"The number of days from the adjusted effective / start date to the adjusted termination / end date calculated in accordance with the applicable day count fraction.">
	notionalAmount number (0..1) <"The amount that a cashflow will accrue interest on.">
	fxLinkedNotionalAmount FxLinkedNotionalAmount (0..1) <"The amount that a cashflow will accrue interest on. This is the calculated amount of the fx linked - ie the other currency notional amount multiplied by the appropriate fx spot rate.">
	floatingRateDefinition FloatingRateDefinition (0..1) <"The floating rate reset information for the calculation period.">
	fixedRate number (0..1) <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">
	dayCountYearFraction number (0..1) <"The year fraction value of the calculation period, result of applying the ISDA rules for day count fraction defined in the ISDA Annex.">
	forecastAmount Money (0..1) <"The amount representing the forecast of the accrued value of the calculation period. An intermediate value used to generate the forecastPaymentAmount in the PaymentCalculationPeriod.">
	forecastRate number (0..1) <"A value representing the forecast rate used to calculate the forecast future value of the accrual period. This is a calculated rate determined based on averaging the rates in the rateObservation elements, and incorporates all of the rate treatment and averaging rules. A value of 1% should be represented as 0.01">
	id string (0..1)

	condition Choice0:
		required choice notionalAmount, fxLinkedNotionalAmount

	condition Choice1:
		required choice floatingRateDefinition, fixedRate

type CalculationPeriodAmount: <"A type defining the parameters used in the calculation of fixed or floating rate calculation period amounts or for specifying a known calculation period amount or known amount schedule.">

	calculation Calculation (0..1) <"The parameters used in the calculation of fixed or floaring rate calculation period amounts.">
	knownAmountSchedule AmountSchedule (0..1) <"The known calculation period amount or a known amount schedule expressed as explicit known amounts and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">

	condition Choice:
		one-of

type CalculationPeriodDates: <"A type defining the parameters used to generate the calculation period dates schedule, including the specification of any initial or final stub calculation periods. A calculation perod schedule consists of an optional initial stub calculation period, one or more regular calculation periods and an optional final stub calculation period. In the absence of any initial or final stub calculation periods, the regular part of the calculation period schedule is assumed to be between the effective date and the termination date. No implicit stubs are allowed, i.e. stubs must be explicitly specified using an appropriate combination of firstPeriodStateDate, firstRegularPeriodStartDate and lastRegularPeriodEndDate.">

	effectiveDate AdjustableDate (0..1) <"The first day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention.">
	relativeEffectiveDate AdjustedRelativeDateOffset (0..1) <"Defines the effective date.">
	terminationDate AdjustableDate (0..1) <"The last day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention.">
	relativeTerminationDate RelativeDateOffset (0..1) <"The term/maturity of the swap, express as a tenor (typically in years).">
	calculationPeriodDatesAdjustments BusinessDayAdjustments (1..1) <"The business day convention to apply to each calculation period end date if it would otherwise fall on a day that is not a business day in the specified financial business centers.">
	firstPeriodStartDate AdjustableDate (0..1) <"The start date of the calculation period if the date falls before the effective date. It must only be specified if it is not equal to the effective date. This date may be subject to adjustment in accordance with a business day convention.">
	firstRegularPeriodStartDate date (0..1) <"The start date of the regular part of the calculation period schedule. It must only be specified if there is an initial stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">
	firstCompoundingPeriodEndDate date (0..1) <"The end date of the initial compounding period when compounding is applicable. It must only be specified when the compoundingMethod element is present and not equal to a value of None. This date may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">
	lastRegularPeriodEndDate date (0..1) <"The end date of the regular part of the calculation period schedule. It must only be specified if there is a final stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">
	stubPeriodType StubPeriodTypeEnum (0..1) <"Method to allocate any irregular period remaining after regular periods have been allocated between the effective and termination date.">
	calculationPeriodFrequency CalculationPeriodFrequency (1..1) <"The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.">
	id string (1..1)

	condition Choice0:
		required choice effectiveDate, relativeEffectiveDate

	condition Choice1:
		required choice terminationDate, relativeTerminationDate

type CalculationPeriodDatesReference extends Reference: <"Reference to a calculation period dates component.">

	href string (1..1)

type CancelableProvision: <"A type defining the right of a party to cancel a swap transaction on the specified exercise dates. The provision is for \'walkaway\' cancellation (i.e. the fair value of the swap is not paid). A fee payable on exercise can be specified.">

	buyerSellerModel BuyerSellerModel (1..1)
	exercise Exercise (1..1)
	exerciseNotice ExerciseNotice (0..1) <"Definition of the party to whom notice of exercise should be given.">
	followUpConfirmation boolean (1..1) <"A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.">
	cancelableProvisionAdjustedDates CancelableProvisionAdjustedDates (0..1) <"The adjusted dates associated with a cancelable provision. These dates have been adjusted for any applicable business day convention.">
	finalCalculationPeriodDateAdjustment FinalCalculationPeriodDateAdjustment (0..*) <"Business date convention adjustment to final payment period per leg (swapStream) upon exercise event. The adjustments can be made in-line with leg level BDC\'s or they can be specified seperately.">
	initialFee SimplePayment (0..1) <"An initial fee for the cancelable option.">

type CancelableProvisionAdjustedDates: <"A type to define the adjusted dates for a cancelable provision on a swap transaction.">

	cancellationEvent CancellationEvent (1..*) <"The adjusted dates for an individual cancellation date.">

type CancellationEvent: <"The adjusted dates for a specific cancellation date, including the adjusted exercise date and adjusted termination date.">

	adjustedExerciseDate date (1..1) <"The date on which option exercise takes place. This date should already be adjusted for any applicable business day convention.">
	adjustedEarlyTerminationDate date (1..1) <"The early termination date that is applicable if an early termination provision is exercised. This date should already be adjusted for any applicable business day convention.">
	id string (0..1)

type Cashflows: <"A type defining the cashflow representation of a swap trade.">

	cashflowsMatchParameters boolean (1..1) <"A true/false flag to indicate whether the cashflows match the parametric definition of the stream, i.e. whether the cashflows could be regenerated from the parameters without loss of information.">
	principalExchange PrincipalExchange (0..*) <"The initial, intermediate and final principal exchange amounts. Typically required on cross currency interest rate swaps where actual exchanges of principal occur. A list of principal exchange elements may be ordered in the document by ascending adjusted principal exchange date. An FpML document containing an unordered principal exchange list is still regarded as a conformant document.">
	paymentCalculationPeriod PaymentCalculationPeriod (0..*) <"The adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. A list of payment calculation period elements may be ordered in the document by ascending adjusted payment date. An FpML document containing an unordered list of payment calculation periods is still regarded as a conformant document.">

type CashPriceMethod: <"A type defining the parameters necessary for each of the ISDA cash price methods for cash settlement.">

	cashSettlementReferenceBanks CashSettlementReferenceBanks (0..1) <"A container for a set of reference institutions. These reference institutions may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.">
	cashSettlementCurrency Currency (1..1) <"The currency in which the cash settlement amount will be calculated and settled.">
	quotationRateType QuotationRateTypeEnum (1..1) <"Which rate quote is to be observed, either Bid, Mid, Offer or Exercising Party Pays. The meaning of Exercising Party Pays is defined in the 2000 ISDA Definitions, Section 17.2. Certain Definitions Relating to Cash Settlement, paragraph (j)">

type CashSettlement: <"A type to define the cash settlement terms for a product where cash settlement is applicable.">

	cashSettlementValuationTime BusinessCenterTime (0..1) <"The time of the cash settlement valuation date when the cash settlement amount will be determined according to the cash settlement method if the parties have not otherwise been able to agree the cash settlement amount.">
	cashSettlementValuationDate RelativeDateOffset (0..1) <"The date on which the cash settlement amount will be determined according to the cash settlement method if the parties have not otherwise been able to agree the cash settlement amount.">
	cashSettlementPaymentDate CashSettlementPaymentDate (0..1) <"The date on which the cash settlement amount will be paid, subject to adjustment in accordance with any applicable business day convention. This component would not be present for a mandatory early termination provision where the cash settlement payment date is the mandatory early termination date.">
	cashPriceMethod CashPriceMethod (0..1) <"An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (a).">
	cashPriceAlternateMethod CashPriceMethod (0..1) <"An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (b).">
	parYieldCurveAdjustedMethod YieldCurveMethod (0..1) <"An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (c).">
	zeroCouponYieldAdjustedMethod YieldCurveMethod (0..1) <"An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (d).">
	parYieldCurveUnadjustedMethod YieldCurveMethod (0..1) <"An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (e).">
	crossCurrencyMethod CrossCurrencyMethod (0..1) <"An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (f) (published in Supplement number 23).">
	collateralizedCashPriceMethod YieldCurveMethod (0..1) <"An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (g) (published in Supplement number 28).">
	id string (0..1)

	condition Choice:
		optional choice cashPriceMethod, cashPriceAlternateMethod , parYieldCurveAdjustedMethod , zeroCouponYieldAdjustedMethod , parYieldCurveUnadjustedMethod , crossCurrencyMethod , collateralizedCashPriceMethod

type CashSettlementPaymentDate: <"A type defining the cash settlement payment date(s) as either a set of explicit dates, together with applicable adjustments, or as a date relative to some other (anchor) date, or as any date in a range of contiguous business days.">

	adjustableDates AdjustableDates (0..1) <"A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">
	relativeDate RelativeDateOffset (0..1) <"A date specified as some offset to another date (the anchor date).">
	businessDateRange BusinessDateRange (0..1) <"A range of contiguous business days.">
	id string (0..1)

	condition Choice:
		required choice adjustableDates, relativeDate , businessDateRange

type CrossCurrencyMethod:

	cashSettlementReferenceBanks CashSettlementReferenceBanks (0..1) <"A container for a set of reference institutions. These reference institutions may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.">
	cashSettlementCurrency Currency (1..2) <"The currency, or currencies, in which the cash settlement amount(s) will be calculated and settled. While the order in which the currencies are stated is unimportant, the cash settlement currency or currencies must correspond to one or both of the constituent currencies of the swap transaction.">
	quotationRateType QuotationRateTypeEnum (1..1) <"Which rate quote is to be observed, either Bid, Mid, Offer or Exercising Party Pays. The meaning of Exercising Party Pays is defined in the 2000 ISDA Definitions, Section 17.2. Certain Definitions Relating to Cash Settlement, paragraph (j)">

type DateRelativeToCalculationPeriodDates: <"A type to provide the ability to point to multiple payment nodes in the document through the unbounded paymentDatesReference.">

	calculationPeriodDatesReference CalculationPeriodDatesReference (1..*) <"A set of href pointers to calculation period dates defined somewhere else in the document.">

type DateRelativeToPaymentDates: <"A type to provide the ability to point to multiple payment nodes in the document through the unbounded paymentDatesReference.">

	paymentDatesReference PaymentDatesReference (1..*) <"A set of href pointers to payment dates defined somewhere else in the document.">

type Discounting: <"A type defining discounting information. The 2000 ISDA definitions, section 8.4. discounting (related to the calculation of a discounted fixed amount or floating amount) apply. This type must only be included if discounting applies.">

	discountingType DiscountingTypeEnum (1..1) <"The discounting method that is applicable.">
	discountRateModel DiscountRateModel (0..1)

type EarlyTerminationEvent: <"A type to define the adjusted dates associated with an early termination provision.">

	adjustedExerciseDate date (1..1) <"The date on which option exercise takes place. This date should already be adjusted for any applicable business day convention.">
	adjustedEarlyTerminationDate date (1..1) <"The early termination date that is applicable if an early termination provision is exercised. This date should already be adjusted for any applicable business day convention.">
	adjustedCashSettlementValuationDate date (1..1) <"The date by which the cash settlement amount must be agreed. This date should already be adjusted for any applicable business day convention.">
	adjustedCashSettlementPaymentDate date (1..1) <"The date on which the cash settlement amount is paid. This date should already be adjusted for any applicable business dat convention.">
	adjustedExerciseFeePaymentDate date (0..1) <"The date on which the exercise fee amount is paid. This date should already be adjusted for any applicable business day convention.">
	id string (0..1)

type EarlyTerminationProvision: <"A type defining an early termination provision for a swap. This early termination is at fair value, i.e. on termination the fair value of the product must be settled between the parties.">

	earlyTerminationProvisionSequence EarlyTerminationProvisionSequence (0..1)
	optionalEarlyTerminationModel OptionalEarlyTerminationModel (0..1)
	id string (0..1)

	condition Choice:
		required choice earlyTerminationProvisionSequence, optionalEarlyTerminationModel

type EarlyTerminationProvisionSequence:

	mandatoryEarlyTerminationModel MandatoryEarlyTerminationModel (1..1)
	optionalEarlyTerminationModel OptionalEarlyTerminationModel (0..1)

type ExerciseEvent: <"A type defining the adjusted dates associated with a particular exercise event.">

	adjustedExerciseDate date (1..1) <"The date on which option exercise takes place. This date should already be adjusted for any applicable business day convention.">
	adjustedRelevantSwapEffectiveDate date (1..1) <"The effective date of the underlying swap associated with a given exercise date. This date should already be adjusted for any applicable business day convention.">
	adjustedCashSettlementValuationDate date (0..1) <"The date by which the cash settlement amount must be agreed. This date should already be adjusted for any applicable business day convention.">
	adjustedCashSettlementPaymentDate date (0..1) <"The date on which the cash settlement amount is paid. This date should already be adjusted for any applicable business dat convention.">
	adjustedExerciseFeePaymentDate date (0..1) <"The date on which the exercise fee amount is paid. This date should already be adjusted for any applicable business day convention.">
	id string (0..1)

type ExercisePeriod: <"This defines the time interval to the start of the exercise period, i.e. the earliest exercise date, and the frequency of subsequent exercise dates (if any).">

	earliestExerciseDateTenor Period (1..1) <"The time interval to the first (and possibly only) exercise date in the exercise period.">
	exerciseFrequency Period (0..1) <"The frequency of subsequent exercise dates in the exercise period following the earliest exercise date. An interval of 1 day should be used to indicate an American style exercise period.">
	id string (0..1)

type ExtendibleProvision: <"A type defining an option to extend an existing swap transaction on the specified exercise dates for a term ending on the specified new termination date.">

	buyerSellerModel BuyerSellerModel (1..1)
	exercise Exercise (1..1)
	exerciseNotice ExerciseNotice (0..1) <"Definition of the party to whom notice of exercise should be given.">
	followUpConfirmation boolean (1..1) <"A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.">
	extendibleProvisionAdjustedDates ExtendibleProvisionAdjustedDates (0..1) <"The adjusted dates associated with an extendible provision. These dates have been adjusted for any applicable business day convention.">

type ExtendibleProvisionAdjustedDates: <"A type defining the adjusted dates associated with a provision to extend a swap.">

	extensionEvent ExtensionEvent (1..*) <"The adjusted dates associated with a single extendible exercise date.">

type ExtensionEvent: <"A type to define the adjusted dates associated with an individual extension event.">

	adjustedExerciseDate date (1..1) <"The date on which option exercise takes place. This date should already be adjusted for any applicable business day convention.">
	adjustedExtendedTerminationDate date (1..1) <"The termination date if an extendible provision is exercised. This date should already be adjusted for any applicable business day convention.">
	id string (0..1)

type FallbackReferencePriceType: <"The method, prioritzed by the order it is listed in this element, to get a replacement rate for the disrupted settlement rate option.">

	valuationPostponement ValuationPostponementType (0..1) <"Specifies how long to wait to get a quote from a settlement rate option upon a price source disruption">
	fallbackSettlementRateOption SettlementRateOption (0..*) <"This settlement rate option will be used in its place.">
	fallbackSurveyValuationPostponenment Empty (0..1) <"Request rate quotes from the market.">
	calculationAgentDetermination CalculationAgent (0..1) <"The calculation agent will decide the rate.">

type FinalCalculationPeriodDateAdjustment: <"A type to define business date convention adjustment to final payment period per leg.">

	relevantUnderlyingDateReference RelevantUnderlyingDateReference (1..1) <"Reference to the unadjusted cancellation effective dates.">
	swapStreamReference InterestRateStreamReference (1..1) <"Reference to the leg, where date adjustments may apply.">
	businessDayConvention BusinessDayConventionEnum (1..1) <"Override business date convention. This takes precedence over leg level information.">

type FloatingRateDefinition: <"A type defining parameters associated with a floating rate reset. This type forms part of the cashflows representation of a stream.">

	calculatedRate number (0..1) <"The final calculated rate for a calculation period after any required averaging of rates A calculated rate of 5% would be represented as 0.05.">
	rateObservation RateObservation (0..*) <"The details of a particular rate observation, including the fixing date and observed rate. A list of rate observation elements may be ordered in the document by ascending adjusted fixing date. An FpML document containing an unordered list of rate observations is still regarded as a conformant document.">
	floatingRateMultiplier number (0..1) <"A rate multiplier to apply to the floating rate. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one).">
	spread number (0..1) <"The ISDA Spread, if any, which applies for the calculation period. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">
	capRate Strike (0..*) <"The cap rate, if any, which applies to the floating rate for the calculation period. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain strike level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.">
	floorRate Strike (0..*) <"The floor rate, if any, which applies to the floating rate for the calculation period. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. The floor rate of 5% would be represented as 0.05.">

type FxFixingDate extends Offset: <"A type that is extending the Offset structure for providing the ability to specify an FX fixing date as an offset to dates specified somewhere else in the document.">

	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)
	dateRelativeToPaymentDates DateRelativeToPaymentDates (0..1) <"The payment date references on which settlements in non-deliverable currency are due and will then have to be converted according to the terms specified through the other parts of the nonDeliverableSettlement structure.">
	dateRelativeToCalculationPeriodDates DateRelativeToCalculationPeriodDates (0..1) <"The calculation period references on which settlements in non-deliverable currency are due and will then have to be converted according to the terms specified through the other parts of the nonDeliverableSettlement structure. Implemented for Brazilian-CDI swaps where it will refer to the termination date of the appropriate leg.">

	condition Choice:
		required choice dateRelativeToPaymentDates, dateRelativeToCalculationPeriodDates

type FxLinkedNotionalAmount: <"A type to describe the cashflow representation for fx linked notionals.">

	resetDate date (0..1)
	adjustedFxSpotFixingDate date (0..1) <"The date on which the fx spot rate is observed. This date should already be adjusted for any applicable business day convention.">
	observedFxSpotRate number (0..1) <"The actual observed fx spot rate.">
	notionalAmount number (0..1) <"The calculation period notional amount.">

type FxLinkedNotionalSchedule: <"A type to describe a notional schedule where each notional that applies to a calculation period is calculated with reference to a notional amount or notional amount schedule in a different currency by means of a spot currency exchange rate which is normally observed at the beginning of each period.">

	constantNotionalScheduleReference NotionalReference (1..1) <"A pointer style reference to the associated constant notional schedule defined elsewhere in the document which contains the currency amounts which will be converted into the varying notional currency amounts using the spot currency exchange rate.">
	initialValue number (0..1) <"The initial currency amount for the varying notional. This may be omitted for a forward starting swap if the FX-linked notional value is not known at deal inception.">
	varyingNotionalCurrency Currency (1..1) <"The currency of the varying notional amount, i.e. the notional amount being determined periodically based on observation of a spot currency exchange rate.">
	varyingNotionalFixingDates RelativeDateOffset (1..1) <"The dates on which spot currency exchange rates are observed for purposes of determining the varying notional currency amount that will apply to a calculation period.">
	fxSpotRateSource FxSpotRateSource (1..1) <"The information source and time at which the spot currency exchange rate will be observed.">
	varyingNotionalInterimExchangePaymentDates RelativeDateOffset (1..1) <"The dates on which interim exchanges of notional are paid. Interim exchanges will arise as a result of changes in the spot currency exchange amount or changes in the constant notional schedule (e.g. amortization).">

type InterestRateStream extends Leg: <"A type defining the components specifiying an interest rate stream, including both a parametric and cashflow representation for the stream of payments.">

	payerReceiverModel PayerReceiverModel (1..1)
	calculationPeriodDates CalculationPeriodDates (1..1) <"The calculation periods dates schedule.">
	paymentDates PaymentDates (1..1) <"The payment dates schedule.">
	resetDates ResetDates (0..1) <"The reset dates schedule. The reset dates schedule only applies for a floating rate stream.">
	calculationPeriodAmount CalculationPeriodAmount (1..1) <"The calculation period amount parameters.">
	stubCalculationPeriodAmount StubCalculationPeriodAmount (0..1) <"The stub calculation period amount parameters. This element must only be included if there is an initial or final stub calculation period. Even then, it must only be included if either the stub references a different floating rate tenor to the regular calculation periods, or if the stub is calculated as a linear interpolation of two different floating rate tenors, or if a specific stub rate or stub amount has been negotiated.">
	principalExchanges PrincipalExchanges (0..1) <"The true/false flags indicating whether initial, intermediate or final exchanges of principal should occur.">
	cashflows Cashflows (0..1) <"The cashflows representation of the swap stream.">
	settlementProvision SettlementProvision (0..1) <"A provision that allows the specification of settlement terms, occuring when the settlement currency is different to the notional currency of the trade.">
	formula Formula (0..1) <"An interest rate derivative formula.">

type InterestRateStreamReference extends Reference: <"Reference to an InterestRateStream component.">

	href string (1..1)

type MandatoryEarlyTermination: <"A type to define an early termination provision for which exercise is mandatory.">

	mandatoryEarlyTerminationDate AdjustableDate (1..1) <"The early termination date associated with a mandatory early termination of a swap.">
	calculationAgent CalculationAgent (1..1) <"The ISDA Calculation Agent responsible for performing duties associated with an optional early termination.">
	cashSettlement CashSettlement (1..1) <"If specified, this means that cash settlement is applicable to the transaction and defines the parameters associated with the cash settlement prodcedure. If not specified, then physical settlement is applicable.">
	mandatoryEarlyTerminationAdjustedDates MandatoryEarlyTerminationAdjustedDates (0..1) <"The adjusted dates associated with a mandatory early termination provision. These dates have been adjusted for any applicable business day convention.">
	id string (0..1)

type MandatoryEarlyTerminationAdjustedDates: <"A type defining the adjusted dates associated with a mandatory early termination provision.">

	adjustedEarlyTerminationDate date (1..1) <"The early termination date that is applicable if an early termination provision is exercised. This date should already be adjusted for any applicable business day convention.">
	adjustedCashSettlementValuationDate date (1..1) <"The date by which the cash settlement amount must be agreed. This date should already be adjusted for any applicable business day convention.">
	adjustedCashSettlementPaymentDate date (1..1) <"The date on which the cash settlement amount is paid. This date should already be adjusted for any applicable business dat convention.">

type NonDeliverableSettlement: <"A type defining the parameters used when the reference currency of the swapStream is non-deliverable.">

	referenceCurrency Currency (1..1) <"The currency in which the swap stream is denominated.">
	fxFixingDate FxFixingDate (0..1) <"The date, when expressed as a relative date, on which the currency rate will be determined for the purpose of specifying the amount in deliverable currency.">
	fxFixingSchedule AdjustableDates (0..1) <"The date, when expressed as a schedule of date(s), on which the currency rate will be determined for the purpose of specifying the amount in deliverable currency.">
	settlementRateOption SettlementRateOption (1..1) <"The rate source for the conversion to the settlement currency. This source is specified through a scheme that reflects the terms of the Annex A to the 1998 FX and Currency Option Definitions.">
	priceSourceDisruption PriceSourceDisruptionType (0..1) <"A type defining the parameters to get a new quote when a settlement rate option is disrupted.">

	condition Choice:
		required choice fxFixingDate, fxFixingSchedule

type Notional: <"An type defining the notional amount or notional amount schedule associated with a swap stream. The notional schedule will be captured explicitly, specifying the dates that the notional changes and the outstanding notional amount that applies from that date. A parametric representation of the rules defining the notional step schedule can optionally be included.">

	notionalStepSchedule NonNegativeAmountSchedule (1..1) <"The notional amount or notional amount schedule expressed as explicit outstanding notional amounts and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">
	notionalStepParameters NotionalStepRule (0..1) <"A parametric representation of the notional step schedule, i.e. parameters used to generate the notional schedule.">
	id string (0..1)

type NotionalStepRule: <"A type defining a parametric representation of the notional step schedule, i.e. parameters used to generate the notional balance on each step date. The step change in notional can be expressed in terms of either a fixed amount or as a percentage of either the initial notional or previous notional amount. This parametric representation is intended to cover the more common amortizing/accreting.">

	calculationPeriodDatesReference CalculationPeriodDatesReference (1..1) <"A pointer style reference to the associated calculation period dates component defined elsewhere in the document.">
	stepFrequency Frequency (1..1) <"The frequency at which the notional step changes occur. This frequency must be an integer multiple of the stream calculation period frequency.">
	firstNotionalStepDate date (1..1) <"Effective date of the first change in notional (i.e. a calculation period start date).">
	lastNotionalStepDate date (1..1) <"Effective date of the last change in notional (i.e. a calculation period start date).">
	notionalStepAmount number (0..1) <"The explicit amount that the notional changes on each step date. This can be a positive or negative amount.">
	notionalStepRuleSequence NotionalStepRuleSequence (0..1)

	condition Choice:
		required choice notionalStepAmount, notionalStepRuleSequence

type NotionalStepRuleSequence:

	notionalStepRate number (1..1) <"The percentage amount by which the notional changes on each step date. The percentage is either a percentage applied to the initial notional amount or the previous outstanding notional, depending on the value of the element stepRelativeTo. The percentage can be either positive or negative. A percentage of 5% would be represented as 0.05.">
	stepRelativeTo StepRelativeToEnum (1..1) <"Specifies whether the notionalStepRate should be applied to the initial notional or the previous notional in order to calculate the notional step change amount.">

type OptionalEarlyTermination: <"A type defining an early termination provision where either or both parties have the right to exercise.">

	singlePartyOption SinglePartyOption (0..1) <"If optional early termination is not available to both parties then this component specifies the buyer and seller of the option.">
	exercise Exercise (1..1)
	exerciseNotice ExerciseNotice (0..*) <"Definition of the party to whom notice of exercise should be given.">
	followUpConfirmation boolean (0..1) <"A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.">
	calculationAgent CalculationAgent (1..1) <"The ISDA Calculation Agent responsible for performing duties associated with an optional early termination.">
	cashSettlement CashSettlement (1..1) <"If specified, this means that cash settlement is applicable to the transaction and defines the parameters associated with the cash settlement prodcedure. If not specified, then physical settlement is applicable.">
	optionalEarlyTerminationAdjustedDates OptionalEarlyTerminationAdjustedDates (0..1) <"An early termination provision to terminate the trade at fair value where one or both parties have the right to decide on termination.">

type OptionalEarlyTerminationAdjustedDates: <"A type defining the adjusted dates associated with an optional early termination provision.">

	earlyTerminationEvent EarlyTerminationEvent (1..*) <"The adjusted dates associated with an individual earley termination date.">

type PaymentCalculationPeriod: <"A type defining the adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. This type forms part of the cashflow representation of a swap stream.">

	unadjustedPaymentDate date (0..1)
	adjustedPaymentDate date (0..1) <"The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component (all dates the Cashflows type are adjusted payment dates).">
	calculationPeriod CalculationPeriod (0..*) <"The parameters used in the calculation of a fixed or floating rate calculation period amount. A list of calculation period elements may be ordered in the document by ascending start date. An FpML document which contains an unordered list of calcularion periods is still regarded as a conformant document.">
	fixedPaymentAmount number (0..1) <"A known fixed payment amount.">
	discountFactor number (0..1) <"A decimal value representing the discount factor used to calculate the present value of cash flow.">
	forecastPaymentAmount Money (0..1) <"A monetary amount representing the forecast of the future value of the payment.">
	presentValueAmount Money (0..1) <"A monetary amount representing the present value of the forecast payment.">
	id string (0..1)
	href string (0..1) <"Attribute that can be used to reference the yield curve used to estimate the discount factor.">

	condition Choice:
		required choice calculationPeriod, fixedPaymentAmount

type PaymentDates: <"A type defining parameters used to generate the payment dates schedule, including the specification of early or delayed payments. Payment dates are determined relative to the calculation period dates or the reset dates.">

	calculationPeriodDatesReference CalculationPeriodDatesReference (0..1) <"A pointer style reference to the associated calculation period dates component defined elsewhere in the document.">
	resetDatesReference ResetDatesReference (0..1) <"A pointer style reference to the associated reset dates component defined elsewhere in the document.">
	valuationDatesReference ValuationDatesReference (0..1) <"A pointer style reference to the associated valuation dates component defined elsewhere in the document. Implemented for Brazilian-CDI Swaps where it will refer to the settlemementProvision/nonDeliverableSettlement/fxFixingDate structure.">
	paymentFrequency Frequency (1..1) <"The frequency at which regular payment dates occur. If the payment frequency is equal to the frequency defined in the calculation period dates component then one calculation period contributes to each payment amount. If the payment frequency is less frequent than the frequency defined in the calculation period dates component then more than one calculation period will contribute to the payment amount. A payment frequency more frequent than the calculation period frequency or one that is not a multiple of the calculation period frequency is invalid. If the payment frequency is of value T (term), the period is defined by the swap\\swapStream\\calculationPerioDates\\effectiveDate and the swap\\swapStream\\calculationPerioDates\\terminationDate.">
	firstPaymentDate date (0..1) <"The first unadjusted payment date. This day may be subject to adjustment in accordance with any business day convention specified in paymentDatesAdjustments. This element must only be included if there is an initial stub. This date will normally correspond to an unadjusted calculation period start or end date. This is true even if early or delayed payment is specified to be applicable since the actual first payment date will be the specified number of days before or after the applicable adjusted calculation period start or end date with the resulting payment date then being adjusted in accordance with any business day convention specified in paymentDatesAdjustments.">
	lastRegularPaymentDate date (0..1) <"The last regular unadjusted payment date. This day may be subject to adjustment in accordance with any business day convention specified in paymentDatesAdjustments. This element must only be included if there is a final stub. All calculation periods after this date contribute to the final payment. The final payment is made relative to the final set of calculation periods or the final reset date as the case may be. This date will normally correspond to an unadjusted calculation period start or end date. This is true even if early or delayed payment is specified to be applicable since the actual last regular payment date will be the specified number of days before or after the applicable adjusted calculation period start or end date with the resulting payment date then being adjusted in accordance with any business day convention specified in paymentDatesAdjustments.">
	payRelativeTo PayRelativeToEnum (1..1) <"Specifies whether the payments occur relative to each adjusted calculation period start date, adjusted calculation period end date or each reset date. The reset date is applicable in the case of certain euro (former French Franc) floating rate indices. Calculation period start date means relative to the start of the first calculation period contributing to a given payment. Similarly, calculation period end date means the end of the last calculation period contributing to a given payment.The valuation date is applicable for Brazilian-CDI swaps.">
	paymentDaysOffset Offset (0..1) <"If early payment or delayed payment is required, specifies the number of days offset that the payment occurs relative to what would otherwise be the unadjusted payment date. The offset can be specified in terms of either calendar or business days. Even in the case of a calendar days offset, the resulting payment date, adjusted for the specified calendar days offset, will still be adjusted in accordance with the specified payment dates adjustments. This element should only be included if early or delayed payment is applicable, i.e. if the periodMultiplier element value is not equal to zero. An early payment would be indicated by a negative periodMultiplier element value and a delayed payment (or payment lag) would be indicated by a positive periodMultiplier element value.">
	paymentDatesAdjustments BusinessDayAdjustments (1..1) <"The business day convention to apply to each payment date if it would otherwise fall on a day that is not a business day in the specified financial business centers.">
	id string (0..1)

	condition Choice:
		required choice calculationPeriodDatesReference, resetDatesReference , valuationDatesReference

type PaymentDatesReference extends Reference: <"Reference to a payment dates structure.">

	href string (1..1)

type PriceSourceDisruptionType: <"A type defining the parameters used to get a price quote to replace the settlement rate option that is disrupted.">

	fallbackReferencePrice FallbackReferencePriceType (1..1) <"The method, prioritzed by the order it is listed in this element, to get a replacement rate for the disrupted settlement rate option.">

type PrincipalExchange: <"A type defining a principal exchange amount and adjusted exchange date. The type forms part of the cashflow representation of a swap stream.">

	unadjustedPrincipalExchangeDate date (0..1)
	adjustedPrincipalExchangeDate date (0..1) <"The principal exchange date. This date should already be adjusted for any applicable business day convention.">
	principalExchangeAmount number (0..1) <"The principal exchange amount. This amount should be positive if the stream payer is paying the exchange amount and signed negative if they are receiving it.">
	discountFactor number (0..1) <"The value representing the discount factor used to calculate the present value of the principal exchange amount.">
	presentValuePrincipalExchangeAmount Money (0..1) <"The amount representing the present value of the principal exchange.">
	id string (0..1)

type RelevantUnderlyingDateReference extends Reference: <"Reference to relevant underlying date.">

	href string (1..1)

type ResetDates: <"A type defining the parameters used to generate the reset dates schedule and associated fixing dates. The reset dates are determined relative to the calculation periods schedules dates.">

	calculationPeriodDatesReference CalculationPeriodDatesReference (1..1) <"A pointer style reference to the associated calculation period dates component defined elsewhere in the document.">
	resetRelativeTo ResetRelativeToEnum (0..1) <"Specifies whether the reset dates are determined with respect to each adjusted calculation period start date or adjusted calculation period end date. If the reset frequency is specified as daily this element must not be included.">
	initialFixingDate RelativeDateOffset (0..1)
	fixingDates RelativeDateOffset (1..1) <"Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA\'s Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction. The href attribute on the dateRelativeTo element should reference the id attribute on the resetDates element.">
	rateCutOffDaysOffset Offset (0..1) <"Specifies the number of business days before the period end date when the rate cut-off date is assumed to apply. The financial business centers associated with determining the rate cut-off date are those specified in the reset dates adjustments. The rate cut-off number of days must be a negative integer (a value of zero would imply no rate cut off applies in which case the rateCutOffDaysOffset element should not be included). The relevant rate for each reset date in the period from, and including, a rate cut-off date to, but excluding, the next applicable period end date (or, in the case of the last calculation period, the termination date) will (solely for purposes of calculating the floating amount payable on the next applicable payment date) be deemed to be the relevant rate in effect on that rate cut-off date. For example, if rate cut-off days for a daily averaging deal is -2 business days, then the refix rate applied on (period end date - 2 days) will also be applied as the reset on (period end date - 1 day), i.e. the actual number of reset dates remains the same but from the rate cut-off date until the period end date, the same refix rate is applied. Note that in the case of several calculation periods contributing to a single payment, the rate cut-off is assumed only to apply to the final calculation period contributing to that payment. The day type associated with the offset must imply a business days offset.">
	resetFrequency ResetFrequency (1..1) <"The frequency at which reset dates occur. In the case of a weekly reset frequency, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency then this implies that more than one reset date is established for each calculation period and some form of rate averaging is applicable.">
	resetDatesAdjustments BusinessDayAdjustments (1..1) <"The business day convention to apply to each reset date if it would otherwise fall on a day that is not a business day in the specified financial business centers.">
	id string (1..1)

type ResetDatesReference extends Reference: <"Reference to a reset dates component.">

	href string (1..1)

type SettlementProvision: <"A type defining the specification of settlement terms, occuring when the settlement currency is different to the notional currency of the trade.">

	settlementCurrency Currency (1..1) <"The currency that stream settles in (to support swaps that settle in a currency different from the notional currency).">
	nonDeliverableSettlement NonDeliverableSettlement (0..1) <"The specification of the non-deliverable settlement provision.">

type SinglePartyOption: <"A type describing the buyer and seller of an option.">

	buyerSellerModel BuyerSellerModel (1..1)

type StubCalculationPeriodAmount: <"A type defining how the initial or final stub calculation period amounts is calculated. For example, the rate to be applied to the initial or final stub calculation period may be the linear interpolation of two different tenors for the floating rate index specified in the calculation period amount component, e.g. A two month stub period may used the linear interpolation of a one month and three month floating rate. The different rate tenors would be specified in this component. Note that a maximum of two rate tenors can be specified. If a stub period uses a single index tenor and this is the same as that specified in the calculation period amount component then the initial stub or final stub component, as the case may be, must not be included.">

	calculationPeriodDatesReference CalculationPeriodDatesReference (1..1) <"A pointer style reference to the associated calculation period dates component defined elsewhere in the document.">
	stubCalculationPeriodAmountSequence StubCalculationPeriodAmountSequence (0..1)
	finalStub StubValue (0..1) <"Specifies how the final stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.">

	condition Choice:
		required choice stubCalculationPeriodAmountSequence, finalStub

type StubCalculationPeriodAmountSequence:

	initialStub StubValue (1..1) <"Specifies how the initial stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.">
	finalStub StubValue (0..1) <"Specifies how the final stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.">

type SwapAdditionalTerms: <"Additional terms to a swap contract.">

	bondReference BondReference (0..1) <"Reference to a bond underlyer to represent an asset swap or Condition Precedent Bond.">

type SwaptionAdjustedDates: <"A type describing the adjusted dates associated with swaption exercise and settlement.">

	exerciseEvent ExerciseEvent (1..*) <"The adjusted dates associated with an individual swaption exercise date.">

type ValuationDatesReference extends Reference: <"Reference to a Valuation dates node.">

	href string (1..1)

type ValuationPostponementType: <"Specifies how long to wait to get a quote from a settlement rate option upon a price source disruption.">

	maximumDaysOfPostponement int(min: 1) (1..1) <"The maximum number of days to wait for a quote from the disrupted settlement rate option before proceding to the next method.">

type YieldCurveMethod: <"A type defining the parameters required for each of the ISDA defined yield curve methods for cash settlement.">

	settlementRateSource SettlementRateSource (0..1) <"The method for obtaining a settlement rate. This may be from some information source (e.g. Reuters) or from a set of reference banks.">
	quotationRateType QuotationRateTypeEnum (1..1) <"Which rate quote is to be observed, either Bid, Mid, Offer or Exercising Party Pays. The meaning of Exercising Party Pays is defined in the 2000 ISDA Definitions, Section 17.2. Certain Definitions Relating to Cash Settlement, paragraph (j)">

type DiscountRateModel: <"Model group enforces association of day count fraction with the discount rate.">

	discountRate number (1..1) <"A discount rate, expressed as a decimal, to be used in the calculation of a discounted amount. A discount amount of 5% would be represented as 0.05.">
	discountRateDayCountFraction DayCountFraction (0..1) <"A discount day count fraction to be used in the calculation of a discounted amount.">

type MandatoryEarlyTerminationModel:

	mandatoryEarlyTermination MandatoryEarlyTermination (0..1) <"A mandatory early termination provision to terminate the swap at fair value.">
	mandatoryEarlyTerminationModelSequence MandatoryEarlyTerminationModelSequence (0..1)

	condition Choice:
		one-of

type MandatoryEarlyTerminationModelSequence:

	mandatoryEarlyTerminationDateTenor Period (1..1) <"Period after trade date of the mandatory early termination date.">
	mandatoryEarlyTermination MandatoryEarlyTermination (0..1) <"A mandatory early termination provision to terminate the swap at fair value.">

type OptionalEarlyTerminationModel:

	optionalEarlyTermination OptionalEarlyTermination (0..1) <"An option for either or both parties to terminate the swap at fair value.">
	optionalEarlyTerminationModelSequence OptionalEarlyTerminationModelSequence (0..1)

	condition Choice:
		one-of

type OptionalEarlyTerminationModelSequence:

	optionalEarlyTerminationParameters ExercisePeriod (1..1) <"Definition of the first early termination date and the frequency of the termination dates subsequent to that. American exercise is defined by having a frequency of one day.">
	optionalEarlyTermination OptionalEarlyTermination (0..1) <"An option for either or both parties to terminate the swap at fair value.">

type CrossRate extends QuotedCurrencyPair: <"A type that is used for including the currency exchange rates used to cross between the traded currencies for non-base currency FX contracts.">

	rate PositiveDecimal (1..1) <"The exchange rate used to cross between the traded currencies.">
	crossRateSequence CrossRateSequence (0..1)

type CrossRateSequence:

	spotRate PositiveDecimal (1..1) <"An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair.">
	forwardPoints number (0..1) <"An optional element used for deals consumated in the FX Forwards market. Forward points represent the interest rate differential between the two currencies traded and are quoted as a preminum or a discount. Forward points are added to, or subtracted from, the spot rate to create the rate of the forward trade.">

type CutName: <"Allows for an option expiry cut time to be described by name, as per established market convention. Note: the FX Working Group has resolved not to extend the cutNameScheme coding scheme. The expiryTime element should be used in preference to cutName as the formal definition of FX option expiry time.">

	value Scheme (1..1)
	cutNameScheme NonEmptyURI (0..1)

type DualCurrencyFeature: <"Describes the parameters for a dual currency option transaction.">

	currency Currency (1..1) <"The Alternate currency i.e. the currency in which the deposit will be redeemed in the event that the spot rate fixes below the strike rate at the specified fixing date and time.">
	fixingDate date (1..1) <"The date on which the fx spot rate is compared against the strike rate, in order to determine the delivery currency. This is the expiry date of a put option on the Deposit/Alternate currency couple. Also known as \"valuation date\" or \"reference date\".">
	fixingTime BusinessCenterTime (0..1) <"The time at which the fx spot rate observation is made i.e. the option cut off time on the expiry date. Also known as \"valuation time\".">
	strike DualCurrencyStrikePrice (1..1) <"The rate at which the deposit will be converted to the Alternate currency, in the event that the spot rate is strictly lower than the strike rate at the specified fixing date and time.">
	spotRate number (0..1) <"The spot rate at the time the trade was agreed.">
	interestAtRisk boolean (1..1) <"Specifies whether the interest component of the redemption amount is subject to conversion to the Alternate currency, in the event that the spot rate is strictly lower than the strike rate at the specified fixing date and time.">

type DualCurrencyStrikePrice: <"A type that describes the rate of exchange at which the embedded option in a Dual Currency Deposit has been struck.">

	rate PositiveDecimal (1..1) <"The rate of exchange between the two currencies of the leg of a deal.">
	strikeQuoteBasis DualCurrencyStrikeQuoteBasisEnum (1..1) <"The method by which the strike rate is quoted, in terms of the deposit (principal) and alternate currencies.">

type ExchangeRate: <"A type that is used for describing the exchange rate for a particular transaction.">

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	rate PositiveDecimal (1..1) <"The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.">
	exchangeRateSequence ExchangeRateSequence (0..1)
	crossRate CrossRate (0..*) <"An optional element that allow for definition of the currency exchange rates used to cross between the traded currencies for non-base currency FX contracts.">

type ExchangeRateSequence:

	spotRate PositiveDecimal (1..1) <"An element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the option needs to move \"up\" or \"down\" to be triggered.">
	exchangeRateSequenceSequence ExchangeRateSequenceSequence (0..1)

type ExchangeRateSequenceSequence:

	forwardPoints number (1..1) <"An optional element used for deals consumated in the FX Forwards market. Forward points represent the interest rate differential between the two currencies traded and are quoted as a preminum or a discount. Forward points are added to, or subtracted from, the spot rate to create the rate of the forward trade.">
	pointValue PointValue (0..1) <"An optional element that documents the size of point (pip) in which a rate was quoted (or in this case, forwardPoints are calculated). Point (pip) size varies by currency pair: major currencies are all traded in points of 0.0001, with the exception of JPY which has a point size of 0.01.">

type FxAmericanExercise extends FxDigitalAmericanExercise: <"Describes the characteristics for american exercise of FX products.">

	multipleExercise FxMultipleExercise (0..1) <"Characteristics for multiple exercise.">

type FxAsianFeature: <"Descibes the averaging period properties for an asian option.">

	primaryRateSource InformationSource (1..1) <"The primary source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">
	secondaryRateSource InformationSource (0..1) <"An alternative, or secondary, source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">
	fixingTime BusinessCenterTime (1..1) <"The time at which the spot currency exchange rate will be observed. It is specified as a time in a business day calendar location, e.g. 11:00am London time.">
	fxAsianFeatureSequence FxAsianFeatureSequence (0..1)
	fxRateObservationModel FxRateObservationModel (0..1)
	payoutFormula String (0..1) <"The description of the mathematical computation for how the payout is computed.">
	precision int(min: 0) (0..1) <"Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).">

	condition Choice:
		required choice fxAsianFeatureSequence, fxRateObservationModel

type FxAsianFeatureSequence:

	observationSchedule FxAverageRateObservationSchedule (1..1) <"Parametric schedule of rate observations.">
	fxRateObservationModel FxRateObservationModel (0..1)

type FxAverageRateObservation: <"A type that, for average rate options, is used to describe each specific observation date, as opposed to a parametric frequency of rate observations.">

	date date (1..1) <"A specific date for which an observation against a particular rate will be made and will be used for subsequent computations.">
	averageRateWeightingFactor number (1..1) <"An optional factor that can be used for weighting certain observation dates. Typically, firms will weight each date with a factor of 1 if there are standard, unweighted adjustments.">
	rate NonNegativeDecimal (0..1) <"The observed rate of exchange between the two option currencies. In the absence of rateObservationQuoteBasis, the rate is assumed to be quoted as per option strike/strikeQuoteBasis.">

type FxAverageRateObservationSchedule: <"A type that describes average rate options rate observations. This is used to describe a parametric frequency of rate observations against a particular rate. Typical frequencies might include daily, every Friday, etc.">

	startDate date (1..1) <"The start of the period over which observations are made to determine whether a trigger has occurred.">
	endDate date (1..1) <"The end of the period over which observations are made to determine whether a trigger event has occurred.">
	calculationPeriodFrequency CalculationPeriodFrequency (1..1) <"The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.">

type FxBarrierFeature: <"Describes the properties of an FX barrier.">

	barrierType FxBarrierTypeEnum (1..1) <"This specifies whether the option becomes effective (\"knock-in\") or is annulled (\"knock-out\") when the respective barrier event occurs.">
	direction FxBarrierDirectionEnum (0..1) <"This specifies whether the barrier direction is \"Up\" or \"Down\"; that is, that a barrier event occurs if the spot rate is at or above the trigger rate, or at or below the trigger rate during the period of observation of an american barrier, or at the times of observation of a discrete or european barrier.">
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	triggerRate PositiveDecimal (1..1) <"The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a trigger event is deemed to have occurred.">
	informationSource InformationSource (1..*) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">
	fxBarrierFeatureSequence FxBarrierFeatureSequence (0..1)
	observationPoint FxBusinessCenterDateTime (0..*) <"The dates and times at which rate observations are made to determine whether a barrier event has occurred for a discrete or european barrier. If the time is not present then the time is deemed to be the same as the expiration time.">

	condition Choice:
		optional choice fxBarrierFeatureSequence, observationPoint

type FxBarrierFeatureSequence:

	observationStartDate date (1..1) <"The date on which the observation period for an american barrier starts. If the start date is not present, then the date and time of the start of the period is deemed to be the date and time the transaction was entered into.">
	observationStartTime BusinessCenterTime (0..1) <"The time on the start date at which the observation period for an american barrier starts. If the time is not present and the start date is equivalent to the transaction date, the time is deemed to be the time the transaction was entered into. If the time is not present and the start date is other than the transaction date, then the time is deemed to be the same as the expiration time.">
	fxBarrierFeatureSequenceSequence FxBarrierFeatureSequenceSequence (0..1)

type FxBarrierFeatureSequenceSequence:

	observationEndDate date (1..1) <"The date on which the observation period for an american barrier ends. If the end date is not present, then the date and time of the end of the period is deemed to be the date and time of expiration.">
	observationEndTime BusinessCenterTime (0..1) <"The time on the end date at which the observation period for an american barrier ends. If the time is not present, then the time is deemed to be the same as the expiration time.">

type FxBusinessCenterDateTime:

	date date (1..1)
	time BusinessCenterTime (0..1)

type FxDigitalAmericanExercise extends Exercise: <"Descrines the characteristics for American exercise in FX digital options.">

	commencementDate AdjustableOrRelativeDate (1..1) <"The earliest date on which the option can be exercised.">
	expiryDate date (1..1) <"The latest date on which the option can be exercised.">
	expiryTime BusinessCenterTime (0..1) <"Time at which the option expires on the expiry date, at the specified business center. This component represents the formal definition of option expiry time.">
	cutName CutName (0..1) <"A code by which the expiry time is known in the market. This element is available to supplement the formal definition of expiry time, and must not be used in absence of the expiryTime element.">
	latestValueDate date (1..1) <"The latest date on which both currencies traded will settle.">

type FxDigitalOptionSequence0:

	americanExercise FxDigitalAmericanExercise (1..1) <"The parameters for defining the exercise period for an American style option.">
	touch FxTouch (1..*) <"Defines one or more conditions underwhich the option will payout if exercisable.">

type FxDigitalOptionSequence1:

	europeanExercise FxEuropeanExercise (1..1) <"The parameters for defining the exercise period for an European style option.">
	trigger FxTrigger (1..*) <"Defines one or more conditions underwhich the option will payout if exercisable.">

type FxDisruption: <"A structure describing how disruption for a specified currency pair should be handled">

	baseCurrency Currency (1..1) <"The base currency in the exchange rate monitored for disruption events. Typically this will be the settlement currency, but coud be an intermediate currency, in the case where disruption provisions are defined for components of a cross rate.">
	referenceCurrency Currency (1..1) <"The reference currency in the exchange rate being monitored for disruption events.">
	provisions FxDisruptionProvisions (1..*) <"One or more provisions describiing disruption events and how they will be handled.">

type FxDisruptionEvent: <"The base class for all disruption events">

type FxDisruptionEvents: <"A container for the disruption event set">

	fxDisruptionEvent FxDisruptionEvent (1..*)

type FxDisruptionFallback: <"The base class for all disruption fallbacks">

type FxDisruptionFallbacks: <"A container for the disruption fallback set">

	fxDisruptionFallback FxDisruptionFallback (1..*)

type FxDisruptionProvisions: <"Describes a set of disruption events and the fallbacks they will invoke">

	events FxDisruptionEvents (1..1) <"If any of the events listed in this section occurs then the associated fallbacks willl be applied.">
	fallbacks FxDisruptionFallbacks (1..1) <"Describes the fallback processing or termination procedures that can be applied if an event occurs,">
	applicableTerms FxTemplateTerms (0..1) <"Indicates the template terms that describe the events and fallbacks.">

type FxEuropeanExercise extends Exercise: <"Describes the characteristics for European exercise of FX products.">

	expiryDate date (1..1) <"Represents a standard expiry date as defined for an FX OTC option.">
	expiryTime BusinessCenterTime (0..1) <"Time at which the option expires on the expiry date, at the specified business center. This component represents the formal definition of option expiry time.">
	cutName CutName (0..1) <"A code by which the expiry time is known in the market. This element is available to supplement the formal definition of expiry time, and must not be used in absence of the expiryTime element.">
	valueDate date (1..1) <"The date on which both currencies traded will settle.">

type FxFallbackReferencePrice extends FxDisruptionFallback: <"Describes an alternative set of price sources">

	prioritizedRateSourceModel PrioritizedRateSourceModel (1..1)

type FxFixingScheduleSimple: <"Describes the FX fixing schedule, a single continuous observation period which follows the applicable business day schedule for the quoted rate source.">

	fxFixingScheduleSimpleSequence FxFixingScheduleSimpleSequence (0..1)
	endDate date (0..1) <"The end of the period over which observations are made to determine whether a trigger event has occurred.">
	dayType DayTypeEnum (0..1) <"Specifies whether the schedule follows the business or calendar days.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)
	fixingDate date (0..*) <"An explicit list of dates in the schedule. For documentation purpose only.">

	condition Choice:
		required choice fxFixingScheduleSimpleSequence, endDate

type FxFixingScheduleSimpleSequence:

	startDate date (1..1) <"The start of the period over which observations are made to determine whether a trigger has occurred.">
	endDate date (1..1) <"The end of the period over which observations are made to determine whether a trigger event has occurred.">

type FxFlexibleForwardSequence:

	earliestExecutionTime BusinessCenterTime (1..1) <"The earliest time of day at the specified business center, at which the client may execute a transaction.">
	latestExecutionTime BusinessCenterTime (1..1) <"The latest time of day at the specified business center, at which the client may execute a transaction.">

type FxFlexibleForwardExecutionPeriod:

	startDate date (1..1) <"Start date of the execution period/window.">
	expiryDate date (1..1) <"Expiry (maturity) date of the execution period.">
	businessCenters BusinessCenters (1..1) <"Business centers for determination of execution period business days.">
	id string (1..1)

type FxFlexibleForwardRate extends QuotedCurrencyPair:

	rate PositiveDecimal (1..1) <"Constant rate value, applicable for the duration of the execution period.">
	spotRate PositiveDecimal (0..1) <"The spot exchange rate for the specified currency pair as per the specified quote basis, as at the trade date.">

type FxMultipleExercise: <"Describes the limits on the size of notional when multiple exercise is allowed.">

	minimumNotionalAmount NonNegativeMoney (0..1) <"The minimum amount of notional that can be exercised.">
	maximumNotionalAmount NonNegativeMoney (0..1) <"The maximum amount of notiional that can be exercised.">

type FxOptionFeatures: <"A type describing the features that may be present in an FX option.">

	fxOptionFeaturesSequence FxOptionFeaturesSequence (0..1)
	barrier FxBarrierFeature (0..*)

	condition Choice:
		one-of

type FxOptionFeaturesSequence:

	asian FxAsianFeature (1..1)
	barrier FxBarrierFeature (0..*)

type FxOptionPayout extends NonNegativeMoney: <"A type that contains full details of a predefined fixed payout which may occur (or not) in a Barrier Option or Digital Option when a trigger event occurs (or not).">

	payoutStyle PayoutEnum (1..1) <"The trigger event and payout may be asynchonous. A payout may become due on the trigger event, or the payout may (by agreeement at initiation) be deferred (for example) to the maturity date.">
	settlementInformation SettlementInformation (0..1) <"The information required to settle a currency payment that results from a trade.">

type FxOptionPremium extends NonNegativePayment: <"A type that specifies the premium exchanged for a single option trade or option strategy.">

	settlementInformation SettlementInformation (0..1) <"The information required to settle a currency payment that results from a trade.">
	quote PremiumQuote (0..1) <"This is the option premium as quoted. It is expected to be consistent with the premiumAmount and is for information only.">

type FxPerformanceFixedLeg extends FxPerformanceLeg: <"FX Performance Fixed Leg describes Fixed FX Rate Payer and Fixed Rate.">

	fixedRate PositiveDecimal (1..1) <"Fixed Rate means a rate, expressed as a decimal, equal to the per annum rate specified as such in the Confirmation for the Non-Deliverable Swap FX Transaction or that party (i.e., a per annum rate of 15.10% as specified in a Confirmation shall be expressed as 0.1510 for calculation purposes).">

type FxPerformanceFloatingLeg extends FxPerformanceLeg: <"Fx Performance Floating Leg describes Floating FX Rate Payer.">

type FxPerformanceLeg: <"Floating FX Rate describes Fixed FX Rate Payer and Fixed Rate">

	payerModel PayerModel (1..1)
	receiverModel ReceiverModel (0..1)

type FxPerformanceSwap extends Product: <"Describes an FX volatility and variance swap.">

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"A Currency Pair with regards to this transaction and the quoting convention.">
	vegaNotional NonNegativeMoney (1..1) <"Vega Notional means the currency and amount specified as such in the related Confirmation.">
	notional NonNegativeMoney (0..1) <"Notional Amount means, in the case of Transaction Type Variance Swap, the currency and amount specified as such in the related Confirmation or an amount calculated in accordance with the following: Notional Amount = Vega Notional Amount / (0.02 x Fixed FX Rate). This element must be produced in case of Variance Swap transaction.">
	fixedLeg FxPerformanceFixedLeg (1..1) <"Fixed FX Rate component describes the Fixed FX Rate and Fixed FX Rate Payer as such in the Confirmation for the Non-Deliverable Swap FX Transaction.">
	floatingLeg FxPerformanceFloatingLeg (1..1) <"Floating FX Rate component describes the Floating FX Rate Payer of the rate determined in accordance with the Floating FX Rate Option specified in the Definitions.">
	fixingInformationSource FxSpotRateSource (1..1) <"Fixing Information source parameters to determine the rate observed for each good business day within the Fixing Schedule.">
	fixingSchedule FxFixingScheduleSimple (1..1) <"Parametric schedule of rate observation dates.">
	valuationDate date (0..1) <"Final Observation Date when Settlement Amount and Settlement Amount Payer determination date.">
	valuationDateOffset FxValuationDateOffset (0..1) <"Valuation date offset relative to the Final Observation Date and can be: [Final Observation Date][The first Business Day following the Final Observation Date].">
	settlementDate AdjustableOrAdjustedDate (1..1) <"The date on which the Settlement Amount will be settled.">
	annualizationFactor number (1..1) <"This specifies the numerator of an annualization factor. Frequently this number is equal to the number of rate observations in a year e.g. Daily Observations: 252.">
	meanAdjustment boolean (1..1) <"Specifies whether \"Mean Adjustment\" is applicable or not in the calculation of the Realized Volatility.">
	numberOfReturns int(min: 0) (0..1) <"Number of Returns is the number of Observation Dates in the Observation Period, excluding the Initial Observation Date (where the Observation Rate on the Initial Observation Date shall equal S0).">
	additionalPayment Payment (0..*) <"Additional Payment means, in respect of an FX Transaction, where such fee is required, and a Transaction Fee Payment Date, the amount, if any, that is specified or otherwise determined as provided in the related Confirmation and, subject to any applicable condition precedent, is payable by one party to the other as further specified or otherwise determined as provided in the related Confirmation on the Transaction Fee Payment Date or on each Transaction Fee Payment Date if more than one is specified, for value on such date.">
	cashSettlement FxCashSettlementSimple (0..1) <"Specifies the Settlement currency and fixing details for cash settlement. The FX Volatility and FX Variance Swaps are inherently cash settled, but into the notional currency. The optional cashSettlement block is provided for the case where the Settlement Currency differs from that of the Notional.">

	condition Choice:
		optional choice valuationDate, valuationDateOffset

type FxStraddle: <"Straddle details. Straddle is composed of two options: a call and a put involving the quotedCurrencyPair.">

	straddleType FxStraddleTypeEnum (1..1) <"The type Straddle as agreed on the Trade Date, e.g. at the money forward straddle, or delta neutral straddle.">
	tenorPeriod Period (0..1) <"A Tenor (time to maturity) of the straddle starting from the Fixing Date (e.g. 1y, 3m)">
	europeanExercise FxEuropeanExercise (1..1) <"The parameters for exercising the FxStraddle (underlying options), the underlying options are always European style options.">
	exerciseProcedure ExerciseProcedure (0..1) <"A set of parameters defining procedures associated with the exercise.">
	notional NonNegativeMoney (1..1) <"The currency amount for the FxStraddle. This will be the notional for the underlying options, which may be exercised by the Buyer.">
	counterCurrency Currency (1..1) <"The counter currency and amount for the FxStraddle. The Counter Currency Amount is determined using the notional and the Strike Price (which is determined at the fixingTime on the fixingDate).">
	premium FxStraddlePremium (0..*) <"Defines the FX Straddle premium amount, payer and dates. This amount is also determined at the fixingTime on the fixingDate.">
	settlementDate AdjustableOrAdjustedDate (0..1) <"DEPRECATED. The settlement date is already expressed by europeanExercise/valueDate. The Settlement Date for the FxStraddle (if exercised at the expiryTime on the expiry Date).">
	cashSettlement FxCashSettlementSimple (0..1) <"Specifies the settlement type for the FxStraddle. If deliverable then this element is removed. If non-deliverable, then the In-The-Money amount of the relevant option within the FxStraddle is paid by the Seller to the Buyer. The In-The-Money amount is calculated using the parameters within this element.">

type FxStraddlePremium extends PaymentBaseExtended: <"The Currency and Amount to be paid by the Buyer to the Seller. The straddle premium is calculated on the Fixing Date using the Forward Volatility Agreement parameters.">

	paymentCurrency IdentifiedCurrency (1..1) <"The Premium Payment Currency.">
	settlementInformation SettlementInformation (0..1) <"The Seller details for settling the FxStraddlePremium.">

type FxStrikePrice: <"A type that describes the rate of exchange at which the option has been struck.">

	rate PositiveDecimal (1..1) <"The rate of exchange between the two currencies of the leg of a deal.">
	strikeQuoteBasis StrikeQuoteBasisEnum (1..1) <"The method by which the strike rate is quoted.">

type FxSwapLeg extends Leg:

	tradeIdentifierReference PartyTradeIdentifierReference (0..*) <"A reference to a party trade ID. This is provided in case the message creator wishes to record that the swap leg is assocatiated with a particular trade identifier; typically this is used for identifying a USI assocatied wih the leg.">
	fxCoreDetailsModel FxCoreDetailsModel (1..1)

type FxTemplateTerms: <"Reference a code defining the origin of the trade template terms">

	value Scheme (1..1)
	fxTemplateTermsScheme NonEmptyURI (0..1)

type FxTouch: <"Describes an american or discrete touch or no-touch trigger applied to an FX binary or digital option.">

	touchCondition TouchConditionEnum (1..1) <"This specifies whether the applied trigger is a touch or no touch type.">
	direction TriggerConditionEnum (0..1) <"This specifies whether the trigger direction is \"AtOrAbove\" or \"AtOrBelow; that is, that a barrier event occurs if the spot rate is at or above the trigger rate, or at or below the trigger rate during the period of observation of an american trigger, or at the times of observation of a discrete trigger. DEPRECATE: Values \"Above\" and \"Below\" are deprecated.">
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	triggerRate PositiveDecimal (1..1) <"The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a barrier event is deemed to have occurred.">
	spotRate PositiveDecimal (0..1) <"An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the market rate needs to move \"up\" or \"down\" to trigger a barrier event.">
	informationSource InformationSource (1..*) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">
	fxTouchSequence FxTouchSequence (0..1)
	observationPoint FxBusinessCenterDateTime (0..*) <"The dates and times at which rate observations are made to determine whether a barrier event has occurred for a discrete trigger. If the time is not present then the time is deemed to be the same as the expiration time.">

	condition Choice:
		optional choice fxTouchSequence, observationPoint

type FxTouchSequence:

	observationStartDate date (1..1) <"The date on which the observation period for an american trigger starts. If the start date is not present, then the date and time of the start of the period is deemed to be the date and time the transaction was entered into.">
	observationStartTime BusinessCenterTime (0..1) <"The time on the start date at which the observation period for an american trigger starts. If the time is not present and the start date is equivalent to the transaction date, the time is deemed to be the time the transaction was entered into. If the time is not present and the start date is other than the transaction date, then the time is deemed to be the same as the expiration time.">
	fxTouchSequenceSequence FxTouchSequenceSequence (0..1)

type FxTouchSequenceSequence:

	observationEndDate date (1..1) <"The date on which the observation period for an american trigger ends. If the end date is not present, then the date and time of the end of the period is deemed to be the date and time of expiration.">
	observationEndTime BusinessCenterTime (0..1) <"The time on the end date at which the observation period for an american trigger ends. If the time is not present, then the time is deemed to be the same as the expiration time.">

type FxTrigger extends FxTriggerBase: <"Describes a european trigger applied to an FX digtal option.">

	informationSource InformationSource (1..*) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">

type FxTriggerBase: <"Describes a european trigger applied to an FX digtal option.">

	triggerCondition TriggerConditionEnum (1..1) <"The condition that applies to a european trigger applied to an FX digital option. It determines where the rate at expiry date and time at must be relative to the triggerRate for the option to be exercisable. The allowed values are \"AtOrAbove\" and \"AtOrBelow\". DEPRECATE: Values \"Above\" and \"Below\" are deprecated.">
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	triggerRate PositiveDecimal (1..1) <"The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a barrier event is deemed to have occurred.">
	spotRate PositiveDecimal (0..1) <"An optional element used for FX forwards and certain types of FX OTC options. For deals consumated in the FX Forwards Market, this represents the current market rate for a particular currency pair. For barrier and digital/binary options, it can be useful to include the spot rate at the time the option was executed to make it easier to know whether the market rate needs to move \"up\" or \"down\" to trigger a barrier event.">

type FxValuationDateOffset extends Offset: <"Valuation date offset is used in FX Variance Swap and Volatility Swap to always relate the Final Observation Date and can be: [Final Observation Date][The first Business Day following the Final Observation Date]">

	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)

type Postponement extends FxDisruptionFallback: <"Describes a postponement">

	maximumNumberOfDays int(min: 1) (0..1) <"The maximum number of days of postponement.">

type PremiumQuote: <"A type that describes the option premium as quoted.">

	value number (1..1) <"The value of the premium quote. In general this will be either a percentage or an explicit amount.">
	quoteBasis PremiumQuoteBasisEnum (1..1) <"The method by which the option premium was quoted.">

type TermDepositFeatures:

	dualCurrency DualCurrencyFeature (1..1)

type FxCoreDetailsModel: <"The elements common to FX spot, forward and swap legs.">

	exchangedCurrency1 Payment (1..1) <"This is the first of the two currency flows that define a single leg of a standard foreign exchange transaction.">
	exchangedCurrency2 Payment (1..1) <"This is the second of the two currency flows that define a single leg of a standard foreign exchange transaction.">
	dealtCurrency DealtCurrencyEnum (0..1) <"Indicates which currency was dealt.">
	fxTenorModel FxTenorModel (0..1)
	valueDate date (0..1) <"The date on which both currencies traded will settle.">
	fxCoreDetailsModelSequence FxCoreDetailsModelSequence (0..1)
	exchangeRate ExchangeRate (1..1) <"The rate of exchange between the two currencies.">
	nonDeliverableSettlement FxCashSettlement (0..1) <"Used to describe a particular type of FX forward transaction that is settled in a single currency (for example, a non-deliverable forward).">
	disruption FxDisruption (0..*) <"Describes the disruption events and fallbacks applicable to a currency pair referenced by the transaction.">

	condition Choice:
		required choice valueDate, fxCoreDetailsModelSequence

type FxCoreDetailsModelSequence:

	currency1ValueDate date (1..1) <"The date on which the currency1 amount will be settled. To be used in a split value date scenario.">
	currency2ValueDate date (1..1) <"The date on which the currency2 amount will be settled. To be used in a split value date scenario.">

type FxRateObservationModel: <"The elements common to FX rate observation.">

	rateObservation FxAverageRateObservation (1..*) <"One or more specific rate observation dates.">
	rateObservationQuoteBasis StrikeQuoteBasisEnum (0..1) <"The method by which observed rate values are quoted, in terms of the option put/call currencies. In the absence of this element, rate observations are assumed to be quoted as per the option strikeQuoteBasis.">

type FxTenorModel:

	tenorName FxTenorPeriodEnum (0..1) <"A tenor expressed with a standard business term (i.e. Spot, TomorrowNext, etc.)">
	tenorPeriod Period (0..1) <"A tenor expressed as a period type and multiplier (e.g. 1D, 1Y, etc.)">

	condition Choice:
		one-of

type PrioritizedRateSourceModel: <"Defines a primary and optional secondary rate sources">

	primaryRateSource SettlementRateOption (1..1)
	secondaryRateSource SettlementRateOption (0..*)

type PutCallCurrencyModel:

	putCurrency Currency (1..1) <"The currency which: - the option buyer will pay (sell) - the option writer will receive (buy)">
	callCurrency Currency (1..1) <"The currency which: - the option buyer will receive (buy) - the option writer will pay (sell)">

type FxComplexBarrierBase:

	barrierType FxBarrierTypeSimpleEnum (1..1) <"Specifies the outcome (action) in the event that the barrier is triggered i.e. whether the product becomes active (Knockin) or is extinguished (Knockout).">
	style FxBarrierStyleEnum (1..1) <"The barrier observation style: continuous (American) or discrete (European).">
	scope FxBarrierScopeEnum (1..1) <"The scope of the barrier (PerExpiry|Global). Specifies whether the barrier has effect for the current expiry period (in the case of a multi-phase product), or for the product as a whole.">
	condition ConditionEnum (1..1) <"Defines the condition when the barrier applies: AtOrAbove, AtOrBelow, Above, Below.">
	triggerRate Schedule (1..1) <"The market rate is observed relative to the trigger rate, and if it is found to be on the predefined side of (above or below) the trigger rate, a barrier event is deemed to have occurred.">
	fxComplexBarrierBaseSequence0 FxComplexBarrierBaseSequence0 (0..1)
	fxComplexBarrierBaseSequence1 FxComplexBarrierBaseSequence1 (0..1)
	id string (0..1) <"Attribute to be able to point to the">

type FxComplexBarrierBaseSequence0:

	observationStartDate date (1..1) <"The date on which the observation period for an american barrier starts. If the start date is not present, then the date and time of the start of the period is deemed to be the date and time the transaction was entered into.">
	observationStartTime BusinessCenterTime (0..1) <"The time on the start date at which the observation period for an american barrier starts. If the time is not present and the start date is equivalent to the transaction date, the time is deemed to be the time the transaction was entered into. If the time is not present and the start date is other than the transaction date, then the time is deemed to be the same as the expiration time.">

type FxComplexBarrierBaseSequence1:

	observationEndDate date (1..1) <"The date on which the observation period for an american barrier ends. If the end date is not present, then the date and time of the end of the period is deemed to be the date and time of expiration.">
	observationEndTime BusinessCenterTime (0..1) <"The time on the end date at which the observation period for an american barrier ends. If the time is not present, then the time is deemed to be the same as the expiration time.">

type FxComplexBarrierBaseReference extends Reference: <"Reference to a barrier structure defined within the parametric representation.">

	href string (1..1)

type FxCounterCurrencyAmount extends NonNegativeAmountSchedule:

	strikeReference FxStrikeReference (0..1) <"In case of multiple counter currency notionals, a strike reference to the appropriate strike may be provided.">

type FxDateOffset: <"The representation of the schedule as an offset relative to another schedule. For example, the settlement schedule may be relative to the expiry schedule by an FxForward offset.">

	convention FxOffsetConventionEnum (1..1) <"The FX Offset Convention can be FxSpot or FxForward.">
	offset Period (0..1) <"The settlement offset to the expiry schedule or the expiry offset to the settlement schedule. It is only specified when the settlement convention is FxForward.">
	relativeTo FxScheduleReference (1..1) <"Indicates whether the settlement schedule is relative to the expiry schedule or the expiry schedule is relative to the settlement schedule.">

type FxExchangedCurrency: <"Indicates the direction who pays and receives a specific currency without specifying the amount.">

	payerReceiverModel PayerReceiverModel (1..1)
	currency Currency (1..1)

type FxExpirySchedule extends FxSchedule: <"Defines the expiry/observation schedule of the target.">

	finalExpiryDate date (0..1) <"The final expiry date facilitates informing the final date without having to process all expiry dates in the schedule.">
	expiryTime BusinessCenterTime (0..1) <"Time of expiration of each expiry date.">

type FxKnockoutCount:

	conditionalFixings int (1..1) <"Number of fixings that are in the money. No accumulation process.">
	settlementAtKnockout boolean (1..1) <"Whether there is settlement at knockout.">

type FxKnockoutLevel: <"Defines the Target level of gain.">

	amount NonNegativeMoney (0..1) <"Target level expressed as a cash amount.">
	intrinsicValue number (0..1) <"Target level expressed as intrinsic value (cumulative benefit over the prevailing spot rate at each observation point).">
	targetStyle FxTargetStyleEnum (1..1) <"Target style when it settles, whether it is Inclusive, Exclusive, or Exact. Exclusive: the gain for the knockout period is adjusted to zero i.e. the target yields zero value in the final period. Exact: the gain for the knockout period is adjusted to yield a final accumulated value equal to the target level. Inclusive: the gain for the knockout period is equal to the whole benefit of the final fixing over spot i.e. the final accumulated value may exceed the target level.">
	settlementAdjustmentStyle FxSettlementAdjustmentMethodEnum (0..1) <"Specifies the calculation method by which the final accumulated value is adjusted equal to the target value, in the case where the target style is \"Exact\". This element must be produced (only) where the target style is \"Exact\", and should be omitted otherwise.">

	condition Choice:
		required choice amount, intrinsicValue

type FxLevel extends Schedule: <"Level is expressed as Schedule, with an initial value and optional steps.">

type FxLevelReference extends Reference: <"Reference to a level structure.">

	href string (1..1)

type FxOutstandingGain:

	targetReference FxTargetReference (1..1) <"Reference to a target structure within the product.">
	settlementAdjustmentStyle FxSettlementAdjustmentMethodEnum (0..1) <"The Settlement Adjustment Style can be VariedStrike or VariedNotional.">

type FxPayoffCap: <"The amount of gain on the client upside or firm upside is limited. If spot settles above the cap, or below the floor, the payout is adjusted to limit the gain. The adjustment may be made by varying the strike, or by maintaining the strike, but varying the payout notionals.">

	condition ConditionEnum (1..1) <"Condition in which Cap or Floor applies.">
	rate Schedule (1..1) <"Cap/Floor rate.">
	settlementAdjustmentStyle FxSettlementAdjustmentMethodEnum (1..1) <"The Settlement Adjustment Style can be VariedStrike or VariedNotional.">

type FxPivot extends Schedule: <"Pivot is expressed as Schedule, with an initial value and optional steps.">

type FxPivotReference extends Reference: <"Reference to a pivot structure.">

	href string (1..1)

type FxSchedule: <"The FxSchedule may be expressed as explicit adjusted dates, or a parametric representation plus optional adjusted dates, or as an offset plus optional adusted dates.">

	fxScheduleSequence0 FxScheduleSequence0 (0..1)
	fxScheduleSequence1 FxScheduleSequence1 (0..1)
	id string (0..1)

	condition Choice:
		required choice fxScheduleSequence0, fxScheduleSequence1

type FxScheduleSequence0:

	dateAdjustments BusinessDayAdjustments (0..1) <"Date adjustments applied to the adjusted dates including the business day convention and the business centers.">
	adjustedDate date (1..*) <"List of schedule dates. These dates have been subject to adjustments based on the dateAdjustments structure.">

type FxScheduleSequence1:

	parametricScheduleModel ParametricScheduleModel (0..1)
	dateOffset FxDateOffset (0..1) <"The representation of the schedule as an offset relative to another schedule. For example, the settlement schedule may be relative to the expiry schedule by an FxForward offset.">
	adjustedDate date (0..*) <"List of schedule dates. These dates have been subject to adjustments based on the dateAdjustments structure.">

	condition Choice:
		required choice parametricScheduleModel, dateOffset

type FxScheduleReference extends Reference: <"Reference to a FX Schedule structure.">

	href string (1..1)

type FxSettlementPeriodBarrier:

	barrierReference FxComplexBarrierBaseReference (0..1) <"Reference to the barrier structure within the parametric representation of the product.">
	triggerRate number (1..1) <"Barrier trigger rate.">

type FxSettlementSchedule extends FxSchedule:

	finalSettlementDate date (0..1) <"The final settlement date facilitates informing the final date without having to process all settlement dates in the schedule.">

type FxStrike extends Schedule: <"Strike is expressed as Schedule, with an initial value and optional steps.">

type FxStrikeReference extends Reference: <"Reference to a strike structure.">

	href string (1..1)

type FxTarget:

	accumulationRegion FxTargetAccumulationRegion (1..2)
	knockoutLevel FxKnockoutLevel (0..1)
	knockoutCount FxKnockoutCount (0..1)
	id string (0..1)

	condition Choice:
		required choice knockoutLevel, knockoutCount

type FxTargetAccumulationRegion:

	fxTargetRegionBoundModel FxTargetRegionBoundModel (1..1)
	multiplier number (0..1) <"This is the factor that increases gain, not notional. Used to support Accelerated TARFs.">

type FxTargetBarrier extends FxComplexBarrierBase:

	rebate FxTargetRebate (0..1) <"A rebate payable in the event of knockout. This element may be produced in conjunction with a Global Knockout barrier (barrierType = \"Knockout\" scope = \"Global\"), and must be omitted otherwise.">

type FxTargetConstantPayoff:

	fxTargetConstantPayoffSequence FxTargetConstantPayoffSequence (0..1)
	fixingAdjustment number (0..1) <"Payoff (gain) expressed as a fixing adjustment. This style is used in the \"bonus collar\" TARF.">

	condition Choice:
		one-of

type FxTargetConstantPayoffSequence:

	payerReceiverModel PayerReceiverModel (1..1)
	payment PositiveMoney (1..1) <"Cash payment.">

type FxTargetConstantPayoffRegion extends FxTargetPayoffRegion: <"A fixing region in which the payoff is a constant value (a binary|digital payoff, or zero).">

	fxTargetRegionBoundModel FxTargetRegionBoundModel (1..1)
	payoff FxTargetConstantPayoff (0..1) <"A binary|digital payoff, expressed either as a cash payment, or a (non-zero) fixing adjustment.">
	physicalSettlement FxTargetPhysicalSettlement (0..1)

type FxTargetKnockoutForwardSequence:

	pivot FxPivot (1..1) <"The boundary where the contract flips from being long and short is the pivot point. So the pivot indicates the level in which there is a change in direction of the currencies exchanged by the parties.">
	constantPayoffRegion FxTargetConstantPayoffRegion (0..*) <"A region in which constant payoff applies i.e. the payoff is defined as a contant currency amount or fixing adjustment, unrelated to the fixing. In absence of the \"payoff\" element, zero payoff is assumed (note: zero payoff does not necessarily imply that no settlement occurs).">
	linearPayoffRegion FxTargetLinearPayoffRegion (1..1) <"A region in which linear payoff applies i.e. the payoff bears a linear relationship to the fixing value (increases/decreases linearly with the fixing).">

type FxTargetKnockoutForwardChoice:

	constantPayoffRegion FxTargetConstantPayoffRegion (0..1) <"It defines a region in which a digital payment occurs.">
	linearPayoffRegion FxTargetLinearPayoffRegion (0..1) <"A region in which linear payoff applies i.e. the payoff bears a linear relationship to the fixing value (increases/decreases linearly with the fixing).">

	condition Choice:
		optional choice constantPayoffRegion, linearPayoffRegion

type FxTargetLeverage:

	condition ConditionEnum (1..1) <"Condition in which leverage applies.">
	fxTargetConditionLevelModel FxTargetConditionLevelModel (1..1)
	ratio Schedule (0..1) <"Leverage rate with optional steps. Format is 2 for 200%.">
	fxTargetLeverageSequence FxTargetLeverageSequence (0..1)
	id string (0..1)

	condition Choice:
		required choice ratio, fxTargetLeverageSequence

type FxTargetLeverageSequence:

	notionalAmount NonNegativeAmountSchedule (1..1) <"Leveraged notional expressed as amount with optional steps.">
	counterCurrencyAmount FxCounterCurrencyAmount (0..*) <"The opposite currency amount of the Target.">

type FxTargetLinearPayoffRegion extends FxTargetPayoffRegion: <"A fixing region in which the payoff varies linearly with the fixing value.">

	fxExchangedCurrencyModel FxExchangedCurrencyModel (1..1)
	strike FxStrike (1..1) <"Strike price of the Target.">
	counterCurrencyAmount NonNegativeAmountSchedule (0..1) <"The opposite currency amount of the Target.">
	lowerBound FxTargetRegionLowerBound (0..1) <"Defines the lower bound of a payoff region.">
	upperBound FxTargetRegionUpperBound (0..1) <"Defines the upper bound of a payoff region.">
	leverage FxTargetLeverage (0..1) <"Notional leverage.">
	payoffCap FxPayoffCap (0..*) <"The amount of gain on the client upside or firm upside is limited. If spot settles above the cap, or below the floor, the payout is adjusted to limit the gain. The adjustment may be made by varying the strike, or by maintaining the strike, but varying the payout notionals.">

type FxTargetPayoffRegion:

	id string (0..1)

type FxTargetPayoffRegionReference extends Reference: <"Reference to a FX Target Payoff Region.">

	href string (1..1)

type FxTargetRebate: <"A rebate can be expressed as a payment amount or as amount of outstanding gain.">

	payment SimplePayment (0..1) <"Rebate amount expressed as a payment between the two parties.">
	outstandingGain FxOutstandingGain (0..1) <"Rebate expressed as amount of outstanding gain.">

	condition Choice:
		one-of

type FxTargetRegionLowerBound:

	condition FxRegionLowerBoundDirectionEnum (1..1) <"AtOrAbove, Above.">
	fxTargetConditionLevelModel FxTargetConditionLevelModel (1..1)

type FxTargetRegionUpperBound:

	condition FxRegionUpperBoundDirectionEnum (1..1) <"AtOrBelow, Below.">
	fxTargetConditionLevelModel FxTargetConditionLevelModel (1..1)

type FxTargetSettlementPeriodPayoff: <"Payoff region">

	payoffRegionReference FxTargetPayoffRegionReference (0..1) <"Optional reference to the Payoff Region in the parametric representation of the product.">
	strike number (1..1) <"Strike for the settlement period.">
	counterCurrencyAmount number (0..1) <"Counter Currency Amount for the settlement period. Multiple Counter Currency Amount elements may appear if there are more than one strike in the settlement period.">
	lowerBound number (0..1) <"Lower bound to the region.">
	upperBound number (0..1) <"Upper bound to the region.">
	leverage SettlementPeriodLeverage (0..1) <"Leverage within the period expressed as either an amount or ratio.">
	payoffCap number (0..1) <"The amount of gain on the client upside or firm upside is limited. If spot settles above the cap, or below the floor, the payout is adjusted to limit the gain. The adjustment may be made by varying the strike, or by maintaining the strike, but varying the payout notionals.">

type FxTargetSettlementPeriodSchedule:

	settlementPeriod FxTargetSettlementPeriod (1..*) <"Defines each settlement period in the tabular/matrix representation of the product.">

type FxTargetSettlementPeriod extends SettlementPeriod:

	pivot number (0..1) <"Pivot for the settlement period. When pivot is present, at least two payoff elements must be present within the settlement period.">
	payoff FxTargetSettlementPeriodPayoff (1..*) <"Payoff Region within the settlement period to link strike with the relevant payoff components.">
	barrier FxSettlementPeriodBarrier (0..*) <"The trigger rate of the barrier (Per Expiry or Global Knockout) for the settlement period.">

type FxTargetPhysicalSettlement:

	fxExchangedCurrencyModel FxExchangedCurrencyModel (1..1)
	settlementAdjustmentStyle FxSettlementAdjustmentMethodEnum (1..1) <"The Settlement Adjustment Style can be VariedStrike or VariedNotional.">
	strikeOrStrikeReferenceModel StrikeOrStrikeReferenceModel (0..1)

type FxTargetReference extends Reference: <"Reference to a target structure.">

	href string (1..1)

type SettlementPeriod:

	expiryDate date (1..1) <"Expiry date for the settlement period.">
	settlementDate date (1..1) <"Settlement date for the settlement period.">
	notionalAmount number (1..1) <"Notional Amount for the settlement period.">

type SettlementPeriodFixingDates:

	fixingDate date (0..*) <"Observation date in a fixing period.">
	settlementPeriodFixingDatesSequence SettlementPeriodFixingDatesSequence (0..1)
	numberOfFixings int (0..1) <"Number of fixings between the fixing start and end date.">

	condition Choice:
		one-of

type SettlementPeriodFixingDatesSequence:

	startDate date (1..1) <"Start date of the period.">
	endDate date (1..1) <"End date of the period.">

type SettlementPeriodLeverage:

	ratio number (0..1) <"Leverage expressed as ratio.">
	settlementPeriodLeverageSequence SettlementPeriodLeverageSequence (0..1)

	condition Choice:
		one-of

type SettlementPeriodLeverageSequence:

	notionalAmount number (1..1) <"Leverage notional.">
	counterCurrencyAmount number (0..1) <"Leverage counter currency notional.">

type FxExchangedCurrencyModel: <"Indicates the directions of who pays and receives a specific currency without specifying the amount.">

	exchangedCurrency1 FxExchangedCurrency (1..1) <"Indicates the first direction of who pays and receives a specific currency without specifying the amount.">
	exchangedCurrency2 FxExchangedCurrency (1..1) <"Indicates the second direction of who pays and receives a specific currency without specifying the amount.">

type FxTargetConditionLevelModel: <"Conditions can be expressed in different ways: as a specific level, as strike, pivot, or barrier.">

	level FxLevel (0..1) <"Level expressed as a level with optional steps different from strike, pivot, or barrier.">
	strikeReference FxStrikeReference (0..1) <"Reference to a strike defined within the FX product.">
	pivotReference FxPivotReference (0..1) <"Reference to the pivot defined within the FX product.">
	barrierReference FxComplexBarrierBaseReference (0..1) <"Reference to a perExpiryBarrier component to indicate theat the bound of the region is defined by the barrier component.">
	levelReference FxLevelReference (0..1) <"Reference to a level defined within the FX product.">

	condition Choice:
		one-of

type FxTargetRegionBoundModel:

	upperBound FxTargetRegionUpperBound (0..1) <"Defines the upper bound of a payoff region.">
	fxTargetRegionBoundModelSequence FxTargetRegionBoundModelSequence (0..1)

	condition Choice:
		one-of

type FxTargetRegionBoundModelSequence:

	lowerBound FxTargetRegionLowerBound (1..1) <"Defines the lower bound of a payoff region.">
	upperBound FxTargetRegionUpperBound (0..1) <"Defines the upper bound of a payoff region.">

type ParametricScheduleModel: <"The schedule defined by the set of parameters to be able to calculate the schedule of adjusted date. The combination of the [start/endDate + dayType + businessCenters] will be used only to represent a daily schedule and the combination of [start/endDate + observationFrequency + dateAdjustments] for parametric representation of the schedules other than daily schedule.">

	parametricScheduleModelSequence0 ParametricScheduleModelSequence0 (0..1)
	endDate date (0..1) <"End of the schedule.">
	parametricScheduleModelSequence1 ParametricScheduleModelSequence1 (0..1)
	parametricScheduleModelSequence2 ParametricScheduleModelSequence2 (0..1)

	condition Choice0:
		required choice parametricScheduleModelSequence0, endDate

	condition Choice1:
		required choice parametricScheduleModelSequence1, parametricScheduleModelSequence2

type ParametricScheduleModelSequence0:

	startDate date (1..1) <"Start of the schedule.">
	endDate date (0..1) <"End of the schedule.">

type ParametricScheduleModelSequence1:

	observationFrequency ObservationFrequency (1..1) <"Defines the frequency at which calculation period end dates occur within the period schedule and their roll date convention.">
	dateAdjustments BusinessDayAdjustments (0..1) <"Date adjustments applied to the schedule including the business day convention and the business centers.">

type ParametricScheduleModelSequence2:

	dayType DayTypeEnum (1..1) <"A day type classification, e.g. Business, Calendar, etc.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)

type StrikeOrStrikeReferenceModel:

	strike FxStrike (0..1) <"Strike price of the Target.">
	strikeReference FxStrikeReference (0..1) <"Reference to an existing strike structure within the FX product.">

	condition Choice:
		one-of

type FxAccrual: <"Accrual calculation process.">

	observable FxRateObservable (1..*) <"Contains the quoted currency pair, and the information source for fixing FX rate.">
	accrualRegion FxAccrualRegion (1..*) <"Defines the regions of the spot rate where fixings generate an accumulation of notional.">
	fixingSchedule FxFixingSchedule (1..1) <"Describes a parametric schedule of fixing dates.">
	id string (0..1)

type FxAccrualAverageStrikeReference extends Reference: <"Reference to an average rate structure in FxAccrualForward or FxAccrualOption products.">

	href string (1..1)

type FxAccrualBarrier extends FxComplexBarrierBase:

	accrualRetention FxAccrualKnockoutBarrierRetentionEnum (0..1) <"Specifies the behavior with respect to settlement rights for the accrual period in which a global knockout event occurs (the \"knockout period\"). \"Keep\" means that the parties retain settlement rights at the end of the knckout period, fixed at the prevailing accrued notional, and settlement rights for all future accrual periods are extinguished. \"Lose\" means that settlement rights for the knockout period and all future accrual periods are extinguished, and the product is effectively extinguished. This element should be produced in case of a global knockout barrier (barrierType= \"Knockout\", scope=\"Global\"), and omitted otherwise.">
	observableReference FxRateObservableReference (0..1) <"Reference to an \'FxRateObservable\' structure.">
	fxAccrualBarrierSequence FxAccrualBarrierSequence (0..1)

	condition Choice:
		optional choice observableReference, fxAccrualBarrierSequence

type FxAccrualBarrierSequence:

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	informationSource InformationSource (0..*) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">

type FxAccrualLeverage:

	condition ConditionEnum (1..1) <"Condition in which leverage applies.">
	fxAccrualConditionLevelModel FxAccrualConditionLevelModel (1..1)
	ratio Schedule (0..1) <"Leverage rate with optional steps. Format is 2 for 200%.">
	fxAccrualLeverageSequence FxAccrualLeverageSequence (0..1)
	id string (0..1)

	condition Choice:
		required choice ratio, fxAccrualLeverageSequence

type FxAccrualLeverageSequence:

	notionalAmount NonNegativeAmountSchedule (1..1) <"Notional amount Schedule. The notional value of the product per settlement period. This number divided by the total number of fixings in the fixing schedule is the amount that is accrued at each fixing if the accrual factor is one.">
	counterCurrencyAmount FxCounterCurrencyAmount (0..1) <"The opposite currency amount. The counterCurrencyAmount element is only optional if averageStrike component is present, in all other cases this element must be populated.">

type FxAccrualLinearPayoffRegion extends FxAccrualPayoffRegion: <"A fixing region in which the payoff varies linearly with the fixing value.">

	fxExchangedCurrencyModel FxExchangedCurrencyModel (1..1)
	fxAccrualLinearPayoffRegionSequence FxAccrualLinearPayoffRegionSequence (0..1)
	averageStrike FxAverageStrike (0..1) <"Average Strike Forward: means the average of the Reference Spot Rate on each Business Day from and including the Calculation Start Date up to and including the Calculation End Date rounded to the precision decimal places.">
	fxAccrualRegionBoundModel FxAccrualRegionBoundModel (0..1)
	leverage FxAccrualLeverage (0..1) <"These structures define a leverage multiplier to the payoff amounts at settlement points.">
	payoffCap FxPayoffCap (0..*) <"The amount of gain on the client upside or firm upside is limited. If spot settles above the cap, or below the floor, the payout is adjusted to limit the gain. The adjustment may be made by varying the strike, or by maintaining the strike, but varying the payout notionals.">

	condition Choice:
		required choice fxAccrualLinearPayoffRegionSequence, averageStrike

type FxAccrualLinearPayoffRegionSequence:

	strike FxForwardStrikePrice (1..1) <"The rate of exchange between the two currencies.">
	counterCurrencyAmount NonNegativeAmountSchedule (0..1) <"The opposite currency amount. The counterCurrencyAmount element is only optional if averageStrike component is present or if the accrualRegion specifies the amount of counterCurrencyAmount to accrue, in all other cases this element must be populated.">

type FxAccrualOptionSequence:

	strike FxOptionStrikePrice (1..1) <"Defines the option strike price.">
	counterCurrencyAmount NonNegativeAmountSchedule (0..1) <"The opposite currency amount the amount which is not always deterministic.">

type FxAccrualPayoffRegion:

	id string (0..1)

type FxAccrualPayoffRegionReference extends Reference: <"Reference to a FX Accrual Payoff Region.">

	href string (1..1)

type FxAccrualRegion: <"Defines a region of spot rate where the notional for the settlement period accrues by the accrued amount per fixing each time the spot rate fixes within the region.">

	observableReference FxRateObservableReference (1..1) <"Identifies the FX rate used as the basis for the condition (the accrual region).">
	fxAccrualRegionBoundModel FxAccrualRegionBoundModel (1..1)
	fxAccrualRegionSequence0 FxAccrualRegionSequence0 (0..1)
	endDate date (0..1) <"Defines the end date of the observation period for the barrier. If ommitted, the last barrier observation point is understood to be the last fixing date in the fixing schedule.">
	accrualFactor Schedule (0..1) <"A multiplier applied to the notional amount per fixing of each currency to specify the amount accrued each time the spot rate fixes within the accrual region. If the accrualFactor is omitted, the factor is one.">
	fxAccrualRegionSequence1 FxAccrualRegionSequence1 (0..1)

	condition Choice0:
		optional choice fxAccrualRegionSequence0, endDate

	condition Choice1:
		optional choice accrualFactor, fxAccrualRegionSequence1

type FxAccrualRegionSequence0:

	startDate date (1..1) <"Defines the end date of the observation period for the barrier. If omitted, the last barrier observation point is understood to be the last fixing date in the fixing schedule.">
	endDate date (0..1) <"Defines the end date of the observation period for the barrier. If omitted, the last barrier observation point is understood to be the last fixing date in the fixing schedule.">

type FxAccrualRegionSequence1:

	notionalAmount NonNegativeAmountSchedule (1..1) <"Notional amount Schedule. The notional value of the product per settlement period. This number divided by the total number of fixings in the fixing schedule is the amount that is accrued at each fixing if the accrual factor is one.">
	counterCurrencyAmount FxCounterCurrencyAmount (0..1) <"The opposite currency amount. The \'counterCurrencyAmount\' element is supplied if the accrual process operates on specific amounts of both notional and counter currency within this accrual region.">

type FxAccrualRegionLowerBound:

	condition FxRegionLowerBoundDirectionEnum (1..1) <"The Lower Bound Direction. It only contains the AtOrAbove and Above values.">
	fxAccrualConditionLevelModel FxAccrualConditionLevelModel (1..1)

type FxAccrualRegionUpperBound:

	condition FxRegionUpperBoundDirectionEnum (1..1) <"The Upper Bound Direction. It only contains the AtOrBelow and Below values.">
	fxAccrualConditionLevelModel FxAccrualConditionLevelModel (1..1)

type FxAccrualSettlementPeriod extends SettlementPeriod:

	payoff FxAccrualSettlementPeriodPayoff (1..*) <"Payoff Region within the settlement period to link strike with the relevant payoff components.">
	accrualFactor number (0..1) <"Accrual factor for the settlement period.">
	barrier FxSettlementPeriodBarrier (0..1) <"The trigger rate of the Global Knockout Barrier for the settlement period.">
	accrualFixingDates SettlementPeriodFixingDates (1..1) <"Actual fixing dates within the fixing period.">

type FxAccrualSettlementPeriodPayoff: <"Payoff region">

	payoffRegionReference FxAccrualPayoffRegionReference (0..1) <"Optional reference to the Payoff Region in the parametric representation of the product.">
	fxAccrualSettlementPeriodPayoffSequence FxAccrualSettlementPeriodPayoffSequence (0..1)
	averageStrikeFixingDates SettlementPeriodFixingDates (0..1) <"Average Strike Fixing Dates.">
	averageRateFixingDates SettlementPeriodFixingDates (0..1) <"Average Rate Fixing Dates.">
	lowerBound number (0..1) <"Lower bound to the region.">
	upperBound number (0..1) <"Upper bound to the region.">
	leverage SettlementPeriodLeverage (0..1) <"Leverage within the period expressed as either an amount or ratio.">
	payoffCap number (0..1) <"The amount of gain on the client upside or firm upside is limited. If spot settles above the cap, or below the floor, the payout is adjusted to limit the gain. The adjustment may be made by varying the strike, or by maintaining the strike, but varying the payout notionals.">

	condition Choice:
		required choice fxAccrualSettlementPeriodPayoffSequence, averageStrikeFixingDates

type FxAccrualSettlementPeriodPayoffSequence:

	strike number (1..1) <"Strike for the settlement period.">
	counterCurrencyAmount number (0..1) <"Counter Currency Amount for the settlement period. Multiple Counter Currency Amount elements may appear if there are more than one strike in the settlement period.">

type FxAccrualSettlementPeriodSchedule:

	settlementPeriod FxAccrualSettlementPeriod (1..*) <"Defines each settlement period in the tabular/matrix representation of the product.">

type FxAccrualStrike extends Schedule: <"A shared type between accrual forwards and options where the FX accrual strike reference can point to.">

type FxAccrualStrikeReference extends Reference: <"Reference to a strike structure in FxAccrualForward or FxAccrualOption products.">

	href string (1..1)

type FxAccrualTrigger extends FxTriggerBase: <"Describes a european trigger applied to an FX digtal option.">

	informationSource InformationSource (0..*) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">
	id string (0..1) <"An anchor to be referenced from the accrual region bound.">

type FxAccrualTriggerReference extends Reference: <"Reference to a trigger structure in FxAccrualDigitalOption product.">

	href string (1..1)

type FxAdjustedDateAndDateAdjustments: <"Defines the expiry/observation schedule of the target.">

	dateAdjustments BusinessDayAdjustments (0..1) <"Date adjustments applied to the adjusted dates including the business day convention and the business centers. The date adjustments are as specified in the definitions.">
	adjustedDate date (1..1) <"List of schedule dates. These dates have been subject to adjustments based on the dateAdjustments structure.">

type FxAverageRate extends FxAveragingProcess:

type FxAverageStrike extends FxAveragingProcess:

	strikeAdjustment number (0..1) <"A layer an Adjustment on the top of the average of the fixings across the schedule.">

type FxAveragingProcess extends FxRateObservable: <"Accrual calculation process.">

	fixingSchedule FxWeightedFixingSchedule (1..1) <"Describes a parametric schedule of fixing dates.">
	averagingMethod FxAveragingMethodEnum (1..1)
	precision int(min: 0) (0..1) <"Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).">

type FxCrossRateObservable: <"A type that is used for including the currency exchange rates information used to cross between the traded currencies for non-base currency FX contracts.">

	quotedCurrencyPair QuotedCurrencyPair (1..1)
	informationSource FxInformationSource (1..1)

type FxExpiryDate extends FxAdjustedDateAndDateAdjustments: <"Defines the expiry date of the accrual. The date is adjusted, date adjustments may be provided, and also the expiry time.">

	expiryTime BusinessCenterTime (0..1) <"Time of expiration of each expiry date.">

type FxFixingObservation:

	date date (1..1) <"A specific date for which an observation against a particular rate will be made and will be used for subsequent computations.">
	weight number (0..1) <"An optional factor that can be used for weighting certain observation dates. Typically, firms will weight each date with a factor of 1 if there are standard, unweighted adjustments. If omitted, weight is defaulted to 1.">

type FxFixingSchedule: <"Describes a schedule of fixing dates as a parametric description, an explicit list of dates or both.">

	fxFixingScheduleSequence0 FxFixingScheduleSequence0 (0..1)
	fxFixingScheduleSequence1 FxFixingScheduleSequence1 (0..1)

	condition Choice:
		one-of

type FxFixingScheduleSequence0:

	dateAdjustments BusinessDayAdjustments (0..1) <"Date adjustments applied to the adjusted dates including the business day convention and the business centers.">
	fixingDate date (1..*) <"List of schedule dates. These dates have been subject to adjustments based on the dateAdjustments structure.">

type FxFixingScheduleSequence1:

	parametricScheduleModel ParametricScheduleModel (1..1)
	numberOfFixings int(min: 0) (0..1) <"The number of fixing points in the fixing schedule.">
	fixingDate date (0..*) <"An explicit list of dates in the schedule. Where a conflict every existed between parametric and explicit dates, the explicit list of dates would takes precedence.">

	condition Choice:
		optional choice numberOfFixings, fixingDate

type FxForwardStrikePrice extends FxAccrualStrike: <"A type that describes the rate of exchange between the two currencies of the leg of a deal.">

	quoteBasis QuoteBasisEnum (1..1) <"The Quoted Currency Pair that is used across the product.">

type FxOptionStrikePrice extends FxAccrualStrike: <"A type that describes the rate of exchange at which the option has been struck.">

	strikeQuoteBasis StrikeQuoteBasisEnum (1..1) <"The method by which the strike rate is quoted.">

type FxRateObservable:

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"FX rate to be observed. The Quoted Currency Pair that is used across the product.">
	informationSource FxInformationSource (0..1) <"Information source for fixing the exchange rate. It is the same for all fixing periods.">
	crossRate FxCrossRateObservable (0..*) <"Contains the currency exchange rates information used to cross between the traded currencies for non-base currency FX contracts.">
	id string (0..1)

	condition Choice:
		required choice informationSource, crossRate

type FxRateObservableReference extends Reference: <"Reference to an \"FxRateObservable\" structure.">

	href string (1..1)

type FxWeightedFixingSchedule: <"Describes a schedule of fixing dates as a parametric description, an explicit list of dates or both.">

	fxWeightedFixingScheduleSequence0 FxWeightedFixingScheduleSequence0 (0..1)
	fxWeightedFixingScheduleSequence1 FxWeightedFixingScheduleSequence1 (0..1)

	condition Choice:
		one-of

type FxWeightedFixingScheduleSequence0:

	dateAdjustments BusinessDayAdjustments (0..1) <"Date adjustments applied to the adjusted dates including the business day convention and the business centers.">
	fixing FxFixingObservation (1..*) <"List of schedule dates. These dates have been subject to adjustments based on the dateAdjustments structure.">

type FxWeightedFixingScheduleSequence1:

	parametricScheduleModel ParametricScheduleModel (1..1)
	numberOfFixings int(min: 0) (0..1) <"The number of fixing points in the fixing schedule.">
	fixing FxFixingObservation (0..*) <"An explicit list of dates in the schedule. Where a conflict every existed between parametric and explicit dates, the explicit list of dates would takes precedence.">

	condition Choice:
		optional choice numberOfFixings, fixing

type FxAccrualConditionLevelModel: <"Conditions can be expressed in different ways: as a specific level, or a reference to a strike, or a reference to an average strike in FxAccrualForward and FxAccrualOption, or a reference to a trigger in FxDigitalOption.">

	fxAccrualConditionLevelModelSequence FxAccrualConditionLevelModelSequence (0..1)
	strikeReference FxAccrualStrikeReference (0..1) <"Reference to a strike defined within the FxAccrualForward and FxAccrualOption products.">
	averageStrikeReference FxAccrualAverageStrikeReference (0..1) <"Reference to an average rate defined within the FxAccrualForward and FxAccrualOption products.">
	triggerReference FxAccrualTriggerReference (0..1) <"Reference to a trigger defined within the FxAccrualDigitalOption product.">

	condition Choice:
		one-of

type FxAccrualConditionLevelModelSequence:

	level FxLevel (1..1) <"Level expressed as a level.">
	quoteBasis QuoteBasisEnum (0..1) <"The Quoted Currency Pair that is used accross the product.">

type FxAccrualRegionBoundModel: <"Defines the boundaries of the accrual region. If an upper or lower barrier is not defined then it is understood that if the barrier is missing in the direction facing the strike then the region is bounded by the strike but excludes the strike; if the barrier is missing in the direction facing away from the strike then the accrual region is unbounded in that direction. If the region is bounded by the strike then a barrier should be included to define whether the region includes or excludes the strike. If accrual regions overlap, it is understood that if one is nested within another wider region, the nested region takes precedence over the spot range that it applies. If there is an overlap but no nesting then this is invalid and barriers must be used to unequivocally define the regions.">

	upperBound FxAccrualRegionUpperBound (0..1) <"Defines the upper bound of a payoff region.">
	fxAccrualRegionBoundModelSequence FxAccrualRegionBoundModelSequence (0..1)

	condition Choice:
		one-of

type FxAccrualRegionBoundModelSequence:

	lowerBound FxAccrualRegionLowerBound (1..1) <"Defines the lower bound of a payoff region.">
	upperBound FxAccrualRegionUpperBound (0..1) <"Defines the upper bound of a payoff region.">

type FxExpiryDateOrScheduleModel: <"Defines the expiry/observation date or schedule of the accrual product.">

	expiryDate FxExpiryDate (0..1) <"Defines the expiry of a single period accrual forward FX transaction.">
	expirySchedule FxExpirySchedule (0..1) <"The parameters for defining a schedule of expiry periods for an accrual forward FX transaction.">

	condition Choice:
		one-of

type FxSettlementDateOrScheduleModel: <"Defines the settlement/payment date or schedule of the accrual product.">

	settlementDate FxAdjustedDateAndDateAdjustments (0..1) <"The date on which settlement takes place for a settlement period.">
	settlementSchedule FxSettlementSchedule (0..1) <"The parameters for defining a schedule of settlement periods for a accrual forward FX transaction.">

	condition Choice:
		one-of

type EquityAmericanExercise extends SharedAmericanExercise: <"A type for defining exercise procedures associated with an American style exercise of an equity option. This entity inherits from the type SharedAmericanExercise.">

	latestExerciseTimeType TimeTypeEnum (0..1) <"The latest time of day at which the equity option can be exercised, for example the official closing time of the exchange.">
	equityExpirationModel EquityExpirationModel (1..1)
	equityMultipleExercise EquityMultipleExercise (0..1) <"The presence of this element indicates that the option may be exercised on different days. It is not applicable to European options.">

type EquityBermudaExercise extends SharedAmericanExercise: <"A type for defining exercise procedures associated with a Bermuda style exercise of an equity option. The term Bermuda is adopted in FpML for consistency with the ISDA Definitions.">

	bermudaExerciseDates DateList (1..1) <"List of Exercise Dates for a Bermuda option.">
	latestExerciseTimeType TimeTypeEnum (0..1) <"The latest time of day at which the equity option can be exercised, for example the official closing time of the exchange.">
	equityExpirationModel EquityExpirationModel (1..1)
	equityMultipleExercise EquityMultipleExercise (0..1) <"The presence of this element indicates that the option may be exercised on different days. It is not applicable to European options.">

type EquityDerivativeBase extends Product: <"A type for defining the common features of equity derivatives.">

	buyerSellerModel BuyerSellerModel (1..1)
	optionType EquityOptionTypeEnum (1..1) <"The type of option transaction.">
	equityEffectiveDate date (0..1) <"Effective date for a forward starting option.">
	underlyer Underlyer (1..1) <"Specifies the underlying component, which can be either one or many and consists in either equity, index or convertible bond component, or a combination of these.">
	notional NonNegativeMoney (0..1) <"The notional amount.">
	equityExercise EquityExerciseValuationSettlement (1..1) <"The parameters for defining how the equity option can be exercised, how it is valued and how it is settled.">
	featureModel FeatureModel (0..1)
	strategyFeature StrategyFeature (0..1) <"A equity option simple strategy feature.">

type EquityDerivativeLongFormBase extends EquityDerivativeBase: <"type for defining the common features of equity derivatives.">

	dividendConditions DividendConditions (0..1)
	methodOfAdjustment MethodOfAdjustmentEnum (1..1) <"Defines how adjustments will be made to the contract should one or more of the extraordinary events occur.">
	extraordinaryEvents ExtraordinaryEvents (1..1) <"Where the underlying is shares, specifies events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.">

type EquityDerivativeShortFormBase extends EquityDerivativeBase: <"A type for defining short form equity option basic features.">

	strike EquityStrike (1..1) <"Defines whether it is a price or level at which the option has been, or will be, struck.">
	spotPrice NonNegativeDecimal (0..1) <"The price per share, index or basket observed on the trade or effective date.">
	numberOfOptions NonNegativeDecimal (1..1) <"The number of options comprised in the option transaction.">
	equityPremium EquityPremium (1..1) <"The equity option premium payable by the buyer to the seller.">

type EquityEuropeanExercise extends Exercise: <"A type for defining exercise procedures associated with a European style exercise of an equity option.">

	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.">
	equityExpirationModel EquityExpirationModel (1..1)

type EquityExerciseValuationSettlement: <"A type for defining exercise procedures for equity options.">

	equityEuropeanExercise EquityEuropeanExercise (0..1) <"The parameters for defining the expiration date and time for a European style equity option.">
	equityAmericanExercise EquityAmericanExercise (0..1) <"The parameters for defining the exercise period for an American style equity option together with the rules governing the quantity of the underlying that can be exercised on any given exercise date.">
	equityBermudaExercise EquityBermudaExercise (0..1) <"The parameters for defining the exercise period for an Bermuda style equity option together with the rules governing the quantity of the underlying that can be exercised on any given exercise date.">
	equityExerciseValuationSettlementSequence EquityExerciseValuationSettlementSequence (0..1)
	prePayment PrePayment (0..1) <"Prepayment features for Forward.">
	equityValuation EquityValuation (1..1) <"The parameters for defining when valuation of the underlying takes place.">
	settlementDate AdjustableOrRelativeDate (0..1) <"Date on which settlement of option premiums will occur.">
	settlementCurrency Currency (1..1) <"The currency in which a cash settlement for non-deliverable forward and non-deliverable options.">
	settlementPriceSource SettlementPriceSource (0..1)
	settlementType SettlementTypeEnum (1..1) <"How the option will be settled.">
	settlementMethodElectionDate AdjustableOrRelativeDate (0..1)
	settlementMethodElectingPartyReference PartyReference (0..1)
	settlementPriceDefaultElection SettlementPriceDefaultElection (0..1)

	condition Choice0:
		required choice equityEuropeanExercise, equityAmericanExercise , equityBermudaExercise

	condition Choice1:
		required choice equityExerciseValuationSettlementSequence, prePayment

type EquityExerciseValuationSettlementSequence:

	automaticExercise boolean (1..1) <"If true then each option not previously exercised will be deemed to be exercised at the expiration time on the expiration date without service of notice unless the buyer notifies the seller that it no longer wishes this to occur.">
	makeWholeProvisions MakeWholeProvisions (0..1) <"Provisions covering early exercise of option.">

type EquityMultipleExercise: <"A type for defining the multiple exercise provisions of an American or Bermuda style equity option.">

	integralMultipleExercise PositiveDecimal (0..1) <"When multiple exercise is applicable and this element is present it specifies that the number of options that can be exercised on a given exercise date must either be equal to the value of this element or be an integral multiple of it.">
	minimumNumberOfOptions NonNegativeDecimal (1..1) <"When multiple exercise is applicable this element specifies the minimum number of options that can be exercised on a given exercise date. If this element is not present then the minimum number is deemed to be 1. Its value can be a fractional number as a result of corporate actions.">
	maximumNumberOfOptions NonNegativeDecimal (1..1) <"When multiple exercise is applicable this element specifies the maximum number of options that can be exercised on a given exercise date. If this element is not present then the maximum number is deemed to be the same as the number of options. Its value can be a fractional number as a result of corporate actions.">

type PrePayment extends PaymentBase: <"A type for defining PrePayment.">

	payerReceiverModel PayerReceiverModel (1..1)
	prePayment boolean (1..1)
	prePaymentAmount NonNegativeMoney (1..1)
	prePaymentDate AdjustableDate (1..1)

type EquityExpirationModel: <"Choice between expiration expressed as symbolic and optional literal time, or using a determination method.">

	equityExpirationModelSequence EquityExpirationModelSequence (0..1)
	expirationTimeDetermination DeterminationMethod (0..1) <"Expiration time determination method.">

	condition Choice:
		one-of

type EquityExpirationModelSequence:

	equityExpirationTimeType TimeTypeEnum (1..1) <"The time of day at which the equity option expires, for example the official closing time of the exchange.">
	equityExpirationTime BusinessCenterTime (0..1) <"The specific time of day at which the equity option expires.">

type AdditionalFixedPayments:

	interestShortfallReimbursement boolean (0..1) <"An additional Fixed Payment Event. Corresponds to the payment by or on behalf of the Issuer of an actual interest amount in respect to the reference obligation that is greater than the expected interest amount. ISDA 2003 Term: Interest Shortfall Reimbursement.">
	principalShortfallReimbursement boolean (0..1) <"An additional Fixed Payment Event. Corresponds to the payment by or on behalf of the Issuer of an actual principal amount in respect to the reference obligation that is greater than the expected principal amount. ISDA 2003 Term: Principal Shortfall Reimbursement.">
	writedownReimbursement boolean (0..1) <"An Additional Fixed Payment. Corresponds to the payment by or on behalf of the issuer of an amount in respect to the reference obligation in reduction of the prior writedowns. ISDA 2003 Term: Writedown Reimbursement.">

type AdditionalTerm:

	value Scheme (1..1)
	additionalTermScheme NonEmptyURI (0..1)

type AdjustedPaymentDates:

	adjustedPaymentDate date (1..1) <"The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but my be specified to allow the fee structure to also serve as a cashflow type component (all dates the the Cashflows type are adjusted payment dates).">
	paymentAmount Money (1..1) <"The currency amount of the payment.">

type BasketReferenceInformation: <"CDS Basket Reference Information">

	basketIdentifierModel BasketIdentifierModel (0..1)
	referencePool ReferencePool (1..1) <"This element contains all the reference pool items to define the reference entity and reference obligation(s) in the basket">
	basketReferenceInformationSequence BasketReferenceInformationSequence (0..1)
	tranche Tranche (0..1) <"This element contains CDS tranche terms.">

	condition Choice:
		optional choice basketReferenceInformationSequence, tranche

type BasketReferenceInformationSequence:

	nthToDefault int(min: 1) (1..1) <"N th reference obligation to default triggers payout.">
	mthToDefault int(min: 1) (0..1) <"M th reference obligation to default to allow representation of N th to M th defaults.">

type CalculationAmount extends Money:

	step Step (0..*) <"A schedule of step date and value pairs. On each step date the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">

type CashSettlementTerms extends SettlementTerms:

	valuationDate ValuationDate (0..1) <"The number of business days after conditions to settlement have been satisfied when the calculation agent obtains a price quotation on the Reference Obligation for purposes of cash settlement. There may be one or more valuation dates. This is typically specified if the cash settlement amount is not a fixed amount. ISDA 2003 Term: Valuation Date">
	valuationTime BusinessCenterTime (0..1) <"The time of day in the specified business center when the calculation agent seeks quotations for an amount of the reference obligation for purposes of cash settlement. ISDA 2003 Term: Valuation Time">
	quotationMethod QuotationRateTypeEnum (0..1) <"The type of price quotations to be requested from dealers when determining the market value of the reference obligation for purposes of cash settlement. For example, Bid, Offer or Mid-market. ISDA 2003 Term: Quotation Method">
	quotationAmount Money (0..1) <"In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the quotation amount specifies an upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount equal to the floating rate payer calculation amount. ISDA 2003 Term: Quotation Amount">
	minimumQuotationAmount Money (0..1) <"In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the minimum quotation amount specifies a minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD 1,000,000 (or its equivalent in the relevant obligation currency) or the quotation amount. ISDA 2003 Term: Minimum Quotation Amount">
	dealer String (0..*) <"A dealer from whom quotations are obtained by the calculation agent on the reference obligation for purposes of cash settlement. ISDA 2003 Term: Dealer">
	cashSettlementBusinessDays int(min: 0) (0..1) <"The number of business days used in the determination of the cash settlement payment date. If a cash settlement amount is specified, the cash settlement payment date will be this number of business days following the calculation of the final price. If a cash settlement amount is not specified, the cash settlement payment date will be this number of business days after all conditions to settlement are satisfied. ISDA 2003 Term: Cash Settlement Date">
	fixedRecoveryModel FixedRecoveryModel (0..1)
	fixedSettlement boolean (0..1) <"Used for Recovery Lock, to indicate whether fixed Settlement is Applicable or Not Applicable. If Buyer fails to deliver an effective Notice of Physical Settlement on or before the Buyer NOPS Cut-off Date, and If Seller fails to deliver an effective Seller NOPS on or before the Seller NOPS Cut-off Date, then either: (a) if Fixed Settlement is specified in the related Confirmation as not applicable, then the Seller NOPS Cut-off Date shall be the Termination Date; or (b) if Fixed Settlement is specified in the related Confirmation as applicable, then: (i) if the Fixed Settlement Amount is a positive number, Seller shall, subject to Section 3.1 (except for the requirement of satisfaction of the Notice of Physical Settlement Condition to Settlement), pay the Fixed Settlement Amount to Buyer on the Fixed Settlement Payment Date; and (ii) if the Fixed Settlement Amount is a negative number, Buyer shall, subject to Section 3.1 (except for the requirement of satisfaction of the Notice of Physical Settlement Condition to Settlement), pay the absolute value of the Fixed Settlement Amount to Seller on the Fixed Settlement Payment Date.">
	accruedInterest boolean (0..1) <"Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest">
	valuationMethod ValuationMethodEnum (0..1) <"The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement. (ISDA 2003 Term: Valuation Method). For example, Market, Highest etc.">

type CreditDefaultSwapChoice:

	cashSettlementTerms CashSettlementTerms (0..1) <"This element contains all the ISDA terms relevant to cash settlement for when cash settlement is applicable. ISDA 2003 Term: Cash Settlement">
	physicalSettlementTerms PhysicalSettlementTerms (0..1) <"This element contains all the ISDA terms relevant to physical settlement for when physical settlement is applicable. ISDA 2003 Term: Physical Settlement">

	condition Choice:
		optional choice cashSettlementTerms, physicalSettlementTerms

type CreditOptionStrike: <"A complex type to specify the strike of a credit swaption or a credit default swap option.">

	spread number (0..1) <"The strike of a credit default swap option or credit swaption when expressed as a spread per annum.">
	price number (0..1) <"The strike of a credit default swap option or credit swaption when expressed as in reference to the price of the underlying obligation(s) or index.">
	strikeReference FixedRateReference (0..1) <"The strike of a credit default swap option or credit swaption when expressed in reference to the spread of the underlying swap (typical practice in the case of single name swaps).">

	condition Choice:
		one-of

type DeliverableObligations:

	accruedInterest boolean (0..1) <"Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest">
	category ObligationCategoryEnum (0..1) <"Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category">
	notSubordinated boolean (0..1) <"An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated">
	specifiedCurrency SpecifiedCurrency (0..1) <"An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency">
	notSovereignLender boolean (0..1) <"An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender">
	notDomesticCurrency NotDomesticCurrency (0..1) <"An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency">
	notDomesticLaw boolean (0..1) <"An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law">
	listed boolean (0..1) <"An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed">
	notContingent boolean (0..1) <"A deliverable obligation characteristic. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent">
	notDomesticIssuance boolean (0..1) <"An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance">
	assignableLoan PCDeliverableObligationCharac (0..1) <"A deliverable obligation characteristic. A loan that is freely assignable to a bank or financial institution without the consent of the Reference Entity or the guarantor, if any, of the loan (or the consent of the applicable borrower if a Reference Entity is guaranteeing the loan) or any agent. ISDA 2003 Term: Assignable Loan">
	consentRequiredLoan PCDeliverableObligationCharac (0..1) <"A deliverable obligation characteristic. A loan that is capable of being assigned with the consent of the Reference Entity or the guarantor, if any, of the loan or any agent. ISDA 2003 Term: Consent Required Loan">
	directLoanParticipation LoanParticipation (0..1) <"A deliverable obligation characteristic. A loan with a participation agreement whereby the buyer is capable of creating, or procuring the creation of, a contractual right in favour of the seller that provides the seller with recourse to the participation seller for a specified share in any payments due under the relevant loan which are received by the participation seller. ISDA 2003 Term: Direct Loan Participation">
	transferable boolean (0..1) <"A deliverable obligation characteristic. An obligation that is transferable to institutional investors without any contractual, statutory or regulatory restrictions. ISDA 2003 Term: Transferable">
	maximumMaturity Period (0..1) <"A deliverable obligation characteristic. An obligation that has a remaining maturity from the Physical Settlement Date of not greater than the period specified. ISDA 2003 Term: Maximum Maturity">
	acceleratedOrMatured boolean (0..1) <"A deliverable obligation characteristic. An obligation at time of default is due to mature and due to be repaid, or as a result of downgrade/bankruptcy is due to be repaid as a result of an acceleration clause. ISDA 2003 Term: Accelerated or Matured">
	notBearer boolean (0..1) <"A deliverable obligation characteristic. Any obligation that is not a bearer instrument. This applies to Bonds only and is meant to avoid tax, fraud and security/delivery provisions that can potentially be associated with Bearer Bonds. ISDA 2003 Term: Not Bearer">
	fullFaithAndCreditObLiability boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability">
	generalFundObligationLiability boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability">
	revenueObligationLiability boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability">
	indirectLoanParticipation LoanParticipation (0..1) <"ISDA 1999 Term: Indirect Loan Participation. NOTE: Only applicable as a deliverable obligation under ISDA Credit 1999.">
	excluded String (0..1) <"A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations">
	othReferenceEntityObligations String (0..1) <"This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity">

	condition Choice:
		optional choice fullFaithAndCreditObLiability, generalFundObligationLiability , revenueObligationLiability

type EntityType: <"Defines a coding scheme of the entity types defined in the ISDA First to Default documentation.">

	value Scheme (1..1)
	entityTypeScheme NonEmptyURI (0..1)

type FeeLeg extends Leg:

	feeLegChoice FeeLegChoice (0..1)
	periodicPayment PeriodicPayment (0..1) <"Specifies a periodic schedule of fixed amounts that are payable by the buyer to the seller on the fixed rate payer payment dates. The fixed amount to be paid on each payment date can be specified in terms of a known currency amount or as an amount calculated on a formula basis by reference to a per annum fixed rate. The applicable business day convention and business day for adjusting any fixed rate payer payment date if it would otherwise fall on a day that is not a business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term:">
	marketFixedRate number (0..1) <"An optional element that only has meaning in a credit index trade. This element contains the credit spread (\"fair value\") at which the trade was executed. Unlike the fixedRate of an index, the marketFixedRate varies over the life of the index depending on market conditions. The marketFixedRate is the price of the index as quoted by trading desks.">
	paymentDelay boolean (0..1) <"Applicable to CDS on MBS to specify whether payment delays are applicable to the fixed Amount. RMBS typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap. CMBS do not, on the other hand, with both payment dates being on the 25th of each month.">
	initialPoints number (0..1) <"An optional element that contains the up-front points expressed as a percentage of the notional. An initialPoints value of 5% would be represented as 0.05. The initialPoints element is an alternative to marketFixedRate in quoting the traded level of a trade. When initialPoints is used, the traded level is the sum of fixedRate and initialPoints. The initialPoints is one of the items that are factored into the initialPayment calculation and is payable by the Buyer to the Seller. Note that initialPoints and marketFixedRate may both be present in the same document when both implied values are desired.">
	marketPrice NonNegativeDecimal (0..1) <"An optional element that only has meaning in a credit index trade. This element contains the price at which the trade was executed and is used instead of marketFixedRate on credit trades on certain indicies which are quoted using a price rather than a spread.">
	quotationStyle QuotationStyleEnum (0..1) <"The type of quotation that was used between the trading desks. The purpose of this element is to indicate the actual quotation style that was used to quote this trade which may not be apparent when both marketFixedRate and initialPoints are included in the document. When quotationStyle is ‘PointsUpFront’, the initialPoints element should be populated. When quotationStyle is ‘TradedSpread’, the marketFixedRate element should be populated.">

	condition Choice:
		required choice feeLegChoice, periodicPayment

type FeeLegChoice:

	feeLegChoiceSequence0 FeeLegChoiceSequence0 (0..1)
	feeLegChoiceSequence1 FeeLegChoiceSequence1 (0..1)

	condition Choice:
		one-of

type FeeLegChoiceSequence0:

	initialPayment InitialPayment (1..1) <"Specifies a single fixed payment that is payable by the payer to the receiver on the initial payment date. The fixed payment to be paid is specified in terms of a known currency amount. This element should be used for CDS Index trades, Standard CDS trades, and can be used for CDS trades where it is necessary to represent a payment from Seller to Buyer. For CDS trades where a payment is to be made from Buyer to Seller the feeLeg/singlePayment structure must be used.">
	periodicPayment PeriodicPayment (0..1) <"Specifies a periodic schedule of fixed amounts that are payable by the buyer to the seller on the fixed rate payer payment dates. The fixed amount to be paid on each payment date can be specified in terms of a known currency amount or as an amount calculated on a formula basis by reference to a per annum fixed rate. The applicable business day convention and business day for adjusting any fixed rate payer payment date if it would otherwise fall on a day that is not a business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term:">

type FeeLegChoiceSequence1:

	singlePayment SinglePayment (1..*) <"Specifies a single fixed amount that is payable by the buyer to the seller on the fixed rate payer payment date. The fixed amount to be paid is specified in terms of a known currency amount.">
	periodicPayment PeriodicPayment (0..1) <"Specifies a periodic schedule of fixed amounts that are payable by the buyer to the seller on the fixed rate payer payment dates. The fixed amount to be paid on each payment date can be specified in terms of a known currency amount or as an amount calculated on a formula basis by reference to a per annum fixed rate. The applicable business day convention and business day for adjusting any fixed rate payer payment date if it would otherwise fall on a day that is not a business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term:">

type FixedAmountCalculation:

	calculationAmount CalculationAmount (0..1) <"The notional amount used in the calculation of fixed amounts where an amount is calculated on a formula basis, i.e. fixed amount = fixed rate payer calculation amount x fixed rate x fixed rate day count fraction. ISDA 2003 Term: Fixed Rate Payer Calculation Amount.">
	fixedRate FixedRate (1..1) <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">
	dayCountFraction DayCountFraction (0..1) <"The day count fraction. ISDA 2003 Term: Fixed Rate Day Count Fraction.">

type FixedRate: <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">

	value number (1..1)
	id string (0..1)

type FixedRateReference extends Reference:

	href string (1..1)

type FloatingAmountCalculation:

	calculationAmount CalculationAmount (0..1) <"The notional amount used in the calculation of fixed amounts where an amount is calculated on a formula basis, i.e. fixed amount = fixed rate payer calculation amount x fixed rate x fixed rate day count fraction. ISDA 2003 Term: Fixed Rate Payer Calculation Amount.">
	floatingRate FloatingRateCalculation (1..1) <"The calculation period floating rate.">
	dayCountFraction DayCountFraction (0..1) <"The day count fraction. ISDA 2003 Term: Fixed Rate Day Count Fraction.">
	initialFixingDate date (0..1)
	finalFixingDate AdjustableDate (0..1)

type FloatingAmountEvents:

	failureToPayPrincipal boolean (0..1) <"A floating rate payment event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.">
	interestShortfall InterestShortFall (0..1) <"A floating rate payment event. With respect to any Reference Obligation Payment Date, either (a) the non-payment of an Expected Interest Amount or (b) the payment of an Actual Interest Amount that is less than the Expected Interest Amount. ISDA 2003 Term: Interest Shortfall.">
	writedown boolean (0..1) <"A floating rate payment event. Results from the fact that the underlyer writes down its outstanding principal amount. ISDA 2003 Term: Writedown.">
	impliedWritedown boolean (0..1) <"A floating rate payment event. Results from the fact that losses occur to the underlying instruments that do not result in reductions of the outstanding principal of the reference obligation.">
	floatingAmountProvisions FloatingAmountProvisions (0..1) <"Specifies the floating amount provisions associated with the floatingAmountEvents.">
	additionalFixedPayments AdditionalFixedPayments (0..1) <"Specifies the events that will give rise to the payment a additional fixed payments.">

type FloatingAmountProvisions:

	wacCapInterestProvision boolean (0..1) <"As specified by the ISDA Supplement for use with trades on mortgage-backed securities, \"WAC Cap\" means a weighted average coupon or weighted average rate cap provision (however defined in the Underlying Instruments) of the Underlying Instruments that limits, increases or decreases the interest rate or interest entitlement, as set out in the Underlying Instruments on the Effective Date without regard to any subsequent amendment The presence of the element with value set to \'true\' signifies that the provision is applicable. From a usage standpoint, this provision is typically applicable in the case of CMBS and not applicable in case of RMBS trades.">
	stepUpProvision boolean (0..1) <"As specified by the ISDA Standard Terms Supplement for use with trades on mortgage-backed securities. The presence of the element with value set to \'true\' signifies that the provision is applicable. If applicable, the applicable step-up terms are specified as part of that ISDA Standard Terms Supplement. From a usage standpoint, this provision is typically applicable in the case of RMBS and not applicable in case of CMBS trades.">

type GeneralTerms:

	effectiveDate AdjustableDate2 (0..1) <"The first day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention. ISDA 2003 Term: Effective Date.">
	scheduledTerminationDate AdjustableDate2 (0..1) <"The scheduled date on which the credit protection will lapse. This day may be subject to adjustment in accordance with a business day convention. ISDA 2003 Term: Scheduled Termination Date.">
	buyerSellerModel BuyerSellerModel (1..1)
	dateAdjustments BusinessDayAdjustments (0..1) <"ISDA 2003 Terms: Business Day and Business Day Convention.">
	referenceInformation ReferenceInformation (0..1) <"This element contains all the terms relevant to defining the reference entity and reference obligation(s).">
	indexReferenceInformation IndexReferenceInformation (0..1) <"This element contains all the terms relevant to defining the Credit DefaultSwap Index.">
	basketReferenceInformation BasketReferenceInformation (0..1) <"This element contains all the terms relevant to defining the Credit Default Swap Basket.">
	additionalTerm AdditionalTerm (0..*) <"This element is used for representing information contained in the Additional Terms field of the 2003 Master Credit Derivatives confirm.">
	substitution boolean (0..1) <"Value of this element set to \'true\' indicates that substitution is applicable.">
	modifiedEquityDelivery boolean (0..1) <"Value of this element set to \'true\' indicates that modified equity delivery is applicable.">

	condition Choice:
		required choice referenceInformation, indexReferenceInformation , basketReferenceInformation

type IndexAnnexSource:

	value Scheme (1..1)
	indexAnnexSourceScheme NonEmptyURI (0..1)

type IndexId:

	value NonEmptyScheme (1..1)
	indexIdScheme NonEmptyURI (0..1)

type IndexName:

	value NonEmptyScheme (1..1)
	indexNameScheme NonEmptyURI (0..1)

type IndexReferenceInformation: <"A type defining a Credit Default Swap Index.">

	indexReferenceInformationSequence0 IndexReferenceInformationSequence0 (0..1)
	indexReferenceInformationSequence1 IndexReferenceInformationSequence1 (0..1)
	indexSeries int(min: 1) (0..1) <"A CDS index series identifier, e.g. 1, 2, 3 etc.">
	indexAnnexVersion int(min: 1) (0..1) <"A CDS index series version identifier, e.g. 1, 2, 3 etc.">
	indexAnnexDate date (0..1) <"A CDS index series annex date.">
	indexAnnexSource IndexAnnexSource (0..1) <"A CDS index series annex source.">
	excludedReferenceEntity LegalEntity (0..*) <"Excluded reference entity.">
	tranche Tranche (0..1) <"This element contains CDS tranche terms.">
	settledEntityMatrix SettledEntityMatrix (0..1) <"Used to specify the Relevant Settled Entity Matrix when there are settled entities at the time of the trade.">
	indexReferenceInformationSequence2 IndexReferenceInformationSequence2 (0..1)
	id string (0..1)

	condition Choice:
		required choice indexReferenceInformationSequence0, indexReferenceInformationSequence1

type IndexReferenceInformationSequence0:

	indexName IndexName (1..1) <"The name of the index expressed as a free format string. FpML does not define usage rules for this element.">
	indexId IndexId (0..*) <"A CDS index identifier (e.g. RED pair code).">

type IndexReferenceInformationSequence1:

	indexId IndexId (1..*) <"A CDS index identifier (e.g. RED pair code).">

type IndexReferenceInformationSequence2:

	indexFactor RestrictedPercentage (0..1) <"Index Factor is the index version factor or percent, expressed as an absolute decimal value between 0 and 1, that multiplied by the original notional amount yields the notional amount covered by the seller of protection.">
	seniority CreditSeniority (0..1) <"Seniority of debt instruments comprising the index.">

type InitialPayment extends PaymentBase:

	payerReceiverModel PayerReceiverModel (1..1)
	adjustablePaymentDate date (0..1) <"A fixed payment date that shall be subject to adjustment in accordance with the applicable business day convention if it would otherwise fall on a day that is not a business day. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component.">
	adjustedPaymentDate date (0..1) <"The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component.">
	paymentAmount Money (1..1) <"A fixed payment amount.">

type InterestShortFall:

	interestShortfallCap InterestShortfallCapEnum (1..1) <"Specifies the nature of the interest Shortfall cap (i.e. Fixed Cap or Variable Cap) in the case where it is applicable. ISDA 2003 Term: Interest Shortfall Cap.">
	compounding boolean (1..1)
	rateSource FloatingRateIndex (0..1) <"The rate source in the case of a variable cap.">

type LoanParticipation extends PCDeliverableObligationCharac:

	qualifyingParticipationSeller String (0..1) <"If Direct Loan Participation is specified as a deliverable obligation characteristic, this specifies any requirements for the Qualifying Participation Seller. The requirements may be listed free-form. ISDA 2003 Term: Qualifying Participation Seller">

type MatrixSource:

	value Scheme (1..1)
	settledEntityMatrixSourceScheme NonEmptyURI (0..1)

type MultipleValuationDates extends SingleValuationDate:

	businessDaysThereafter int(min: 1) (0..1) <"The number of business days between successive valuation dates when multiple valuation dates are applicable for cash settlement. ISDA 2003 Term: Business Days thereafter">
	numberValuationDates int(min: 1) (0..1) <"Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies (a) the number of applicable valuation dates, and (b) the number of business days after satisfaction of all conditions to settlement when the first such valuation date occurs, and (c) the number of business days thereafter of each successive valuation date. ISDA 2003 Term: Multiple Valuation Dates">

type NotDomesticCurrency:

	applicable boolean (1..1) <"Indicates whether the not domestic currency provision is applicable.">
	currency Currency (0..1) <"An explicit specification of the domestic currency.">

type Obligations:

	category ObligationCategoryEnum (1..1) <"Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category">
	notSubordinated boolean (0..1) <"An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated">
	specifiedCurrency SpecifiedCurrency (0..1) <"An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency">
	notSovereignLender boolean (0..1) <"An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender">
	notDomesticCurrency NotDomesticCurrency (0..1) <"An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency">
	notDomesticLaw boolean (0..1) <"An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law">
	listed boolean (0..1) <"An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed">
	notDomesticIssuance boolean (0..1) <"An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance">
	fullFaithAndCreditObLiability boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability">
	generalFundObligationLiability boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability">
	revenueObligationLiability boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability">
	notContingent boolean (0..1) <"NOTE: Only allowed as an obligation charcteristic under ISDA Credit 1999. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent">
	excluded String (0..1) <"A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations">
	othReferenceEntityObligations String (0..1) <"This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity">
	designatedPriority Lien (0..1) <"Applies to Loan CDS, to indicate what lien level is appropriate for a deliverable obligation. Applies to European Loan CDS, to indicate the Ranking of the obligation. Example: a 2nd lien Loan CDS would imply that the deliverable obligations are 1st or 2nd lien loans.">
	cashSettlementOnly boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Cash Settlement Only.">
	deliveryOfCommitments boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Delivery of Commitments.">
	continuity boolean (0..1) <"An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Continuity.">

	condition Choice:
		optional choice fullFaithAndCreditObLiability, generalFundObligationLiability , revenueObligationLiability

type PCDeliverableObligationCharac:

	applicable boolean (1..1) <"Indicates whether the provision is applicable.">
	partialCashSettlement boolean (0..1) <"Specifies whether either \'Partial Cash Settlement of Assignable Loans\', \'Partial Cash Settlement of Consent Required Loans\' or \'Partial Cash Settlement of Participations\' is applicable. If this element is specified and Assignable Loan is a Deliverable Obligation Chracteristic, any Assignable Loan that is deliverable, but where a non-receipt of Consent by the Physical Settlement Date has occurred, the Loan can be cash settled rather than physically delivered. If this element is specified and Consent Required Loan is a Deliverable Obligation Characterisitc, any Consent Required Loan that is deliverable, but where a non-receipt of Consent by the Physical Settlement Date has occurred, the Loan can be cash settled rather than physically delivered. If this element is specified and Direct Loan Participation is a Deliverable Obligation Characterisitic, any Participation that is deliverable, but where this participation has not been effected (has not come into effect) by the Physical Settlement Date, the participation can be cash settled rather than physically delivered.">

type PeriodicPayment extends PaymentBase:

	paymentFrequency Period (0..1) <"The time interval between regular fixed rate payer payment dates.">
	firstPeriodStartDate date (0..1) <"The start date of the initial calculation period if such date is not equal to the trade’s effective date. It must only be specified if it is not equal to the effective date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement).">
	firstPaymentDate date (0..1) <"The first unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). ISDA 2003 Term: Fixed Rate Payer Payment Date">
	lastRegularPaymentDate date (0..1) <"The last regular unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). This element should only be included if there is a final payment stub, i.e. where the last regular unadjusted fixed rate payer payment date is not equal to the scheduled termination date. ISDA 2003 Term: Fixed Rate Payer Payment Date">
	rollConvention RollConventionEnum (0..1) <"Used in conjunction with the effectiveDate, scheduledTerminationDate, firstPaymentDate, lastRegularPaymentDate and paymentFrequency to determine the regular fixed rate payer payment dates.">
	fixedAmount Money (0..1) <"A fixed payment amount. ISDA 2003 Term: Fixed Amount">
	fixedAmountCalculation FixedAmountCalculation (0..1) <"This element contains all the terms relevant to calculating a fixed amount where the fixed amount is calculated by reference to a per annum fixed rate. There is no corresponding ISDA 2003 Term. The equivalent is Sec 5.1 \"Calculation of Fixed Amount\" but this in itself is not a defined Term.">
	floatingAmountCalculation FloatingAmountCalculation (0..1)
	adjustedPaymentDates AdjustedPaymentDates (0..*) <"An optional cashflow-like structure allowing the equivalent representation of the periodic fixed payments in terms of a series of adjusted payment dates and amounts. This is intended to support application integration within an organisation and is not intended for use in inter-firm communication or confirmations. ISDA 2003 Term: Fixed Rate Payer Payment Date">

	condition Choice:
		required choice fixedAmount, fixedAmountCalculation , floatingAmountCalculation

type PhysicalSettlementPeriod:

	businessDaysNotSpecified boolean (0..1) <"An explicit indication that a number of business days are not specified and therefore ISDA fallback provisions should apply.">
	businessDays int(min: 0) (0..1) <"A number of business days. Its precise meaning is dependant on the context in which this element is used. ISDA 2003 Term: Business Day">
	maximumBusinessDays int(min: 0) (0..1) <"A maximum number of business days. Its precise meaning is dependant on the context in which this element is used. Intended to be used to limit a particular ISDA fallback provision.">

	condition Choice:
		one-of

type PhysicalSettlementTerms extends SettlementTerms:

	physicalSettlementPeriod PhysicalSettlementPeriod (0..1) <"The number of business days used in the determination of the physical settlement date. The physical settlement date is this number of business days after all applicable conditions to settlement are satisfied. If a number of business days is not specified fallback provisions apply for determining the number of business days. If Section 8.5/8.6 of the 1999/2003 ISDA Definitions are to apply the businessDaysNotSpecified element should be included. If a specified number of business days are to apply these should be specified in the businessDays element. If Section 8.5/8.6 of the 1999/2003 ISDA Definitions are to apply but capped at a maximum number of business days then the maximum number should be specified in the maximumBusinessDays element. ISDA 2003 Term: Physical Settlement Period">
	deliverableObligations DeliverableObligations (0..1) <"This element contains all the ISDA terms relevant to defining the deliverable obligations.">
	escrow boolean (0..1) <"If this element is specified and set to \'true\', indicates that physical settlement must take place through the use of an escrow agent. (For Canadian counterparties this is always \"Not Applicable\". ISDA 2003 Term: Escrow.">
	sixtyBusinessDaySettlementCap boolean (0..1) <"If this element is specified and set to \'true\', for a transaction documented under the 2003 ISDA Credit Derivatives Definitions, has the effect of incorporating the language set forth below into the confirmation. The section references are to the 2003 ISDA Credit Derivatives Definitions. Notwithstanding Section 1.7 or any provisions of Sections 9.9 or 9.10 to the contrary, but without prejudice to Section 9.3 and (where applicable) Sections 9.4, 9.5 and 9.6, if the Termination Date has not occurred on or prior to the date that is 60 Business Days following the Physical Settlement Date, such 60th Business Day shall be deemed to be the Termination Date with respect to this Transaction except in relation to any portion of the Transaction (an \"Affected Portion\") in respect of which: (1) a valid notice of Buy-in Price has been delivered that is effective fewer than three Business Days prior to such 60th Business Day, in which case the Termination Date for that Affected Portion shall be the third Business Day following the date on which such notice is effective; or (2) Buyer has purchased but not Delivered Deliverable Obligations validly specified by Seller pursuant to Section 9.10(b), in which case the Termination Date for that Affected Portion shall be the tenth Business Day following the date on which Seller validly specified such Deliverable Obligations to Buyer.">

type ProtectionTerms:

	calculationAmount Money (1..1) <"The notional amount of protection coverage. ISDA 2003 Term: Floating Rate Payer Calculation Amount">
	creditEvents CreditEvents (0..1) <"This element contains all the ISDA terms relating to credit events.">
	obligations Obligations (0..1) <"The underlying obligations of the reference entity on which you are buying or selling protection. The credit events Failure to Pay, Obligation Acceleration, Obligation Default, Restructuring, Repudiation/Moratorium are defined with respect to these obligations. ISDA 2003 Term:">
	floatingAmountEvents FloatingAmountEvents (0..1) <"This element contains the ISDA terms relating to the floating rate payment events and the implied additional fixed payments, applicable to the credit derivatives transactions on mortgage-backed securities with pay-as-you-go or physical settlement.">
	id string (0..1)

type ProtectionTermsReference extends Reference: <"Reference to protectionTerms component.">

	href string (1..1)

type ReferenceInformation:

	referenceEntity LegalEntity (1..1) <"The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity">
	referenceObligation ReferenceObligation (0..*) <"The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation">
	noReferenceObligation boolean (0..1) <"Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.">
	unknownReferenceObligation boolean (0..1) <"Used to indicate that the Reference obligation associated with the Credit Default Swap is currently not known. This is not valid for Legal Confirmation purposes, but is valid for earlier stages in the trade life cycle (e.g. Broker Confirmation).">
	allGuarantees boolean (0..1) <"Indicates whether an obligation of the Reference Entity, guaranteed by the Reference Entity on behalf of a non-Affiliate, is to be considered an Obligation for the purpose of the transaction. It will be considered an obligation if allGuarantees is applicable (true) and not if allGuarantees is inapplicable (false). ISDA 2003 Term: All Guarantees">
	referencePrice number (0..1) <"Used to determine (a) for physically settled trades, the Physical Settlement Amount, which equals the Floating Rate Payer Calculation Amount times the Reference Price and (b) for cash settled trades, the Cash Settlement Amount, which equals the greater of (i) the difference between the Reference Price and the Final Price and (ii) zero. ISDA 2003 Term: Reference Price">
	referencePolicy boolean (0..1) <"Applicable to the transactions on mortgage-backed security, which can make use of a reference policy. Presence of the element with value set to \'true\' indicates that the reference policy is applicable; absence implies that it is not.">
	securedList boolean (0..1) <"With respect to any day, the list of Syndicated Secured Obligations of the Designated Priority of the Reference Entity published by Markit Group Limited or any successor thereto appointed by the Specified Dealers (the \"Secured List Publisher\") on or most recently before such day, which list is currently available at [http://www.markit.com]. ISDA 2003 Term: Relevant Secured List.">

	condition Choice:
		required choice referenceObligation, noReferenceObligation , unknownReferenceObligation

type ReferenceObligation:

	bond Bond (0..1)
	convertibleBond ConvertibleBond (0..1)
	mortgage Mortgage (0..1)
	loan Loan (0..1)
	primaryObligor LegalEntity (0..1) <"The entity primarily responsible for repaying debt to a creditor as a result of borrowing or issuing bonds. ISDA 2003 Term: Primary Obligor">
	primaryObligorReference LegalEntityReference (0..1) <"A pointer style reference to a reference entity defined elsewhere in the document. Used when the reference entity is the primary obligor.">
	referenceObligationChoice ReferenceObligationChoice (0..*)
	standardReferenceObligation boolean (0..1) <"Indicates if the reference obligation is a Standard Reference Obligation. ISDA 2014 Term: Standard Reference Obligation.">

	condition Choice0:
		required choice bond, convertibleBond , mortgage , loan

	condition Choice1:
		optional choice primaryObligor, primaryObligorReference

type ReferenceObligationChoice:

	guarantor LegalEntity (0..1) <"The party that guarantees by way of a contractual arrangement to pay the debts of an obligor if the obligor is unable to make the required payments itself. ISDA 2003 Term: Guarantor">
	guarantorReference LegalEntityReference (0..1) <"A pointer style reference to a reference entity defined elsewhere in the document. Used when the reference entity is the guarantor.">

	condition Choice:
		optional choice guarantor, guarantorReference

type ReferencePair:

	referenceEntity LegalEntity (1..1) <"The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity">
	referenceObligation ReferenceObligation (0..1) <"The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation">
	noReferenceObligation boolean (0..1) <"Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.">
	entityType EntityType (1..1) <"Defines the reference entity types corresponding to a list of types in the ISDA First to Default documentation.">

	condition Choice:
		required choice referenceObligation, noReferenceObligation

type ReferencePool: <"This type contains all the reference pool items to define the reference entity and reference obligation(s) in the basket.">

	referencePoolItem ReferencePoolItem (1..*)

type ReferencePoolItem: <"This type contains all the constituent weight and reference information.">

	constituentWeight ConstituentWeight (0..1) <"Describes the weight of each of the constituents within the basket. If not provided, it is assumed to be equal weighted.">
	referencePair ReferencePair (1..1)
	protectionTermsReference ProtectionTermsReference (0..1) <"Reference to the documentation terms applicable to this item.">
	settlementTermsReference SettlementTermsReference (0..1) <"Reference to the settlement terms applicable to this item.">

type SettledEntityMatrix:

	matrixSource MatrixSource (1..1) <"Relevant settled entity matrix source.">
	publicationDate date (0..1) <"Specifies the publication date of the applicable version of the matrix. When this element is omitted, the Standard Terms Supplement defines rules for which version of the matrix is applicable.">

type SettlementTermsReference extends Reference: <"Reference to a settlement terms derived construct (cashSettlementTerms or physicalSettlementTerms).">

	href string (1..1)

type SinglePayment extends PaymentBase:

	adjustablePaymentDate date (1..1) <"A fixed amount payment date that shall be subject to adjustment in accordance with the applicable business day convention if it would otherwise fall on a day that is not a business day. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term: Fixed Rate Payer Payment Date">
	adjustedPaymentDate date (0..1) <"The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component.">
	fixedAmount Money (1..1) <"A fixed payment amount. ISDA 2003 Term: Fixed Amount">

type SingleValuationDate:

	businessDays int(min: 0) (0..1) <"A number of business days. Its precise meaning is dependant on the context in which this element is used. ISDA 2003 Term: Business Day">

type SpecifiedCurrency:

	applicable boolean (1..1) <"Indicates whether the specified currency provision is applicable.">
	currency Currency (0..*) <"The currency in which an amount is denominated.">

type Tranche: <"This type represents a CDS Tranche.">

	attachmentPoint number (1..1) <"Lower bound percentage of the loss that the Tranche can endure, expressed as a decimal. An attachment point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.">
	exhaustionPoint number (1..1) <"Upper bound percentage of the loss that the Tranche can endure, expressed as a decimal. An exhaustion point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.">
	incurredRecoveryApplicable boolean (0..1) <"Outstanding Swap Notional Amount is defined at any time on any day, as the greater of: (a) Zero; If Incurred Recovery Amount Applicable: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts and all Incurred Recovery Amounts (if any) determined under this Confirmation at or prior to such time.Incurred Recovery Amount not populated: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts determined under this Confirmation at or prior to such time.">

type ValuationDate:

	singleValuationDate SingleValuationDate (0..1) <"Where single valuation date is specified as being applicable for cash settlement, this element specifies the number of business days after satisfaction of all conditions to settlement when such valuation date occurs. ISDA 2003 Term: Single Valuation Date">
	multipleValuationDates MultipleValuationDates (0..1) <"Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies (a) the number of applicable valuation dates, and (b) the number of business days after satisfaction of all conditions to settlement when the first such valuation date occurs, and (c) the number of business days thereafter of each successive valuation date. ISDA 2003 Term: Multiple Valuation Dates">

	condition Choice:
		one-of

type FixedRecoveryModel:

	cashSettlementAmount Money (0..1) <"The amount paid by the seller to the buyer for cash settlement on the cash settlement date. If not otherwise specified, would typically be calculated as 100 (or the Reference Price) minus the price of the Reference Obligation (all expressed as a percentage) times Floating Rate Payer Calculation Amount. ISDA 2003 Term: Cash Settlement Amount.">
	recoveryFactor RestrictedPercentage (0..1) <"Used for fixed recovery, specifies the recovery level, determined at contract inception, to be applied on a default. Used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date. Amount calculation is (1 minus the Recovery Factor) multiplied by the Floating Rate Payer Calculation Amount. The currency will be derived from the Floating Rate Payer Calculation Amount.">

	condition Choice:
		one-of

type BondOptionStrike: <"A complex type to specify the strike of a bond or convertible bond option.">

	referenceSwapCurve ReferenceSwapCurve (0..1) <"The strike of an option when expressed by reference to a swap curve. (Typically the case for a convertible bond option.)">
	price OptionStrike (0..1)

	condition Choice:
		one-of

type MakeWholeAmount extends SwapCurveValuation: <"A complex type to specify the amount to be paid by the buyer of the option if the option is exercised prior to the Early Call Date (Typically applicable to the convertible bond options).">

	interpolationMethod InterpolationMethod (0..1) <"The type of interpolation method that the calculation agent reserves the right to use.">
	earlyCallDate IdentifiedDate (1..1) <"Date prior to which the option buyer will have to pay a Make Whole Amount to the option seller if he/she exercises the option.">

type ReferenceSwapCurve: <"A complex type used to specify the option and convertible bond option strike when expressed in reference to a swap curve.">

	swapUnwindValue SwapCurveValuation (1..1)
	makeWholeAmount MakeWholeAmount (0..1) <"Amount to be paid by the buyer of the option if the option is exercised prior to the Early Call Date. (The market practice in the convertible bond option space being that the buyer should be penalized if he/she exercises the option early on.)">

type SwapCurveValuation: <"A complex type to specify a valuation swap curve, which is used as part of the strike construct for the bond and convertible bond options.">

	floatingRateIndexModel FloatingRateIndexModel (1..1)
	spread number (1..1) <"Spread in basis points over the floating rate index.">
	side QuotationSideEnum (0..1) <"The side (bid/mid/ask) of the measure.">

type CorrelationAmount extends CalculatedAmount: <"Correlation Amount.">

	correlation Correlation (1..1) <"Specifies Correlation.">

type CorrelationLeg extends DirectionalLegUnderlyerValuation: <"A type describing return which is driven by a Correlation calculation.">

	amount CorrelationAmount (1..1) <"Specifies, in relation to each Equity Payment Date, the Equity Amount to which the Equity Payment Date relates. Unless otherwise specified, this term has the meaning defined in the ISDA 2002 Equity Derivatives Definitions.">

type DividendLeg extends DirectionalLegUnderlyer: <"Floating Payment Leg of a Dividend Swap.">

	declaredCashAndCashEquivalentDividendPercentageModel DeclaredCashAndCashEquivalentDividendPercentageModel (1..1)
	dividendPeriod DividendPeriodPayment (1..*) <"One to many time bounded dividend payment periods, each with a fixed strike and dividend payment date per period.">
	specialDividends boolean (0..1) <"If present and true, then special dividends and memorial dividends are applicable.">
	materialDividend boolean (0..1) <"If present and true, then material non cash dividends are applicable.">

type DividendPeriodPayment extends DividendPeriod: <"A time bounded dividend period, with fixed strike and a dividend payment date per period.">

	fixedStrike PositiveDecimal (1..1) <"Fixed strike.">
	paymentDate AdjustableOrRelativeDate (1..1) <"Dividend period amount payment date.">
	valuationDate AdjustableOrRelativeDate (0..1) <"Dividend period amount valuation date.">

type FixedPaymentAmount extends PaymentBase: <"Fixed payment amount within a Dividend Swap.">

	paymentAmount NonNegativeMoney (0..1) <"Payment amount, which is optional since the payment amount may be calculated using fixed strike and number of open units.">
	paymentDate RelativeDateOffset (1..1) <"Payment date relative to another date.">

type FixedPaymentLeg extends DirectionalLeg: <"Fixed Payment Leg of a Dividend Swap.">

	fixedPayment FixedPaymentAmount (1..*) <"Fixed payment of a dividend swap, payment date is relative to a dividend period payment date. Commonly the dividend leg and the fixed payment leg will pay out on the same date, and the payments will be netted.">

type VarianceAmount extends CalculatedAmount: <"Calculation of a Variance Amount.">

	variance Variance (1..1) <"Specifies Variance.">

type VarianceLeg extends DirectionalLegUnderlyerValuation: <"A type describing return which is driven by a Variance Calculation.">

	amount VarianceAmount (1..1) <"Specifies, in relation to each Equity Payment Date, the amount to which the Equity Payment Date relates. Unless otherwise specified, this term has the meaning defined in the ISDA 2002 Equity Derivatives Definitions.">

type Volatility extends CalculationFromObservation: <"Under 2002 Definitions, When entering into the Transaction, the parties should specify whether, for purposes of determining the initial Share price, they are agreeing to (a) a specific initial price (in which case, the initialLevel element should be populated with the price) or (b) use the price of a Share at the close of the regular trading session on the Trade Date (in which case the closingLevel element should be populated as true) or (c) in the case of a forward starting transaction only, use the Official Settlement Price of the Expiring Contract on the Observation Start Date (in which case expiring Level element should be populated as true). Under 2011 definitions, When entering into the Transaction, the parties should specify whether, for purposes of determining the OPSD Pricing Election, they are agreeing to (a) an agreed price (in which case, the initialLevel element should be populated with the price) or (b) use the Index Close Pricing (Official), (in which case closingLevel element should be populated as true) or (c) use OSP Pricing (in which case the initialLevelSource element should be populated with “OSPPrice”).">

	volatilityCap VolatilityCap (1..1) <"Volatility Cap needs to be specified in accordance with the ISDA 2011 Equity Derivatives Definitions.">
	volatilityStrikePrice NonNegativeDecimal (1..1) <"Volatility Strike Price in accordance with the ISDA 2011 Equity Derivatives Definitions.">
	vegaNotionalAmount number (1..1) <"Vega Notional represents the approximate gain/loss at maturity for a 1% difference between RVol(realised vol) and KVol (strike vol). It does not necessarily represent the Vega Risk of the trade. Volatility Amount means the Vega Notional Amount. In accordance with the ISDA 2002 and 2011 Equity Derivatives Definitions.">

type VolatilityAmount extends CalculatedAmount:

	volatility Volatility (1..1) <"Specifies Volatility.">

type VolatilityCap:

	applicable boolean (1..1) <"Indicates whether the volatility cap is applicable in accordance with the ISDA 2011 Equity Derivatives Definitions. Setting the element \'applicable\' to \'False\' - means No Volatility Cap and no \'totalVolatilityCap\' or \'volatilityCapFactor\' should be provided. Setting the element \'applicable\' to \'True\' - means Volatility Cap election, then \'totalVolatilityCap\' or \'volatilityCapFactor\' should be provided, otherwise it defaults to volatilityCapFactor=2.5.">
	totalVolatilityCap PositiveDecimal (0..1) <"Volatility Cap Amount in accordance with the ISDA 2011 Equity Derivatives Definitions. This means the Volatility Cap Amount election is a number.">
	volatilityCapSequence VolatilityCapSequence (0..1)

	condition Choice:
		optional choice totalVolatilityCap, volatilityCapSequence

type VolatilityCapSequence:

	volatilityCapFactor PositiveDecimal (1..1) <"Volatility Cap Factor in accordance with the ISDA 2011 Equity Derivatives Definitions. This means the Volatility Cap Amount election is Calculated VolCapAmt (\'volatilityCapFactor\' * \'volatilityStrikePrice\'). By specifying a decimal for \'volatilityCapFactor\', means the default value of 2.5 does not apply.">
	totalVolatilityCap PositiveDecimal (0..1) <"Volatility Cap Amount in accordance with the ISDA 2011 Equity Derivatives Definitions. The Calculated VolCapAmt can be optionally provided.">

type VolatilityLeg extends DirectionalLegUnderlyerValuation:

	amount VolatilityAmount (1..1) <"Specifies, in relation to each Equity Payment Date, the amount to which the Equity Payment Date relates. Unless otherwise specified, this term has the meaning defined in the ISDA 2011 and 2002 Equity Derivatives Definitions.">

type AbsoluteTolerance: <"The acceptable tolerance in the delivered quantity of a physical commodity product in terms of a number of units of that product.">

	positive number (1..1) <"The maxmium amount by which the quantity delivered can exceed the agreed quantity.">
	negative number (1..1) <"The maximum amount by which the quantity delivered can be less than the agreed quantity.">
	unit QuantityUnit (1..1) <"The unit in which the tolerance is specified.">
	optionOwnerPartyReference PartyReference (0..1) <"Indicates whether the tolerance is at the seller\'s or buyer\'s option.">

type AveragePriceLeg extends CommoditySwapLeg: <"The average price leg of an average price commodity bullion or non-precious metal forward transaction.">

	payerReceiverModel PayerReceiverModel (1..1)
	commodityCalculationPeriodsModel CommodityCalculationPeriodsModel (1..1)
	commodity Commodity (1..1)
	quantityReference QuantityReference (1..1) <"A pointer to a specification of quantity defined elsewhere.">
	pricingStartDate AdjustableDate (1..1) <"Defines the Start of the Pricing period. PricingStartDate is optional when discrete pricingDates are supplied and is not recommended to be included. Should they coexist, pricingStartDate is expected to be the same as the earliest pricing date or earlier for a Term deal as the discrete dates will take precedence.">
	calculation FloatingLegCalculation (1..1) <"Captures details relevant to the calculation of the floating price.">
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)

type BullionDeliveryLocation: <"A scheme defining where bullion is to be delivered for a Bullion Transaction.">

	value Scheme (1..1)
	bullionDeliveryLocationScheme NonEmptyURI (0..1)

type CalculationPeriodsDatesReference extends Reference: <"A pointer style reference to single-day-duration calculation periods defined elsewhere - note that this schedule consists of a parameterised schedule in a calculationPeriodsSchedule container.">

	href string (1..1)

type CalculationPeriodsReference extends Reference: <"A pointer style reference to a calculation periods schedule defined elsewhere - note that this schedule consists of a series of actual dates in a calculationPeriods container.">

	href string (1..1)

type CalculationPeriodsScheduleReference extends Reference: <"A pointer style reference to a calculation periods schedule defined elsewhere - note that this schedule consists of a parameterised schedule in a calculationPeriodsSchedule container.">

	href string (1..1)

type CoalAttributeDecimal: <"The different options for specifying the attributes of a coal quality measure as a decimal value.">

	coalAttributeDecimalSequence0 CoalAttributeDecimalSequence0 (0..1)
	coalAttributeDecimalSequence1 CoalAttributeDecimalSequence1 (0..1)

	condition Choice:
		one-of

type CoalAttributeDecimalSequence0:

	standardContent number (1..1) <"The actual content of the quality characteristics of the Coal Product Shipment expected by the Buyer.">
	rejectionLimit number (0..1) <"The actual limits of the quality characteristics of the Coal Product above or below which the Buyer may reject a Shipment.">

type CoalAttributeDecimalSequence1:

	rejectionLimit number (1..1) <"The actual limits of the quality characteristics of the Coal Product above or below which the Buyer may reject a Shipment.">

type CoalAttributePercentage: <"The different options for specifying the attributes of a coal quality measure as a percentage of the measured value.">

	coalAttributePercentageSequence0 CoalAttributePercentageSequence0 (0..1)
	coalAttributePercentageSequence1 CoalAttributePercentageSequence1 (0..1)

	condition Choice:
		one-of

type CoalAttributePercentageSequence0:

	standardContent RestrictedPercentage (1..1) <"The actual content of the quality characteristics of the Coal Product Shipment expected by the Buyer.">
	rejectionLimit RestrictedPercentage (0..1) <"The actual limits of the quality characteristics of the Coal Product above or below which the Buyer may reject a Shipment.">

type CoalAttributePercentageSequence1:

	rejectionLimit RestrictedPercentage (1..1) <"The actual limits of the quality characteristics of the Coal Product above or below which the Buyer may reject a Shipment.">

type CoalDelivery: <"The physical delivery conditions for coal.">

	deliveryPoint CoalDeliveryPoint (0..1) <"The point at which the Coal Product will be delivered and received.">
	deliveryAtSource boolean (0..1) <"The point at which the Coal Product as a reference to the Source of the Coal Product. This should be a reference to the source element within product.">
	commodityUSCoalDeliveryModel CommodityUSCoalDeliveryModel (0..1)

	condition Choice:
		required choice deliveryPoint, deliveryAtSource

type CoalDeliveryPoint: <"A scheme identifying the types of the Delivery Point for a physically settled coal trade.">

	value Scheme (1..1)
	deliveryPointScheme NonEmptyURI (0..1)

type CoalProduct: <"A type defining the characteristics of the coal being traded in a physically settled gas transaction.">

	_type CoalProductType (0..1) <"The type of coal product to be delivered by reference to a pre-defined specification. For contracts under SCoTA terms this is the quality specification code (e.g. \"DES ARA\")">
	coalProductSpecifications CoalProductSpecifications (0..1) <"The type of coal product to be delivered specified in full.">
	source CoalProductSource (1..*) <"The SCoTA cargo origin, mining region, mine(s), mining complex(es), loadout(s) or river dock(s) or other point(s) of origin that Seller and Buyer agree are acceptable origins for the Coal Product. For International Coal transactions, this is the Origin of the Coal Product.">
	sCoTASpecifications boolean (0..1) <"Indicates whether type and source refer to globalCOAL SCoTA specifications.">
	commodityUSCoalProductModel CommodityUSCoalProductModel (0..1)

	condition Choice:
		required choice _type, coalProductSpecifications

type CoalProductSource: <"A scheme identifying the sources of coal for a physically settled coal trade.">

	value Scheme (1..1)
	commodityCoalProductSourceScheme NonEmptyURI (0..1)

type CoalProductSpecifications: <"The different options for specifying the quality attributes of the coal to be delivered.">

	standardQuality CoalStandardQuality (0..1)
	standardQualitySchedule CoalStandardQualitySchedule (0..1)

	condition Choice:
		one-of

type CoalProductType: <"A scheme identifying the types of coal for a physically settled coal trade.">

	value Scheme (1..1)
	commodityCoalProductTypeScheme NonEmptyURI (0..1)

type CoalQualityAdjustments: <"A scheme identifying the quality adjustment formulae for a physically settled coal trade.">

	value Scheme (1..1)
	commodityCoalQualityAdjustmentsScheme NonEmptyURI (0..1)

type CoalStandardQuality: <"The quality attributes of the coal to be delivered.">

	commodityCoalCompositionModel CommodityCoalCompositionModel (1..1)
	commodityCoalPropertiesModel CommodityCoalPropertiesModel (1..1)
	commodityCoalReducingAtmosphereModel CommodityCoalReducingAtmosphereModel (1..1)

type CoalStandardQualitySchedule: <"The quality attributes of the coal to be delivered, specified on a periodic basis.">

	standardQualityStep CoalStandardQuality (1..*)
	commodityDeliveryPeriodsPointerModel CommodityDeliveryPeriodsPointerModel (1..1)

type CoalTransportationEquipment: <"A scheme identifying the methods by which coal may be transported.">

	value Scheme (1..1)
	commodityCoalTransportationEquipmentScheme NonEmptyURI (0..1)

type CommodityAmericanExercise extends Exercise: <"A type for defining exercise procedures associated with an American style exercise of a commodity option.">

	exercisePeriod CommodityExercisePeriods (1..1) <"Describes the American exercise periods.">
	commodityAmericanExerciseSequence CommodityAmericanExerciseSequence (0..1)
	latestExerciseTime BusinessCenterTime (0..1) <"For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.">
	latestExerciseTimeDetermination DeterminationMethod (0..1) <"Latest exercise time determination method.">
	expirationTime BusinessCenterTime (0..1) <"The specific time of day on which the option expires.">
	multipleExercise CommodityMultipleExercise (0..1) <"The presence of this element indicates that the option may be partially exercised. It is not applicable to European or Asian options.">

	condition Choice:
		optional choice latestExerciseTime, latestExerciseTimeDetermination

type CommodityAmericanExerciseSequence:

	exercisePeriod CommodityExercisePeriods (1..*) <"Describes the American exercise periods.">
	exerciseFrequency Frequency (0..1) <"The exercise frequency for the strip.">

type CommodityBarrier: <"The specification of how a barrier option will trigger (that is, knock-in or knock-out) or expire based on the position of the spot rate relative to trigger level.">

	knock CommodityKnockEnum (1..1) <"The knock feature of a commodity barrier option.">
	featurePaymentAmount PositiveMoney (0..1) <"In the case of barrier options where the option automatically expires and the barrier is breached in such a way to to result in a \"knock-out\" vent, this amount is paid to the the option holder so as to refund or rebate a portion of any premium paid.">
	trigger CommodityTrigger (1..1)

type CommodityBasket: <"Describes the swap\'s underlyer when it has multiple asset components.">

	basketIdentifierModel BasketIdentifierModel (1..1)
	commodityBasketModel CommodityBasketModel (1..1)

type CommodityBasketBase: <"Abstract base class for all underlying assets.">

	id string (0..1)

type CommodityBasketByNotional extends CommodityBasketBase:

	underlying CommodityBasketUnderlyingByNotional (2..*) <"Indicates the role of the option buyer with regard to this underlyer.">

type CommodityBasketByPercentage extends CommodityBasketBase:

	underlying CommodityBasketUnderlyingByPercentage (2..*) <"Indicates the role of the option buyer with regard to this underlyer.">
	notionalAmount NotionalAmount (1..1)

type CommodityBasketUnderlyingBase:

	direction PayerReceiverEnum (1..1) <"Indicates the role of the option buyer with regard to this underlyer.">
	commodity Commodity (1..1) <"Specifies the underlying component. At the time of the initial schema design, only underlyers of type Commodity are supported; the choice group in the future could offer the possibility of adding other types later.">
	pricingDates CommodityPricingDates (0..1) <"The dates on which the option will price.">
	averagingMethod AveragingMethodEnum (0..1) <"The Method of Averaging if there is more than one Pricing Date.">
	id string (0..1)

type CommodityBasketUnderlyingByNotional extends CommodityBasketUnderlyingBase:

	fx CommodityFx (0..1) <"FX observations to be used to convert the observed Commodity Reference Price to the Settlement Currency.">
	conversionFactor number (0..1) <"If the Notional Quantity is specified in a unit that does not match the unit in which the Commodity Reference Price is quoted, the scaling or conversion factor used to convert the Commodity Reference Price unit into the Notional Quantity unit should be stated here. If there is no conversion, this element is not intended to be used.">
	commodityNotionalQuantityModel CommodityNotionalQuantityModel (1..1)

type CommodityBasketUnderlyingByPercentage extends CommodityBasketUnderlyingBase:

	constituentWeight NonNegativeDecimal (0..1) <"If the Notional Quantity is specified in a unit that does not match the unit in which the Commodity Reference Price is quoted, the scaling or conversion factor used to convert the Commodity Reference Price unit into the Notional Quantity unit should be stated here. If there is no conversion, this element is not intended to be used.">

type CommodityCalculationPeriodsSchedule extends Frequency: <"A parametric representation of the Calculation Periods for on Asian option or a leg of a swap. In case the calculation frequency is of value T (term), the period is defined by the commoditySwap\\effectiveDate and the commoditySwap\\terminationDate.">

	balanceOfFirstPeriod boolean (1..1) <"If true, indicates that that the first Calculation Period should run from the Effective Date to the end of the calendar period in which the Effective Date falls, e.g. Jan 15 - Jan 31 if the calculation periods are one month long and Effective Date is Jan 15. If false, the first Calculation Period should run from the Effective Date for one whole period, e.g. Jan 15 to Feb 14 if the calculation periods are one month long and Effective Date is Jan 15.">

type CommodityDeliveryPeriods: <"The different options for specifying the Delivery Periods of a physical leg.">

	periods AdjustableDates (0..1) <"The Delivery Periods for this leg of the swap. This type is only intended to be used if the Delivery Periods differ from the Calculation Periods on the fixed or floating leg. If DeliveryPeriods mirror another leg, then the calculationPeriodsReference element should be used to point to the Calculation Periods on that leg - or the calculationPeriodsScheduleReference can be used to point to the Calculation Periods Schedule for that leg.">
	periodsSchedule CommodityCalculationPeriodsSchedule (0..1) <"The Delivery Periods for this leg of the swap. This type is only intended to be used if the Delivery Periods differ from the Calculation Periods on the fixed or floating leg. If DeliveryPeriods mirror another leg, then the calculationPeriodsReference element should be used to point to the Calculation Periods on that leg - or the calculationPeriodsScheduleReference can be used to point to the Calculation Periods Schedule for that leg.">
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (0..1)
	id string (0..1)

	condition Choice:
		required choice periods, periodsSchedule , commodityCalculationPeriodsPointerModel

type CommodityDeliveryPoint: <"A scheme identifying the types of the Delivery Point for a physically settled commodity trade.">

	value Scheme (1..1)
	deliveryPointScheme NonEmptyURI (0..1)

type CommodityDeliveryRisk: <"A scheme identifying how the parties to the trade aportion responsibility for the delivery of the commodity product (for example Free On Board, Cost, Insurance, Freight)">

	value Scheme (1..1)
	deliveryRiskScheme NonEmptyURI (0..1)

type CommodityDigital: <"Defined the conditions under which the digital option can triggers and, if triggered, what payment results.">

	trigger CommodityTrigger (1..1)
	featurePaymentAmount PositiveMoney (1..1) <"The cash payment that is made when the digital barrier is breached.">

type CommodityDigitalExercise: <"The parameters for defining how the commodity digital option can be exercised. It differs from the CommodityExercise type in that it lacks a specification of Settlement Currency. The Settlement Currency is specified in the \'featurePayment\' element.">

	americanExercise CommodityAmericanExercise (0..1) <"The parameters for defining the expiration date for an American option.">
	europeanExercise CommodityEuropeanExercise (0..1) <"The parameters for defining the expiration date and time for a European or Asian style option. For an Asian style option the expiration date is equivalent to the termination date.">
	automaticExercise boolean (0..1) <"Specifies whether or not Automatic Exercise applies to a Commodity Option Transaction.">
	writtenConfirmation boolean (0..1) <"Specifies whether or not Written Confirmation applies to a Commodity Option Transaction.">
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)

	condition Choice:
		required choice americanExercise, europeanExercise

type CommodityDigitalOptionSequence:

	notionalQuantity CommodityNotionalQuantity (1..1) <"The volume contracted when the volume is specified as a quantity of commodity.">
	totalNotionalQuantity number (0..1)

type CommodityEuropeanExercise extends Exercise: <"A type for defining exercise procedures associated with a European style exercise of a commodity option.">

	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period. For an averaging option this is equivalent to the Termination Date.">
	commodityEuropeanExerciseSequence CommodityEuropeanExerciseSequence (0..1)
	expirationTime BusinessCenterTime (0..1) <"The specific time of day on which the option expires.">

type CommodityEuropeanExerciseSequence:

	expirationDate AdjustableOrRelativeDate (1..*) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period. For an averaging option this is equivalent to the Termination Date.">
	exerciseFrequency Frequency (0..1) <"The exercise frequency for the strip.">

type CommodityExercise: <"The parameters for defining how the commodity option can be exercised, how it is priced and how it is settled.">

	americanExercise CommodityAmericanExercise (0..1) <"The parameters for defining the expiration date for an American option.">
	europeanExercise CommodityEuropeanExercise (0..1) <"The parameters for defining the expiration date and time for a European or Asian style option. For an Asian style option the expiration date is equivalent to the termination date.">
	automaticExercise boolean (0..1) <"Specifies whether or not Automatic Exercise applies to a Commodity Option Transaction.">
	writtenConfirmation boolean (0..1) <"Specifies whether or not Written Confirmation applies to a Commodity Option Transaction.">
	settlementCurrency IdentifiedCurrency (1..1) <"The currency into which the Commodity Option Transaction will settle. If this is not the same as the currency in which the Commodity Reference Price is quoted, then an FX determination method should also be specified.">
	fx CommodityFx (0..1) <"FX observations to be used to convert the observed Commodity Reference Price to the Settlement Currency.">
	conversionFactor number (0..1) <"If the Notional Quantity is specified in a unit that does not match the unit in which the Commodity Reference Price is quoted, the scaling or conversion factor used to convert the Commodity Reference Price unit into the Notional Quantity unit should be stated here. If there is no conversion, this element is not intended to be used.">
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)

	condition Choice:
		required choice americanExercise, europeanExercise

type CommodityExerciseBasket: <"The parameters for defining how the commodity option can be exercised, how it is priced and how it is settled.">

	americanExercise CommodityAmericanExercise (0..1) <"The parameters for defining the exercise period for an American style option together with the rules governing the quantity of the commodity that can be exercised on any given exercise date.">
	europeanExercise CommodityEuropeanExercise (0..1) <"The parameters for defining the expiration date and time for a European or Asian style option. For an Asian style option the expiration date is equivalent to the termination date.">
	automaticExercise boolean (0..1) <"Specifies whether or not Automatic Exercise applies to a Commodity Option Transaction.">
	writtenConfirmation boolean (0..1) <"Specifies whether or not Written Confirmation applies to a Commodity Option Transaction.">
	settlementCurrency IdentifiedCurrency (1..1) <"The currency into which the Commodity Option Transaction will settle. If this is not the same as the currency in which the Commodity Reference Price is quoted, then an FX determination method should also be specified.">
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)

	condition Choice:
		required choice americanExercise, europeanExercise

type CommodityExercisePeriods:

	commencementDate AdjustableOrRelativeDate (1..1) <"The first day of the exercise period for an American style option.">
	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.">

type CommodityExpireRelativeToEvent: <"A scheme identifying the physical event relative to which option expiration occurs.">

	value Scheme (1..1)
	commodityExpireRelativeToEventScheme NonEmptyURI (0..1)

type CommodityFixedInterestCalculation:

	fixedRate IdentifiedRate (1..1) <"The calculation period fixed rate or \"fee\" rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05. When multiplied by the Notional Amount and the number of calendar days in the Calculation Period divided by the calendar days basis, is the fixed amount payed per Calculation Period.">
	dayCountFraction DayCountFraction (1..1) <"Specifies the basis for the adjustment of a rate from an annual rate to a rate appropriate for the Calculation Period: e.g. the number of calendar days in the Calculation Period divided by the calendar days basis e.g. actual number of days in the Calculation Period divided by 365.">

type CommodityFixedPriceSchedule: <"The Fixed Price for a given Calculation Period during the life of the trade. There must be a Fixed Price step specified for each Calculation Period, regardless of whether the Fixed Price changes or remains the same between periods.">

	fixedPriceStep FixedPrice (0..*) <"The Fixed Price for a given Calculation Period during the life of the trade. There must be a Fixed Price step specified for each Calculation Period, regardless of whether the Fixed Price changes or remains the same between periods.">
	worldscaleRateStep number (0..*) <"For a Wet Voyager Charter Freight Swap, the number of Worldscale Points for purposes of the calculation of a Fixed Amount for a given Calculation Period during the life of the trade. There must be Worldscale Rate Step specified for each Calculation Period, regardless of whether the Worldscale Rate Step changes or remains the same between periods.">
	contractRateStep NonNegativeMoney (0..*) <"For a DRY Voyage Charter or Time Charter Freight Swap, the price per relevant unit for pruposes of the calculation of a Fixed Amount for a given Calculation Period during the life of the trade. There must be Worldscale Rate Step specified for each Calculation Period, regardless of whether the Worldscale Rate Step changes or remains the same between periods.">
	settlementPeriodsPriceSchedule CommoditySettlementPeriodsPriceSchedule (0..*) <"For an electricity transaction, the fixed price schedule for one or more groups of Settlement Periods on which fixed payments are based. if the schedule differs for different groups of Settlement Periods, this element should be repeated.">
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)

	condition Choice:
		required choice fixedPriceStep, worldscaleRateStep , contractRateStep , settlementPeriodsPriceSchedule

type CommodityForwardLeg extends Leg: <"Abstract base class for all commodity forward legs.">

type CommodityFrequencyType: <"Frequency Type for use in Pricing Date specifications.">

	value Scheme (1..1)
	commodityFrequencyTypeScheme NonEmptyURI (0..1)

type CommodityFx: <"A type defining the FX observations to be used to convert the observed Commodity Reference Price to the Settlement Currency. The rate source must be specified. Additionally, a time for the spot price to be observed on that source may be specified, or else an averaging schedule for trades priced using an average FX rate.">

	primaryRateSource InformationSource (1..1) <"The primary source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">
	secondaryRateSource InformationSource (0..1) <"An alternative, or secondary, source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">
	fxType CommodityFxType (0..1) <"A type to identify how the FX rate will be applied. This is intended to differentiate between the various methods for applying FX to the floating price such as a daily calculation, or averaging the FX and applying the average at the end of each CalculationPeriod.">
	averagingMethod AveragingMethodEnum (0..1) <"The parties may specify a Method of Averaging when averaging of the FX rate is applicable.">
	fixingTime BusinessCenterTime (0..1) <"The time at which the spot currency exchange rate will be observed. It is specified as a time in a specific business center, e.g. 11:00am London time.">
	commodityFxSequence CommodityFxSequence (0..1)

	condition Choice:
		optional choice fixingTime, commodityFxSequence

type CommodityFxSequence:

	fxObservationDates AdjustableDates (0..*) <"A list of the fx observation dates for a given Calculation Period.">
	commodityFxSequenceSequence CommodityFxSequenceSequence (0..1)
	fixingTime BusinessCenterTime (0..1) <"The time at which the spot currency exchange rate will be observed. It is specified as a time in a specific business center, e.g. 11:00am London time.">

	condition Choice:
		required choice fxObservationDates, commodityFxSequenceSequence

type CommodityFxSequenceSequence:

	commodityFxSequenceSequenceSequence CommodityFxSequenceSequenceSequence (0..1)
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)

type CommodityFxSequenceSequenceSequence:

	daysModel DaysModel (1..1)
	lagOrReferenceModel LagOrReferenceModel (0..1)

type CommodityFxType: <"Identifes how the FX rate will be applied. This is intended to differentiate between the various methods for applying FX to the floating price such as a daily calculation, or averaging the FX and applying the average at the end of each CalculationPeriod.">

	value Scheme (1..1)
	commodityFxTypeScheme NonEmptyURI (0..1)

type CommodityHub: <"A type defining a hub or other reference for a physically settled commodity trade.">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	hubCode CommodityHubCode (1..1)

type CommodityHubCode: <"A scheme identifying the code for a hub or other reference for a physically settled commodity trade.">

	value Scheme (1..1)
	hubCodeScheme NonEmptyURI (1..1)

type CommodityMarketDisruption: <"ISDA 1993 or 2005 commodity market disruption elements.">

	commodityMarketDisruptionSequence CommodityMarketDisruptionSequence (0..1)
	marketDisruptionEvent MarketDisruptionEvent (0..*) <"Market disruption event(s) that apply. Note that these should only be specified if the default market disruption events of Section 7.4(d)(i) of the ISDA Commodity Definitions are to be overridden.">
	disruptionFallbacks DisruptionFallbacksEnum (0..1) <"To be used where disruption fallbacks are set out in the relevant Master Agreement governing the trade.">
	disruptionFallback SequencedDisruptionFallback (0..*)
	fallbackReferencePrice Underlyer (0..1) <"A fallback commodity reference price for use when relying on Disruption Fallbacks in Section 7.5(d)(i) of the ISDA Commodity Definitions or have selected \"Fallback Reference Price\" as a disruptionFallback.">
	maximumNumberOfDaysOfDisruption int(min: 0) (0..1) <"2005 Commodity Definitions only. If omitted , the number of days specified in Section 7.6(a) of the Definitions will apply.">
	priceMaterialityPercentage number (0..1) <"2005 Commodity Definitions only. To be used where a price materiality percentage applies to the \"Price Source Disruption\" event and this event has been specified by setting marketDisruption to true or including it in additionalMarketDisruptionEvent">
	minimumFuturesContracts int(min: 1) (0..1) <"1993 Commodity Definitions only. Specifies the Mimum Futures Contracts level that dictates whether or not a \"De Minimis Trading\" event has occurred. Only relevant if \'De Minimis Trading\' has been specified in marketDisruptionEvent or additionalMarketDisruptionEvent.">

	condition Choice0:
		required choice commodityMarketDisruptionSequence, marketDisruptionEvent

	condition Choice1:
		optional choice disruptionFallbacks, disruptionFallback

type CommodityMarketDisruptionSequence:

	marketDisruptionEvents MarketDisruptionEventsEnum (1..1) <"If Market disruption Events are stated to be Applicable then the default Market Disruption Events of Section 7.4(d)(i) of the ISDA Commodity Definitions shall apply unless specific Market Disruption Events are stated hereunder, in which case these shall override the ISDA defaults. If Market Disruption Events are stated to be Not Applicable, Market Disruption Events are not applicable to the trade at all. It is also possible to reference the Market Disruption Events set out in the relevant Master Agreement governing the trade.">
	additionalMarketDisruptionEvent MarketDisruptionEvent (0..*) <"To be used when marketDisruptionEvents is set to \"Applicable\" and additional market disruption events(s) apply to the default market disruption events of Section 7.4(d)(i) of the ISDA Commodity Definitions.">

type CommodityMetalBrand:

	name CommodityMetalBrandName (1..1)
	brandManager CommodityMetalBrandManager (0..1)
	country CountryCode (0..1)
	producer CommodityMetalProducer (0..1)

type CommodityMetalBrandManager:

	value Scheme (1..1)
	commodityMetalBrandManagerScheme NonEmptyURI (0..1)

type CommodityMetalBrandName: <"The name of the entity that issues the brand">

	value Scheme (1..1)
	commodityMetalBrandNameScheme NonEmptyURI (0..1)

type CommodityMetalGrade:

	value Scheme (1..1)
	commodityMetalGradeScheme NonEmptyURI (0..1)

type CommodityMetalProducer:

	value Scheme (1..1)
	commodityMetalProducerScheme NonEmptyURI (0..1)

type CommodityMetalShape:

	value Scheme (1..1)
	commodityMetalShapeScheme NonEmptyURI (0..1)

type CommodityMultipleExercise: <"A type for defining the multiple exercise provisions of an American style commodity option.">

	integralMultipleQuantity CommodityNotionalQuantity (0..1) <"The integral multiple quantity defines a lower limit of the Notional Quantity that can be exercised and also defines a unit multiple of the Notional Quantity that can be exercised, i.e. only integer multiples of this Notional Quantity can be exercised.">
	minimumNotionalQuantity CommodityNotionalQuantity (1..1) <"The minimum Notional Quantity that can be exercised on a given Exercise Date. See multipleExercise.">

type CommodityNotionalAmount extends NonNegativeMoney: <"A complex type to specify the notional amount.">

	reinvestmentFeature boolean (1..1) <"This element indicates whether the notional amount (or equivalent) is constant across each Calculation Period or whether the notional amount in each Calculation Period (\"false\") is the notional amount in the previous period multiplied by 1 + commodity index return in the current period (\"true\"). In cases where reinstementFeature = true the \'amount\' element is the Initial Notional Amount (or equivalent).">

type CommodityNotionalAmountReference extends Reference: <"A reference to the return swap notional amount.">

	href string (1..1)

type CommodityNotionalQuantity: <"Commodity Notional.">

	quantityUnit QuantityUnit (1..1) <"Quantity Unit is the unit of measure applicable for the quantity on the Transaction.">
	quantityFrequency CommodityQuantityFrequency (1..1) <"The frequency at which the Notional Quantity is deemed to apply for purposes of calculating the Total Notional Quantity.">
	quantity number (1..1) <"Amount of commodity per quantity frequency.">
	id string (0..1)

type CommodityNotionalQuantitySchedule: <"The Notional Quantity per Calculation Period. There must be a Notional Quantity step specified for each Calculation Period, regardless of whether the Notional Quantity changes or remains the same between periods.">

	notionalStep CommodityNotionalQuantity (0..*) <"The Notional Quantity per Calculation Period. There must be a Notional Quantity specified for each Calculation Period, regardless of whether the quantity changes or remains the same between periods.">
	settlementPeriodsNotionalQuantitySchedule CommoditySettlementPeriodsNotionalQuantitySchedule (0..*) <"For an electricity transaction, the Notional Quantity schedule for a one or more groups of Settlement Periods to which the Notional Quantity is based. If the schedule differs for different groups of Settlement Periods, this element should be repeated.">
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)
	id string (0..1)

	condition Choice:
		required choice notionalStep, settlementPeriodsNotionalQuantitySchedule

type CommodityPayRelativeToEvent: <"A scheme identifying the physical event relative to which payment occurs.">

	value Scheme (1..1)
	commodityPayRelativeToEventScheme NonEmptyURI (0..1)

type CommodityPerformanceSwapBase extends Product: <"A product with which to represent return swaps, total return swaps and excess return swaps.">

	effectiveDate AdjustableOrRelativeDate (0..1) <"Specifies the Eeffective Date of the swap. It is an optional element because not all confirmations of total return swaps specify an Effective Date. In these cases the Term of the contract begins on the Trade Date.">
	terminationDate AdjustableOrRelativeDate (1..1) <"Specifies the Termination Date of the swap.">
	settlementCurrency IdentifiedCurrency (0..1) <"The currency in which the commodity performance swap transaction will settle. It is an optional element because not all confirmations of performance swaps specify a Settlement Currency.">
	commodityPerformanceSwapLeg CommodityPerformanceSwapLeg (1..2)
	commodityContentModel CommodityContentModel (0..1)

type CommodityPerformanceSwapEarlyTermination:

	partyReference PartyReference (0..1)
	startingDate CommodityStartingDate (0..1)

type CommodityPerformanceSwapLeg extends Leg: <"Abstract base class for all commodity performance swap legs.">

	payerReceiverModel PayerReceiverModel (1..1)

type CommodityPhysicalAmericanExercise extends Exercise: <"The parameters for defining the expiration date(s) and time(s) for an American style option.">

	commodityPhysicalAmericanExerciseSequence0 CommodityPhysicalAmericanExerciseSequence0 (0..1)
	commodityPhysicalAmericanExerciseSequence1 CommodityPhysicalAmericanExerciseSequence1 (0..1)
	latestExerciseTime PrevailingTime (0..1) <"For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.">
	expirationTime PrevailingTime (0..1) <"The specific time of day at which the option expires.">

	condition Choice:
		required choice commodityPhysicalAmericanExerciseSequence0, commodityPhysicalAmericanExerciseSequence1

type CommodityPhysicalAmericanExerciseSequence0:

	commencementDates AdjustableOrRelativeDates (1..1) <"The first day(s) of the exercise period(s) for an American-style option.">
	expirationDates AdjustableOrRelativeDates (1..1) <"The Expiration Date(s) of an American-style option.">

type CommodityPhysicalAmericanExerciseSequence1:

	relativeCommencementDates CommodityRelativeExpirationDates (1..1) <"The first day(s) of the exercise period(s) for an American-style option where it is relative to the occurrence of an external event.">
	relativeExpirationDates CommodityRelativeExpirationDates (1..1) <"The Expiration Date(s) of an American-style option where it is relative to the occurrence of an external event.">

type CommodityPhysicalEuropeanExercise extends Exercise: <"The parameters for defining the expiration date(s) and time(s) for a European style option.">

	expirationDate AdjustableOrRelativeDate (0..1) <"The Expiration Date of a single expiry European-style option or the first Expiration Date of a multiple expiry or daily expiring option.">
	expirationDates AdjustableRelativeOrPeriodicDates2 (0..1) <"The Expiration Date(s) of a European-style option.">
	relativeExpirationDates CommodityRelativeExpirationDates (0..1) <"The Expiration Date(s) of a European-style option where it is relative to the occurrence of an external event.">
	expirationTime PrevailingTime (0..1) <"The specific time of day at which the option expires.">

	condition Choice:
		required choice expirationDate, expirationDates , relativeExpirationDates

type CommodityPhysicalExercise: <"The parameters for defining how the physically-settled commodity option can be exercised and how it is settled.">

	americanExercise CommodityPhysicalAmericanExercise (0..1) <"The parameters for defining the expiration date(s) and time(s) for an American style option.">
	europeanExercise CommodityPhysicalEuropeanExercise (0..1) <"The parameters for defining the expiration date(s) and time(s) for a European style option.">
	automaticExercise boolean (0..1) <"Specifies whether or not Automatic Exercise applies to a Commodity Option Transaction.">
	writtenConfirmation boolean (0..1) <"Specifies whether or not Written Confirmation applies to a Commodity Option Transaction.">
	clearingInstructions SwaptionPhysicalSettlement (0..1) <"Specifies any instructions on how the physical settlement is to be effected when the option is exercised.">

	condition Choice:
		required choice americanExercise, europeanExercise

type CommodityPhysicalQuantity extends CommodityPhysicalQuantityBase: <"A type defining the physical quantity of the commodity to be delivered.">

	commodityFixedPhysicalQuantityModel CommodityFixedPhysicalQuantityModel (1..1)

type CommodityPhysicalQuantityBase: <"An abstract base class for physical quantity types.">

	id string (0..1)

type CommodityPhysicalQuantitySchedule: <"The Quantity per Delivery Period. There must be a Quantity step specified for each Delivery Period, regardless of whether the Quantity changes or remains the same between periods.">

	quantityStep CommodityNotionalQuantity (1..*) <"The quantity per Calculation Period. There must be a quantity specified for each Calculation Period, regardless of whether the quantity changes or remains the same between periods.">
	commodityDeliveryPeriodsPointerModel CommodityDeliveryPeriodsPointerModel (1..1)
	id string (0..1)

type CommodityPipeline: <"The pipeline through which the physical commodity will be delivered.">

	value Scheme (1..1)
	pipelineScheme NonEmptyURI (0..1)

type CommodityPipelineCycle: <"The pipeline cycle during which the physical commodity will be delivered.">

	value Scheme (1..1)
	pipelineCycleScheme NonEmptyURI (1..1)

type CommodityPremium extends NonNegativePayment: <"The commodity option premium payable by the buyer to the seller.">

	premiumPerUnit NonNegativeMoney (0..1) <"The currency amount of premium to be paid per Unit of the Total Notional Quantity.">

type CommodityPricingDates: <"The dates on which prices are observed for the underlyer.">

	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)
	commodityPricingDatesSequence CommodityPricingDatesSequence (0..1)
	pricingDates AdjustableDates (0..*) <"A list of adjustable dates on which the trade will price. Each date will price for the Calculation Period within which it falls.">
	id string (0..1)

	condition Choice:
		required choice commodityPricingDatesSequence, pricingDates

type CommodityPricingDatesSequence:

	lag Lag (0..1) <"The pricing period per calculation period if the pricing days do not wholly fall within the respective calculation period.">
	commodityPricingDatesSequenceSequence CommodityPricingDatesSequenceSequence (0..1)
	settlementPeriods SettlementPeriods (0..*) <"Specifies a set of Settlement Periods associated with an Electricity Transaction for delivery on an Applicable Day or for a series of Applicable Days.">
	settlementPeriodsReference SettlementPeriodsReference (0..*) <"Allows a set of Settlement Periods to reference one already defined elsewhere in the trade structure.">

	condition Choice:
		required choice commodityPricingDatesSequenceSequence, settlementPeriods , settlementPeriodsReference

type CommodityPricingDatesSequenceSequence:

	daysModel DaysModel (1..1)
	businessCalendar CommodityBusinessCalendar (0..1) <"Identifies a commodity business day calendar from which the pricing dates will be determined.">
	calendarSource CalendarSourceEnum (0..1) <"Used in conjunction with an exchange-based pricing source. Identifies a date source calendar from which the pricing dates and thus roll to the next contract will be based off (e.g. pricing is based on the NYMEX WTI First Nearby Futures Contract, if “Future” is chosen, the pricing will roll to the next futures contract on expiration, if “ListedOption” is chosen, the pricing will roll to the next futures contract on the Option expiration date which is three business days before the expiration of the NYMEX WTI futures contract.) Omitting this element will result in the default behavior expected with the pricing source described within the commodity element.">

type CommodityProductGrade: <"A scheme identifying the grade of physical commodity product to be delivered.">

	value Scheme (1..1)
	productGradeScheme NonEmptyURI (0..1)

type CommodityQuantityFrequency: <"A type for defining the frequency at which the Notional Quantity is deemed to apply for purposes of calculating the Total Notional Quantity.">

	value Scheme (1..1)
	quantityFrequencyScheme NonEmptyURI (0..1)

type CommodityRelativeExpirationDates: <"The Expiration Dates of the trade relative to the Calculation Periods.">

	expireRelativeToEvent CommodityExpireRelativeToEvent (1..1) <"Specifies whether the payment(s) occur relative to the date of a physical event.">
	expirationDateOffset DateOffset (1..1) <"Specifies any offset from the adjusted Calculation Period start date or adjusted Calculation Period end date applicable to each Payment Date.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)
	id string (0..1)

type CommodityRelativePaymentDates: <"The Payment Dates of the trade relative to the Calculation Periods.">

	payRelativeTo CommodityPayRelativeToEnum (0..1) <"Specifies whether the payment(s) occur relative to a date such as the end of each Calculation Period or the last Pricing Date in each Calculation Period.">
	payRelativeToEvent CommodityPayRelativeToEvent (0..1) <"Specifies whether the payment(s) occur relative to the date of a physical event such as issuance of a bill of lading.">
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)
	paymentDaysOffset DateOffset (1..1) <"Specifies any offset from the adjusted Calculation Period start date, adjusted Calculation Period end date or Calculation Date applicable to each Payment Date.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)
	id string (0..1)

	condition Choice:
		required choice payRelativeTo, payRelativeToEvent

type CommodityReturnCalculation:

	formula CommodityReturnCalculationFormulaEnum (1..1) <"Defines the value of the commodity return calculation formula as simple or compound.">
	pricingDates CommodityPricingDates (0..1) <"Describes which dates are valid dates on which to observe a price or index level">
	valuationDates CommodityValuationDates (0..1) <"Defines when a price or index level will be observed that will figure in the return calculation.">
	initialPrice number (0..1) <"If specified in the confirmation, the price or index level at the beginning of the initial Calculation Period. For example, if the return calculation is [(Index End / Index Begin) - 1] and Index Begin is defined as equal to Index End for the immediately preceeding Calculation Period, then the value of Index Begin in the very first Calculation Period is not defined and is usually specified in the confirmation.">

type CommoditySettlementPeriodsNotionalQuantity extends CommodityNotionalQuantity: <"The notional quantity of electricity that applies to one or more groups of Settlement Periods.">

	settlementPeriodsReference SettlementPeriodsReference (1..*) <"The range(s) of Settlement Periods to which the Notional Quantity applies.">

type CommoditySettlementPeriodsNotionalQuantitySchedule: <"The notional quantity schedule of electricity that applies to one or more groups of Settlement Periods.">

	settlementPeriodsNotionalQuantityStep CommodityNotionalQuantity (1..*) <"For an electricity transaction, the Notional Quantity for a given Calculation Period during the life of the trade which applies to the range(s) of Settlement Periods referenced by settlementPeriodsReference. There must be a settlementPeriodsNotionalQuantityStep specified for each Calculation Period, regardless of whether the NotionalQuantity changes or remains the same between periods.">
	settlementPeriodsReference SettlementPeriodsReference (1..*) <"The range(s) of Settlement Periods to which the Fixed Price steps apply.">

type CommoditySettlementPeriodsPriceSchedule: <"The fixed price schedule for electricity that applies to one or more groups of Settlement Periods.">

	settlementPeriodsPriceStep FixedPrice (1..*) <"For an electricity transaction, the Fixed Price for a given Calculation Period during the life of the trade which applies to the range(s) of Settlement Periods referenced by settlementPeriods Reference. There must be a Fixed Price step specified for each Calculation Period, regardless of whether the Fixed Price changes or remains the same between periods.">
	settlementPeriodsReference SettlementPeriodsReference (1..*) <"The range(s) of Settlement Periods to which the Fixed Price steps apply.">

type CommoditySpread extends Money:

	spreadConversionFactor number (0..1) <"spreadConversionFactor should be used when the unit of measure of the Commodity Reference Price and the unit of measure in which the spread is quoted are different. The value of spreadConversionFactor is the number of units of measure in which the spread is quoted per unit of measure of the Commodity Reference Price.">
	spreadUnit QuantityUnit (0..1) <"spreadUnit should be used when the unit of measure of the Commodity Reference Price and the unit of measure in which the spread is quoted are different. The value of spreadUnit is the unit of measure in which the spread is quoted.">

type CommoditySpreadSchedule: <"The Spread per Calculation Period. There must be a Spread specified for each Calculation Period, regardless of whether the Spread changes or remains the same between periods.">

	spreadStep CommoditySpread (1..*) <"The spread per Calculation Period. There must be a spread step specified for each Calculation Period, regardless of whether the spread changes or remains the same between periods.">
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)

type CommodityStartingDate: <"A type specifying the date from which the early termination clause can be exercised.">

	dateRelativeTo PartyReference (0..1) <"Reference to a party defined elsewhere in this document which may be allowed to terminate the trade.">
	adjustableDate AdjustableDate (0..1) <"Date from which early termination clause can be exercised.">

	condition Choice:
		one-of

type CommodityStrikeSchedule: <"The Strike Price per Unit per Calculation Period. There must be a Strike Price per Unit step specified for each Calculation Period, regardless of whether the Strike changes or remains the same between periods.">

	strikePricePerUnitStep NonNegativeMoney (1..*) <"The strike price per unit per Calculation Period. There must be a strike price per unit specified for each Calculation Period, regardless of whether the price changes or remains the same between periods.">
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)

type CommoditySwapLeg extends Leg: <"Abstract base class for all commodity swap legs">

type CommoditySwaptionUnderlying:

	commoditySwapDetailsModel CommoditySwapDetailsModel (1..1)

type CommodityTrigger: <"The barrier which, when breached, triggers the knock-in or knock-out of the barrier option.">

	commodityTriggerSequence CommodityTriggerSequence (0..1)
	levelPercentage number (0..1) <"A barrier expressed as a percentage of notional quantity or commodity price level.">
	levelPrice FixedPrice (0..1) <"A barrier expressed as a price level.">
	triggerType TriggerTypeEnum (1..1) <"For barrier options: the specification of how an option will trigger or expire based on the position of the spot rate relative to the trigger level. For trades with selectable notionals: the specification of the conditions where one of the alternative notional values would apply.">

	condition Choice:
		required choice commodityTriggerSequence, levelPercentage , levelPrice

type CommodityTriggerSequence:

	levelQuantity number (1..1) <"The amount used the specify the barrier in terms of an quantity of commodity or a change in the quantity of commodity. In confirmations this is often described as the \"Strike Volume\" or \"Strike Quantity\".">
	levelUnit QuantityUnit (1..1) <"The units (e.g. BCF) used to specify the barrier in terms of an quantity of commodity or change in the quantity of commodity.">

type CommodityValuationDates: <"The dates on which prices are observed for the underlyer.">

	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (1..1)
	commodityValuationDatesSequence CommodityValuationDatesSequence (0..1)
	valuationDates AdjustableDates (0..*) <"A list of adjustable dates on which the trade will price. Each date will price for the Calculation Period within which it falls.">
	id string (0..1)

	condition Choice:
		required choice commodityValuationDatesSequence, valuationDates

type CommodityValuationDatesSequence:

	lag Lag (0..1) <"The pricing period per calculation period if the pricing days do not wholly fall within the respective calculation period.">
	commodityValuationDatesSequenceSequence CommodityValuationDatesSequenceSequence (0..1)
	settlementPeriods SettlementPeriods (0..*) <"Specifies a set of Settlement Periods associated with an Electricity Transaction for delivery on an Applicable Day or for a series of Applicable Days.">
	settlementPeriodsReference SettlementPeriodsReference (0..*) <"Allows a set of Settlement Periods to reference one already defined elsewhere in the trade structure.">

	condition Choice:
		required choice commodityValuationDatesSequenceSequence, settlementPeriods , settlementPeriodsReference

type CommodityValuationDatesSequenceSequence:

	daysModel DaysModel (1..1)
	businessCalendar CommodityBusinessCalendar (0..1) <"Identifies a commodity business day calendar from which the pricing dates will be determined.">
	calendarSource CalendarSourceEnum (0..1) <"Used in conjunction with an exchange-based pricing source. Identifies a date source calendar from which the pricing dates and thus roll to the next contract will be based off (e.g. pricing is based on the NYMEX WTI First Nearby Futures Contract, if “Future” is chosen, the pricing will roll to the next futures contract on expiration, if “ListedOption” is chosen, the pricing will roll to the next futures contract on the Option expiration date which is three business days before the expiration of the NYMEX WTI futures contract.) Omitting this element will result in the default behavior expected with the pricing source described within the commodity element.">

type CommodityVarianceCalculation:

	pricingDates CommodityPricingDates (0..1) <"Describes which dates are valid dates on which to observe a price or index level.">
	valuationDates CommodityValuationDates (0..1) <"Defines when a price or index level will be observed that will figure in the return calculation.">
	annualizationFactor number (1..1) <"This specifies the numerator of an annualization factor. Frequently this number is equal to the number of observations of prices in a year e.g. 252.">
	nAdjustment boolean (1..1) <"Specifies whether denominator of the annualization factor is N (\"false\") or N - 1 (\"true\").">

type DataProvider: <"Specify as applicable. Parties may wish to refer to the state meteorological authority in a particular location or to an exchange or other third party data provider. Parties may find the definitions in the Commodity Definitions useful as a means of identifying potential Data Providers.">

	value Scheme (1..1)
	weatherDataProviderScheme NonEmptyURI (0..1)
	id string (0..1)

type DisruptionFallback: <"A Disruption Fallback.">

	value Scheme (1..1)
	commodityMarketDisruptionFallbackScheme NonEmptyURI (0..1)

type EEPParameters: <"Excess Emission Penalty related parameters.">

	eEPApplicable boolean (1..1) <"If Excess Emission Penalty is specified to be applicable in the Confirmation then the Excess Emission Penalty will be determined in the manner specified in the Confirmation (see other EEP parameters)">
	riskPeriod EEPRiskPeriod (1..1) <"Used to determine how provisions in Part [7] Page 7 (B) Failure to Deliver Not Remedied are to be applied.">
	equivalentApplicable boolean (1..1) <"When \"true\" the EEP Equivalent is applicable. See Part [7] definition of EEP Equivalent.">
	penaltyApplicable boolean (1..1) <"When \"true\" the Excess Emissions Penalty is applicable. See Part [7] definition of Excess Emissions Penalty.">

type EEPRiskPeriod: <"TBD.">

	startDate date (1..1)
	endDate date (1..1)

type ElectricityDelivery: <"The physical delivery conditions for electricity.">

	electricityDeliverySequence0 ElectricityDeliverySequence0 (0..1)
	electricityDeliverySequence1 ElectricityDeliverySequence1 (0..1)

	condition Choice:
		one-of

type ElectricityDeliverySequence0:

	deliveryPoint ElectricityDeliveryPoint (1..1) <"The point at which delivery of the electricity will occur.">
	deliveryType ElectricityDeliveryType (0..1) <"Indicates the under what conditions the Parties\' delivery obligations apply.">
	transmissionContingency ElectricityTransmissionContingency (0..1) <"Indicates that the performance of the buyer or seller shall be excused (under the conditions specified) if transmission of the elctricity is unavailable or interrupted.">
	interconnectionPoint InterconnectionPoint (0..1) <"Identification of the border(s) or border point(s) of a transportation contract.">

type ElectricityDeliverySequence1:

	deliveryZone CommodityDeliveryPoint (1..1) <"The zone covering potential delivery points for the electricity.">
	electingPartyReference PartyReference (0..1) <"Indicates the party able to decide which delivery point within the deliveryPoint is used for delivery. For EEI transactions, this should reference the seller of the electricity.">

type ElectricityDeliveryFirm: <"The physical delivery obligation options specific to a firm transaction.">

	forceMajeure boolean (1..1) <"If true, indicates that the buyer and seller should be excused of their delivery obligations when such performance is prevented by Force Majeure. For EEI transactions, this would indicate \"Firm (LD)\" If false, indicates that the buyer and seller should not be excused of their delivery obligations when such performance is prevented by Force Majeure. For EEI transactions, this would indicate \"Firm (No Force Majeure)\"">

type ElectricityDeliveryPoint: <"A scheme identifying the types of the Delivery Point for a physically settled electricity trade.">

	value Scheme (1..1)
	deliveryPointScheme NonEmptyURI (0..1)

type ElectricityDeliverySystemFirm: <"The physical delivery obligation options specific to a system firm transaction.">

	applicable boolean (1..1) <"Indicates that the trade is for a System Firm product. Should always be set to \"true\".">
	system CommodityDeliveryPoint (0..1)

type ElectricityDeliveryType:

	firm ElectricityDeliveryFirm (0..1) <"Indicates under what condtitions the Parties\' delivery obligations apply.">
	nonFirm boolean (0..1) <"If present and set to true, indicates that delivery or receipt of the electricity may be interrupted for any reason or for no reason, without liability on the part of either Party. This element should never have a value of false.">
	systemFirm ElectricityDeliverySystemFirm (0..1) <"Indicates that the electricity is intended to be supplied from the owned or controlled generation or pre-existing purchased power assets of the system specified.">
	unitFirm ElectricityDeliveryUnitFirm (0..1) <"Indicates that the electricity is intended to be supplied from a generation asset which can optionally be specified.">

	condition Choice:
		one-of

type ElectricityDeliveryUnitFirm: <"The physical delivery obligation options specific to a unit firm transaction.">

	applicable boolean (1..1) <"Indicates that the trade is for a Unit Firm product. Should always be set to \"true\".">
	generationAsset CommodityDeliveryPoint (0..1)

type ElectricityPhysicalDeliveryQuantity extends CommodityNotionalQuantity: <"A type defining the physical quantity of the electricity to be delivered.">

	settlementPeriodsReference SettlementPeriodsReference (1..*) <"A pointer style reference to the range(s) of Settlement Periods to which this quantity applies.">

type ElectricityPhysicalDeliveryQuantitySchedule extends CommodityPhysicalQuantitySchedule: <"Allows the documentation of a shaped quantity trade where the quantity changes over the life of the transaction.">

	settlementPeriodsReference SettlementPeriodsReference (1..*) <"A pointer style reference to the range(s) of Settlement Periods to which this quantity applies.">

type ElectricityPhysicalQuantity extends CommodityPhysicalQuantityBase: <"The quantity of gas to be delivered.">

	physicalQuantity ElectricityPhysicalDeliveryQuantity (0..*) <"The Quantity per Delivery Period.">
	physicalQuantitySchedule ElectricityPhysicalDeliveryQuantitySchedule (0..*) <"Allows the documentation of a shaped quantity trade where the quantity changes over the life of the transaction. Note that if the range of Settlement Periods also varies over the life of the transaction this element should not be used. Instead, physicalQuantity should be repeated for each range of Settlement Periods that apply at any point during the trade.">
	totalPhysicalQuantity UnitQuantity (0..1) <"The Total Quantity of the commodity to be delivered.">

	condition Choice:
		required choice physicalQuantity, physicalQuantitySchedule

type ElectricityProduct: <"The specification of the electricity to be delivered.">

	_type ElectricityProductTypeEnum (1..1) <"The type of electricity product to be delivered.">
	voltage PositiveDecimal (0..1) <"The voltage, expressed as a number of volts, of the electricity to be delivered.">

type ElectricityTransmissionContingency: <"A structure to specify the tranmission contingency and the party that bears the obligation.">

	contingency ElectricityTransmissionContingencyType (1..1) <"The conditions under which the party specified in contingentParty will be excused from damages if transmission is interrupted or curtailed.">
	contingentParty PartyReference (1..2) <"The party to which the contingency applies.">

type ElectricityTransmissionContingencyType: <"The type of transmission contingency, i.e. what portion of the transmission the delivery obligations are applicable.">

	value Scheme (1..1)
	electricityTransmissionContingencyScheme NonEmptyURI (0..1)

type EnvironmentalProduct: <"A type defining the characteristics of the environmental allowance or credit being traded. Settlement of environmental transactions is classified as physical because settlement is accomplished through the exchange of one or more certificates (despite the fact that this exchange is almost always executed through electronic book entry transfer between the parties allowance accounts).">

	productType EnvironmentalProductTypeEnum (1..1) <"Specifies the type of environmental allowance or credit. Examples include allowances or credit issued by the European Union (E.U.) or by the State of California in the Unites States.">
	compliancePeriod EnvironmentalProductComplaincePeriod (0..1) <"Applies to E.U. Emissions Allowance Transactions. Describes Specified Compliance Period for which the Allowances are issued.">
	vintage int (0..*) <"Applies to U.S. Emissions Allowance Transactions. The year(s) of the applicable Emissions Product(s) as specified in an Emissions Transaction.">
	applicableLaw EnvironmentalProductApplicableLaw (0..1) <"Applies to U.S. Emissions Allowance Transactions. Used to specify the Applicable Emissions Law when this is not defined in Emissions Product Definitions Exhibit.">
	trackingSystem EnvironmentalTrackingSystem (0..1) <"Applies to U.S. Emissions Allowance Transactions. Used to specify the Tracking System when this is not defined in Emissions Product Definitions Exhibit.">

type EnvironmentalProductApplicableLaw: <"TBD.">

	value Scheme (1..1)
	environmentalProductApplicableLawScheme NonEmptyURI (0..1)

type EnvironmentalProductComplaincePeriod:

	startYear int (1..1) <"The first year of the Compliance Period.">
	endYear int (1..1) <"The last year of the Commpliance Period.">

type EnvironmentalTrackingSystem: <"For US Emissions Allowance Transactions. A system where all electronic certificates are stored and emissions are tracked.">

	value Scheme (1..1)
	commodityEnvironmentalTrackingSystemScheme NonEmptyURI (0..1)

type FinancialSwapLeg extends CommoditySwapLeg: <"The common components of a financially settled leg of a Commodity Swap. This is an abstract type and should be extended by commodity-specific types.">

	payerReceiverModel PayerReceiverModel (1..1)

type FixedPrice: <"A type defining the Fixed Price.">

	price number (1..1) <"The Fixed Price.">
	priceModel PriceModel (1..1)
	id string (0..1)

type FixedPriceLeg extends FinancialSwapLeg: <"Fixed Price Leg of a Commodity Swap. It defines schedule of fixed payments associated with a commodity swap.">

	commodityCalculationPeriodsModel CommodityCalculationPeriodsModel (1..1)
	commodityFixedPriceModel CommodityFixedPriceModel (1..1)
	commodityNotionalQuantityModel CommodityNotionalQuantityModel (1..1)
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)
	commodityFreightFlatRateModel CommodityFreightFlatRateModel (0..1)

type FloatingLegCalculation: <"A type to capture details relevant to the calculation of the floating price.">

	pricingDates CommodityPricingDates (1..1) <"Commodity Pricing Dates.">
	averagingMethod AveragingMethodEnum (0..1) <"The parties may specify a Method of Averaging where more than one pricing Dates is being specified as being applicable.">
	conversionFactor number (0..1) <"If the Notional Quantity is specified in units that do not match the units in which the Commodity Reference Price is quoted, the scaling or conversion factor used to convert the Commodity Reference Price units into the Notional Quantity units should be stated here. If there is no conversion, this element is not intended to be used.">
	rounding Rounding (0..1) <"Rounding direction and precision for price values.">
	spread CommoditySpread (0..1) <"The spread over or under the Commodity Reference Price for this leg of the trade.">
	spreadSchedule CommoditySpreadSchedule (0..*) <"The spread over or under the Commodity Reference Price for this leg of the trade for each Calculation Period.">
	spreadPercentage number (0..1) <"The spread percentage over or under the Commodity Reference Price for this leg of the trade.">
	fx CommodityFx (0..1) <"Defines how observations of FX prices are to be used to calculate a factor with which to convert the observed Commodity Reference Price to the Settlement Currency.">

	condition Choice:
		optional choice spread, spreadSchedule , spreadPercentage

type FloatingPriceLeg extends FinancialSwapLeg: <"Floating Price Leg of a Commodity Swap. Each \'floatingLeg\' defines a series of financial payments for a commodity the value of which is derived from a floating price such as an exchange or an index publication.">

	commodityCalculationPeriodsModel CommodityCalculationPeriodsModel (1..1)
	commodity Commodity (1..1) <"Specifies the underlying instrument. Only underlyers of type Commodity are supported.">
	commodityNotionalQuantityModel CommodityNotionalQuantityModel (1..1)
	calculation FloatingLegCalculation (1..1) <"Defines details relevant to the calculation of the floating price.">
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)
	commodityFreightFlatRateModel CommodityFreightFlatRateModel (0..1)

type FloatingStrikePrice extends FloatingLegCalculation:

	commodity Commodity (1..1)

type GasDelivery: <"The specification of the gas to be delivered.">

	commodityDeliveryPointsModel CommodityDeliveryPointsModel (1..1)
	deliveryType DeliveryTypeEnum (1..1) <"Indicates whether the buyer and seller are contractually obliged to consume and supply the specified quantities of the commodity.">
	interconnectionPoint InterconnectionPoint (0..1) <"Identification of the border(s) or border point(s) of a transportation contract.">
	gasDeliverySequence GasDeliverySequence (0..1)

type GasDeliverySequence:

	buyerHub CommodityHub (1..1) <"The hub code of the gas buyer.">
	sellerHub CommodityHub (1..1) <"The hub code of the has seller.">

type GasDeliveryPeriods extends CommodityDeliveryPeriods: <"The different options for specifying the Delivery Periods for a physically settled gas trade.">

	gasDeliveryPeriodsSequence GasDeliveryPeriodsSequence (0..1)

type GasDeliveryPeriodsSequence:

	supplyStartTime PrevailingTime (1..1) <"The time at which gas delivery should start on each day of the Delivery Period(s).">
	supplyEndTime PrevailingTime (1..1) <"The time at which gas delivery should end on each day of the Delivery Period(s).">

type GasDeliveryPoint: <"A scheme identifying the types of the Delivery Point for a physically settled gas trade.">

	value Scheme (1..1)
	deliveryPointScheme NonEmptyURI (0..1)

type GasPhysicalQuantity extends CommodityPhysicalQuantityBase: <"The quantity of gas to be delivered.">

	commodityFixedPhysicalQuantityModel CommodityFixedPhysicalQuantityModel (0..1)
	gasPhysicalQuantitySequence GasPhysicalQuantitySequence (0..1)

	condition Choice:
		required choice commodityFixedPhysicalQuantityModel, gasPhysicalQuantitySequence

type GasPhysicalQuantitySequence:

	minPhysicalQuantity CommodityNotionalQuantity (1..*) <"The minimum quantity to be delivered. If separate minimums need to be specified for different periods (e.g. a minimum per day and a minimum per month) this element should be repeated.">
	maxPhysicalQuantity CommodityNotionalQuantity (1..*) <"The maximum quantity to be delivered. If separate minimums need to be specified for different periods (e.g. a minimum per day and a minimum per month) this element should be repeated.">
	electingParty PartyReference (0..1) <"Indicates the party able to choose whether the gas is delivered for a particular period e.g. a swing or interruptible contract.">

type GasProduct: <"A type defining the characteristics of the gas being traded in a physically settled gas transaction.">

	_type GasProductTypeEnum (1..1) <"The type of gas to be delivered.">
	calorificValue NonNegativeDecimal (0..1) <"The calorific value of the gas to be delivered, specified in megajoules per cubic meter (MJ/m3).">
	quality GasQuality (0..1) <"The quality of the gas to be delivered.">

	condition Choice:
		optional choice calorificValue, quality

type GasQuality: <"The quantity of gas to be delivered.">

	value Scheme (1..1)
	gasQualityScheme NonEmptyURI (0..1)

type InterconnectionPoint: <"Identification of the border(s) or border point(s) of a transportation contract. Use the list of EIC codes for timelines for electricity (T Codes) or the list of EIC codes for measurement points for gas (Z Codes).">

	value Scheme (1..1)
	interconnectionPointScheme NonEmptyURI (0..1)

type Lag: <"An observation period that is offset from a Calculation Period.">

	lagDuration Period (1..1) <"The period during which observations will be made. If a firstObservationDateOffset is specified, the observation period will start the specified interval prior to each Calculation Period - i.e. if the firstObservationDateOffset is 4 months and the lagDuration is 3 months, observations will be taken in months 4,3 and 2 (but not 1) prior to each Calculation Period. If no firstObservationDate is specified, the observation period will end immediately preceding each Calculation Period.">
	firstObservationDateOffset Period (0..1) <"The interval between the start of each lagDuration and the start of each respective calculation period.">
	id string (0..1)

type LagReference extends Reference: <"Allows a lag to reference one already defined elsewhere in the trade.">

	href string (1..1)

type MarketDisruptionEvent: <"A Market Disruption Event.">

	value Scheme (1..1)
	commodityMarketDisruptionScheme NonEmptyURI (0..1)

type Material: <"A scheme identifying the types of metal product for a physically settled metal trade.">

	value Scheme (1..1)
	commodityMetalProductTypeScheme NonEmptyURI (0..1)

type Metal: <"A type defining the characteristics of the metal product being traded in a physically settled metal transaction.">

	material Material (1..1) <"The types of metal product for a physically settled metal trade.">
	shape CommodityMetalShape (1..*) <"The physical shape(s) which can be delivered in Seller\'s option.">
	brand CommodityMetalBrand (0..*) <"The brand(s) of material which can be delivered in Seller\'s option.">
	grade CommodityMetalGrade (1..*) <"The grade(s) of material which can be delivered in seller\'s option.">

type MetalDelivery: <"The physical delivery conditions for the transaction.">

	deliveryLocation CommodityDeliveryPoint (1..1) <"The Delivery Point for a physically settled non-precious metal transaction.">
	risk CommodityDeliveryRisk (0..1) <"\"Risk of loss\" may also be used, equivalently, on confirmation documents.">
	totalQuantityTolerance number (1..1) <"The +/- percent tolerance in seller\'s option which applies to the total quantity delivered over all shipment periods.">
	periodQuantityTolerance number (1..1) <"The +/- percentage quantity tolerance in seller\'s option which applied to each shipment period.">
	title MetalTitleEnum (1..1) <"Describes how and when title to the commodity transfers.">

type NonPeriodicFixedPriceLeg extends CommoditySwapLeg: <"The details of a fixed payment. Can be used for a forward transaction or as the base for a more complex fixed leg component such as the fixed leg of a swap.">

	payerReceiverModel PayerReceiverModel (1..1)
	fixedPrice FixedPrice (1..1) <"Fixed price on which fixed payments are based.">
	totalPrice NonNegativeMoney (0..1) <"The total amount of the fixed payment for all units of the underlying commodity.">
	quantityReference QuantityReference (1..1) <"A pointer style reference to a quantity defined on another leg.">
	commodityPaymentDatesModel CommodityPaymentDatesModel (1..1)

type OilDelivery: <"The physical delivery conditions for an oil product.">

	pipeline OilPipelineDelivery (0..1) <"Specified the delivery conditions where the oil product is to be delivered by pipeline.">
	transfer OilTransferDelivery (0..1) <"Specified the delivery conditions where the oil product is to be delivered by title transfer.">
	importerOfRecord PartyReference (0..1) <"Specifies which party is the Importer of Record for the purposes of paying customs duties and applicable taxes or costs related to the import of the oil product.">
	absoluteTolerance AbsoluteTolerance (0..1) <"Specifies the allowable quantity tolerance as an absolute quantity.">
	percentageTolerance PercentageTolerance (0..1) <"Specifies the allowable quantity tolerance as a percentage of the quantity.">

	condition Choice0:
		required choice pipeline, transfer

	condition Choice1:
		optional choice absoluteTolerance, percentageTolerance

type OilPipelineDelivery: <"The physical delivery conditions specific to an oil product delivered by pipeline.">

	pipelineName CommodityPipeline (1..1) <"The name of pipeline by which the oil product will be delivered.">
	withdrawalPoint CommodityDeliveryPoint (0..1) <"The location at which the transfer of the title to the commodity takes place.">
	entryPoint CommodityDeliveryPoint (0..1) <"The point at which the oil product will enter the pipeline.">
	deliverableByBarge boolean (1..1) <"Whether or not the delivery can go to barge. For trades documented under the ISDA Master Agreement and Oil Annex, this should always be set to \'false\'.">
	risk CommodityDeliveryRisk (0..1) <"Specifies how the risk associated with the delivery is assigned. For trades documented under the ISDA Master Agreement and Oil Annex, this presence of this element indicates that the provisions of clause (b)(i) of the ISDA Oil Annex are being varied.">
	cycle CommodityPipelineCycle (0..*) <"The cycle(s) during which the oil product will be transported in the pipeline.">

type OilProduct: <"The specification of the oil product to be delivered.">

	_type OilProductType (1..1) <"The type of oil product to be delivered.">
	grade CommodityProductGrade (1..1) <"The grade of oil product to be delivered.">

type OilProductType: <"The type of physical commodity product to be delivered.">

	value Scheme (1..1)
	commodityOilProductTypeScheme NonEmptyURI (0..1)

type OilTransferDelivery: <"The physical delivery conditions specific to an oil product delivered by title transfer.">

	applicable boolean (1..1) <"Indicates that the oil product will be delivered by title transfer. Should always be set to \"true\".">
	deliveryLocation CommodityDeliveryPoint (0..1) <"The location at which the transfer of the title to the commodity takes place.">

type PercentageTolerance: <"The acceptable tolerance in the delivered quantity of a physical commodity product in terms of a percentage of the agreed delivery quantity.">

	postitive RestrictedPercentage (1..1) <"The maximum percentage amount by which the quantity delivered can exceed the agreed quantity.">
	negative RestrictedPercentage (1..1) <"The maximum percentage amount by which the quantity delivered can be less than the agreed quantity.">
	option PartyReference (0..1) <"Indicates whether the tolerance it at the seller\'s or buyer\'s option.">

type PhysicalForwardLeg extends CommodityForwardLeg: <"The common components of a physically settled leg of a Commodity Forward. This is an abstract type and should be extended by commodity-specific types.">

	payerReceiverModel PayerReceiverModel (1..1)

type PhysicalSwapLeg extends CommoditySwapLeg: <"The common components of a physically settled leg of a Commodity Swap. This is an abstract type and should be extended by commodity-specific types.">

	payerReceiverModel PayerReceiverModel (1..1)

type QuantityReference extends Reference: <"A pointer tyle reference to a Quantity defined elsewhere.">

	href string (1..1)

type ReferenceLevel:

	amount number (1..1)
	referenceLevelUnit ReferenceLevelUnit (1..1)

type ReferenceLevelUnit: <"CPD Reference Level: millimeters or inches of daily precipitation HDD Reference Level: degree-days CDD Reference Level: degree-days.">

	value Scheme (1..1)
	weatherIndexReferenceLevelScheme NonEmptyURI (0..1)

type SequencedDisruptionFallback: <"A Disruption Fallback with the sequence in which it should be applied relative to other Disruption Fallbacks.">

	fallback DisruptionFallback (1..1) <"Disruption fallback that applies to the trade.">
	sequence int(min: 1) (1..1) <"Sequence in which the reference to the disruption fallback should be applied.">

type SettlementPeriods: <"Specifies a set of Settlement Periods associated with an Electricity Transaction for delivery on an Applicable Day or for a series of Applicable Days.">

	duration SettlementPeriodDurationEnum (1..1) <"The length of each Settlement Period.">
	applicableDay DayOfWeekExtEnum (0..7) <"Specifies the Applicable Day with respect to a range of Settlement Periods. This element can only be omitted if includesHolidays is present, in which case this range of Settlement Periods will apply to days that are holidays only.">
	startTime OffsetPrevailingTime (1..1) <"Specifies the hour-ending Start Time with respect to a range of Settlement Periods.">
	endTime OffsetPrevailingTime (1..1) <"Specifies the hour-ending End Time with respect to a range of Settlement Periods. If neither startTime nor endTime contain an offset element and endTime is earlier than startTime, this indicates that the time period \"wraps around\" midnight. For example, if startTime is 23:00 and endTime is 01:00 then Settlement Periods apply from 22:00 to 23:00 and 23:00 to 00:00 and 00:00 to 01:00 on each included day.">
	timeDuration time (0..1) <"Specifies the duration of the time window during which settlement/delivery occurs.">
	excludeHolidays CommodityBusinessCalendar (0..1) <"Indicates that days that are holidays according to the referenced commodity business calendar should be excluded from this range of Settlement Periods, even if such day is an applicable day.">
	includeHolidays CommodityBusinessCalendar (0..1) <"Indicates that days that are holidays according to the referenced commodity business calendar should be included in this range of Settlement Periods, even if such day is not an applicable day.">
	id string (0..1)

	condition Choice:
		optional choice excludeHolidays, includeHolidays

type SettlementPeriodsFixedPrice extends FixedPrice: <"A type defining the Fixed Price applicable to a range or ranges of Settlement Periods.">

	settlementPeriodsReference SettlementPeriodsReference (1..*)

type SettlementPeriodsReference extends Reference: <"Allows a set of Settlement Periods to reference one already defined elsewhere in the trade.">

	href string (1..1)

type SettlementPeriodsSchedule: <"The specification of the Settlement Periods in which the electricity will be delivered for a \"shaped\" trade i.e. where different Settlement Period ranges will apply to different periods of the trade.">

	settlementPeriodsStep SettlementPeriodsStep (1..*) <"The range of Settlement Periods per Calculation Period. There must be a range of Settlement Periods specified for each Calculation Period, regardless of whether the range of Settlement Periods changes or stays the same between periods.">
	commodityDeliveryPeriodsPointerModel CommodityDeliveryPeriodsPointerModel (1..1)

type SettlementPeriodsStep: <"A reference to the range of Settlement Periods that applies to a given period of a transaction.">

	settlementPeriodsReference SettlementPeriodsReference (1..*) <"The specification of the Settlement Periods in which the electricity will be delivered. The Settlement Periods will apply for the duration of the appliable period. If more than one settlementPeriods element is present this indicates multiple ranges of Settlement Periods apply for the duration of the applicable period.">

type StrikePriceBasketReference extends Reference: <"A pointer style reference to a basket in the document">

	href string (1..1)

type StrikePriceUnderlyingReference extends Reference: <"A pointer style reference to a product leg in the document">

	href string (1..1)

type UnitQuantity: <"A quantity and associated unit.">

	quantityUnit QuantityUnit (1..1) <"Quantity Unit is the unit of measure applicable for the quantity on the Transaction.">
	quantity NonNegativeDecimal (1..1) <"Amount of commodity per quantity frequency.">
	id string (0..1)

type WeatherCalculationPeriod: <"The schedule of Calculation Period First Days and Lasts Days. If there is only one First Day - Last Day pair then the First is equal to the Effective Date and the Last Day is equal to the Termination Date.">

	calculationPeriodFirstDay IdentifiedDate (1..1)
	calculationPeriodEndDay IdentifiedDate (1..1)

type WeatherCalculationPeriods: <"The schedule of Calculation Period First Days and Lasts Days. If there is only one First Day - Last Day pair then the First is equal to the Effective Date and the Last Day is equal to the Termination Date.">

	calculationPeriod WeatherCalculationPeriod (1..*)
	id string (0..1)

type WeatherIndex: <"A type defining the Weather Index Level or Weather Index Strike Level.">

	quantity number (1..1) <"This is the Reference Level. The CDD, HDD or HDD Reference Level is specified as the number of (amount of) Weather Index Units specified by the parties in the related Confirmation.">
	unit QuantityUnit (1..1) <"Weather Index Unit derived from one of the following variable methods of determination: Cooling Degree Day (CDD), Heating Degree Day (HDD), Critical Precipitation Day (CPD) as defined in Section 11.15 of the 2005 ISDA Commodity Definitions and User Guide.">
	id string (0..1)

type WeatherIndexData:

	referenceLevel ReferenceLevel (1..1) <"Reference level is the number of degree-days (in the case of HDD and CDD) or inches/millimeters (in the case of CPD) on which the differential is calculated. In the case of HDD it is the number of degree-days below this reference level. In the case of CDD it is the number of degree days above this reference level. In the case of CPD it is number of inches/millimeters above this reference level.">
	dataProvider DataProvider (1..1) <"The provider of either temperature data or precipitation data specified by the parties in the related Confirmation.">
	finalEditedData boolean (1..1) <"If specified by the parties to apply in the related Confirmation, Final Edited Data means that the parties will have recourse to Primary Disruption Fallbacks even if relevant data is available from the Data Provider, so long as such data is not published in its final edited form. Otherwise the parties will have recourse to Primary Disruption Fallbacks only if relevant data is unavailable from the Data Provider on a relevant day.">
	weatherStation WeatherStation (1..1) <"The source or sources of weather index data specified by the parties in the related Confirmation. Examples include: AU-CBM (the Commonwealth Bureau of Meteorology in Australia) and CM-SMI (the Swiss Meteorological Institute).">
	weatherStationFallback WeatherStation (1..1) <"If weather index data is not available for the weather station specified by the parties in the related Confirmation, the first alternative Weather Index Station.">
	weatherStationSecondFallback WeatherStation (1..1) <"If weather index data is neither available for the weather station specified by the parties in the related Confirmation nor the first alternative Weather Index Station, the second alternative Weather Index Station.">
	alternativeDataProvider boolean (1..1) <"A provider of either temperature data or precipitation data specified by the parties in the related Confirmation. If the parties fail to specify an Alternative Data Provider, the \"Fallback Data\" Disruption Fallback will not apply.">
	synopticDataFallback boolean (1..1) <"If the parties specify \"Not Applicable\", the \"Synoptic Data\" Disruption Fallback will not apply. Synoptic Data means that maximum and/or minimum temperature or daily precipitation at the location for the Missing Data Day will be the maxium and/or minimum temperature or daily precipitation for that day at the Location (Weather Index Station) which has not been subject to ultimate quality control, integrity or verification process.">
	adjustmentToFallbackWeatherStation boolean (0..1) <"The Weather Index Station from which data with which to apply the \"Adjustement to Fallback Station Data\" terms. See Section 11.20 of the 2005 ISDA Commodity Definitions.">
	primaryDisruptionFallbacks DisruptionFallback (0..1) <"A list of actions available to the parties should a Primary Disruption Event occur. A Primary Disruption Event means if maximum or minimum temperature or precipitation data for a Missing Data Day is required to determine a Payment Amount then the maximum and/or minimum temperature or the daily precipitation for that day will be determined in accordance with the first applicable Primary Disruption Fallback.">
	secondaryDisruptionFallbacks DisruptionFallback (0..1) <"A list of actions available to the parties should a Secondary Disruption Event occur. A Primary Disruption Event means if maximum or minimum temperature or precipitation data for a Missing Data Day is required to determine a Payment Amount then the maximum and/or minimum temperature or the daily precipitation for that day will be determined in accordance with the first applicable Secondary Disruption Fallback.">

type WeatherLeg extends FinancialSwapLeg: <"A weather leg of a Commodity Swap defines Weather Index Swap transactions. Weather Index Swap transactions are OTC derivative transactions which settle financially based on an index calculated from observations of temperature, precipitation and other weather-related measurements at weather stations throughout the world. Sub-Annex C of the 2005 ISDA Commodity Definitions provides definitions and terms for a number of types of weather indices. These indices include: HDD (heating degree days), CDD (cooling degree days), CPD (critical precipitation days). Weather Index Swap transactions result in a cash flow to one of the two counterparties each Calculation Period depending on the relationship between the Settlement Level and the Weather Index Level. A Weather Index swap transaction always consists of a commodity swap element as a parent to two weatherLeg elements.">

	weatherIndexLevel WeatherIndex (1..1) <"Defining the Weather Index Level or Weather Index Strike Level.">
	weatherCalculationPeriodModel WeatherCalculationPeriodModel (1..1)
	weatherNotionalAmount NonNegativeMoney (1..1) <"Defines the price per weather index unit.">
	calculation WeatherLegCalculation (1..1) <"Defines details relevant to the calculation of the aggregate weather index amount.">
	paymentDates CommodityRelativePaymentDates (1..1) <"The Payment Dates of the trade relative to the Calculation Periods or Calculation Date">
	weatherIndexData WeatherIndexData (1..1) <"Specifies where the data (e.g. CPD) have been collected, an actual physical reference point (weather station) and various fall back arrangements.">

type WeatherLegCalculation: <"A type to capture details of the calculation of the Payment Amount on a Weather Index Transaction.">

	settlementLevel WeatherSettlementLevelEnum (1..1) <"The Settlement Level means either the cumulative number of Weather Index Units for each day in the Calculation Period (Cumulative) or the cumulative number of Weather Index Units for each day in the Calculation Period divided by the number of days in the Calculation Period (Average) or the maximum number of Weather Index Units for any day in the Calculation Period (Maximum) or the minimum number of Weather Index Units for any day in the Calculation Period.">
	referenceLevelEqualsZero boolean (1..1) <"If Reference Level Equals Zero is specified to be applicable then CPD means, for any day during the Calculation Period, (A) 1 if the Daily Precipitation for that day is greater than or equal to the CPD Reference Level or (B) zero if the the Daily Precipitation for that day is less than the CPD Reference Level. If Reference Level Equals Zero is specified not to be applicable then CPD means, for any day during the Calculation Period, (A) 1 if the Daily Precipitation for that day is greater than the CPD Reference Level or 0 if the Daily Precipitation for that day is less than or equal to the CPD Reference Level.">
	calculationDate Period (1..1) <"The number of days following the final day of the Calculation Period specified in the Confirmation on which is is practicable to provide the notice that the Calculation Agent is required to give for that Settlement Date or Payment Date.">
	businessDays BusinessCenter (1..1) <"A day on which commmercial banks settle payments and are open for general business in the place(s) specified in the Confirmation. See Section 1.3 of the ISDA 2005 Commodity Definitions.">
	dataCorrection boolean (1..1) <"The date payment often revised after its publication, this indicates if the payment date could be recalculated.">
	correctionPeriod Period (0..1) <"If \'dataCorrection\'=true, this indicates how long after the initial publication of the data corrections can be made.">
	maximumPaymentAmount NonNegativeMoney (0..1) <"The maximum total payment amount that will be paid in any particular transaction.">
	maximumTransactionPaymentAmount NonNegativeMoney (0..1) <"The maximum payment amount that will be paid in any particular Calculation Period.">
	rounding Rounding (0..1) <"Rounding direction and precision for price values.">

type WeatherStation: <"Weather Station.">

	weatherStationCity BusinessCenter (0..1)
	weatherStationAirport WeatherStationAirport (0..1)
	weatherStationWBAN WeatherStationWBAN (0..1)
	weatherStationWMO WeatherStationWMO (0..1)

	condition Choice:
		one-of

type WeatherStationAirport: <"A code identifying a Weather Station Airport (based on the the IATA standard).">

	value Scheme (1..1)
	weatherStationAirportScheme NonEmptyURI (0..1)
	id string (0..1)

type WeatherStationWBAN: <"A code identifying a Weather Station WBAN.">

	value Scheme (1..1)
	weatherStationWBANScheme NonEmptyURI (0..1)
	id string (0..1)

type WeatherStationWMO: <"A code identifying a Weather Index WMO.">

	value Scheme (1..1)
	weatherStationWMOScheme NonEmptyURI (0..1)
	id string (0..1)

type CommodityAsianModel: <"Model group containing features specific to Asian/averaging commodity options.">

	calculationPeriodsSchedule CommodityCalculationPeriodsSchedule (0..1) <"A parametric representation of the Calculation Periods of the Commodity Option Transaction.">
	calculationPeriods AdjustableDates (0..1) <"An absolute representation of the Calculation Period start dates of the Commodity Option Transaction.">
	pricingDates CommodityPricingDates (1..1) <"The dates on which the option will price.">
	averagingMethod AveragingMethodEnum (0..1) <"The Method of Averaging if there is more than one Pricing Date.">

	condition Choice:
		required choice calculationPeriodsSchedule, calculationPeriods

type CommodityBasketModel:

	notionalQuantityBasket CommodityBasketByNotional (0..1)
	notionalAmountBasket CommodityBasketByPercentage (0..1)

	condition Choice:
		one-of

type CommodityBasketOptionFeaturesModel: <"Describes the features a commodity basket option.">

	effectiveDate AdjustableOrRelativeDate (1..1) <"The effective date of the Commodity Option Transaction. Note that the Termination/Expiration Date should be specified in expirationDate within the CommodityAmericanExercise type or the CommodityEuropeanExercise type, as applicable.">
	terminationDate AdjustableOrRelativeDate (0..1) <"Specifies the termination date of the Commodity Option Transaction. In some confirmations this will be indicated as the second date in \"Option Term\" or \"Term\". Note: If provided, terminationDate should not be before specified expirationDate within the CommodityAmericanExercise type or the CommodityEuropeanExercise type.">
	calculationPeriodsSchedule CommodityCalculationPeriodsSchedule (0..1) <"A parametric representation of the Calculation Periods of the Commodity Option Transaction.">
	calculationPeriods AdjustableDates (0..1) <"An absolute representation of the Calculation Period start dates of the Commodity Option Transaction.">

	condition Choice:
		required choice calculationPeriodsSchedule, calculationPeriods

type CommodityCalculationPeriodsModel: <"The different options for specifying the Calculation Periods.">

	calculationDates AdjustableDates (0..1) <"The Calculation Period dates for this leg of the trade where the Calculation Periods are all one day long. Only dates explicitly included determine the Calculation Periods and there is a Calculation Period for each date specified. As such one-day Calculation Period are typical a physically-settled emissions or metals trades it is expected that this element will not be used in performance swaps.">
	calculationPeriods AdjustableDates (0..1) <"The Calculation Period start dates for this leg of the swap. This type is only intended to be used if the Calculation Periods differ on each leg. If Calculation Periods mirror another leg, then the calculationPeriodsReference element should be used to point to the Calculation Periods on that leg - or the calculationPeriodsScheduleReference can be used to point to the Calculation Periods Schedule for that leg.">
	calculationPeriodsSchedule CommodityCalculationPeriodsSchedule (0..1) <"The Calculation Periods for this leg of the swap. This type is only intended to be used if the Calculation Periods differ on each leg. If Calculation Periods mirror another leg, then the calculationPeriodsReference element should be used to point to the Calculation Periods on the other leg - or the calculationPeriodsScheduleReference can be used to point to the Calculation Periods Schedule for that leg.">
	commodityCalculationPeriodsPointerModel CommodityCalculationPeriodsPointerModel (0..1)

	condition Choice:
		one-of

type CommodityCalculationPeriodsPointerModel: <"Model group enables users to reference a Calculation Periods schedule in the form of a series of actual dates in a calculationPeriods container or in the form of a parameterized schedule in a calculationPeriodsSchedule container.">

	calculationPeriodsReference CalculationPeriodsReference (0..1) <"A pointer style reference to the Calculation Periods defined on another leg.">
	calculationPeriodsScheduleReference CalculationPeriodsScheduleReference (0..1) <"A pointer style reference to the Calculation Periods Schedule defined on another leg.">
	calculationPeriodsDatesReference CalculationPeriodsDatesReference (0..1) <"A pointer style reference to single-day-duration Calculation Periods defined on another leg.">

	condition Choice:
		one-of

type CommodityCoalCompositionModel: <"Items defining the chemical composition of the coal product.">

	moisture CoalAttributePercentage (0..1) <"The moisture content of the coal product.">
	ash CoalAttributePercentage (0..1) <"The ash content of the coal product.">
	sulfur CoalAttributePercentage (0..1) <"The sulfur/sulphur content of the coal product.">
	sO2 CoalAttributePercentage (0..1) <"The sulfur/sulphur dioxide content of the coal product.">
	volatile CoalAttributePercentage (0..1) <"The volatile content of the coal product.">

type CommodityCoalPropertiesModel: <"Items defining the physical attributes of the coal product.">

	btUperLB CoalAttributeDecimal (0..1) <"The number of British Thermal Units per Pound of the coal product.">
	topSize CoalAttributeDecimal (0..1) <"The smallest sieve opening that will result in less than 5% of a sample of the coal product remaining.">
	finesPassingScreen CoalAttributeDecimal (0..1)
	grindability CoalAttributeDecimal (0..1) <"The Hardgrove Grindability Index value of the coal to be delivered.">
	ashFusionTemperature CoalAttributeDecimal (0..1) <"The temperature at which the ash form of the coal product fuses completely in accordance with the ASTM International D1857 Standard Test Methodology.">

type CommodityCoalReducingAtmosphereModel: <"Items defining the attributes of the coal product determined by ash fusion tests.">

	initialDeformation CoalAttributeDecimal (0..1) <"The temperature at which an ash cone shows evidence of deformation.">
	softeningHeightWidth CoalAttributeDecimal (0..1) <"The temperature at which the height of an ash cone equals its width. (Softening temperature).">
	softeningHeightHalfWidth CoalAttributeDecimal (0..1) <"The temperature at which the height of an ash cone equals half its width. (Hemisphere temperature).">
	fluid CoalAttributeDecimal (0..1) <"The temperature at which the ash cone flattens.">

type CommodityContentModel: <"Items common to all Commodity Transactions.">

	commonPricing boolean (0..1) <"If Common Pricing is elected (“true”) for a Transaction with referencing more than one Commodity Reference Price then no date will be a Pricing Date unless such a date is a day on which all Commodity Reference Prices are scheduled to be published.">
	marketDisruption CommodityMarketDisruption (0..1) <"Contains contract terms related to triggers and responses to market disruptions as defined in the 1993 or 2005 Commodity Definitions.">
	settlementDisruption CommodityBullionSettlementDisruptionEnum (0..1) <"Describes contract terms related to the consequences of Bullion Settlement Disruption Events.">
	rounding Rounding (0..1) <"Rounding direction and precision for amounts.">

type CommodityDeliveryPeriodsPointerModel: <"Model group to enable users to reference a Delivery Periods schedule in the form of a series of actual dates in a deliveryPeriods container or in the form of a parameterised schedule in a deliveryPeriodsSchedule container.">

	deliveryPeriodsReference CalculationPeriodsReference (0..1) <"A pointer style reference to the Delivery Periods defined elsewhere.">
	deliveryPeriodsScheduleReference CalculationPeriodsScheduleReference (0..1) <"A pointer style reference to the Calculation Periods Schedule defined elsewhere.">

	condition Choice:
		one-of

type CommodityDeliveryPointsModel: <"A Delivery Point, applicable to physically settled commodity transactions.">

	deliveryPoint GasDeliveryPoint (0..1) <"The physical or virtual point at which the commodity will be delivered.">
	commodityDeliveryPointsModelSequence CommodityDeliveryPointsModelSequence (0..1)

	condition Choice:
		one-of

type CommodityDeliveryPointsModelSequence:

	entryPoint CommodityDeliveryPoint (1..1) <"The physical or virtual point at which the commodity enters a transportation system.">
	withdrawalPoint CommodityDeliveryPoint (1..1) <"The physical or virtual point at which the commodity is withdrawn from a transportation system.">

type CommodityDigitalOptionFeaturesModel: <"Describes features of the digital option.">

	effectiveDate AdjustableOrRelativeDate (0..1) <"The effective date of the Commodity Option Transaction. Note that the Termination/Expiration Date should be specified in expirationDate within the CommodityAmericanExercise type or the CommodityEuropeanExercise type, as applicable.">
	terminationDate AdjustableOrRelativeDate (0..1) <"Specifies the termination date of the Commodity Option Transaction. In some confirmations this will be indicated as the second date in \"Option Term\" or \"Term\". Note: If provided, terminationDate should not be before specified expirationDate within the CommodityAmericanExercise type or the CommodityEuropeanExercise type.">
	commodityAsianModel CommodityAsianModel (0..1)
	digital CommodityDigital (1..1) <"The barrier and cash payout features of the digital option.">

type CommodityFinancialOptionModel: <"Items specific to financially-settled commodity options.">

	commodity Commodity (1..1) <"Specifies the underlying instrument. Usual content is an ISDA Commodity Reference Price Name. The \'commodity\' underlyer component is specified using a reference to the \'commodity\' asset (see description above at the Commodity Underlyer section).">
	commodityOptionFeaturesModel CommodityOptionFeaturesModel (0..1)
	commodityNotionalQuantityModel CommodityNotionalQuantityModel (1..1)
	exercise CommodityExercise (1..1) <"The parameters for defining how the commodity option can be exercised and how it is settled.">
	commodityStrikePriceModel CommodityStrikePriceModel (0..1)
	commodityFloatingStrikePriceModel CommodityFloatingStrikePriceModel (0..1)

	condition Choice:
		required choice commodityStrikePriceModel, commodityFloatingStrikePriceModel

type CommodityFixedPhysicalQuantityModel: <"The different options for specifying a fixed physical quantity of commodity to be delivered.">

	physicalQuantity CommodityNotionalQuantity (0..1) <"The Quantity per Delivery Period.">
	physicalQuantitySchedule CommodityPhysicalQuantitySchedule (0..1) <"Allows the documentation of a shaped quantity trade where the quantity changes over the life of the transaction.">
	totalPhysicalQuantity UnitQuantity (0..1) <"The Total Quantity of the commodity to be delivered.">

	condition Choice:
		required choice physicalQuantity, physicalQuantitySchedule

type CommodityFixedPriceModel: <"The different options for specifying the Fixed Price.">

	fixedPriceSchedule CommodityFixedPriceSchedule (0..1) <"Allows the specification of a Fixed Price that varies over the life of the trade.">
	commodityFixedPriceModelChoice CommodityFixedPriceModelChoice (0..1)
	totalPrice NonNegativeMoney (0..1) <"The total amount of all fixed payments due during the term of the trade.">

	condition Choice:
		required choice fixedPriceSchedule, commodityFixedPriceModelChoice

type CommodityFixedPriceModelChoice:

	fixedPrice FixedPrice (0..1) <"Fixed price on which fixed payments are based.">
	worldscaleRate number (0..1) <"For a WET Voyager Charter Commodity Swap, the number of Worldscale Points for purposes of the calculation of a Fixed Amount.">
	contractRate NonNegativeMoney (0..1) <"For a DRY Voyage Charter or Time Charter Commodity Swap, the price per relevant unit for pruposes of the calculation of a Fixed Amount.">
	settlementPeriodsPrice SettlementPeriodsFixedPrice (0..*) <"For an electricity transaction, the fixed price for one or more groups of Settlement Periods on which fixed payments are based. If the fixed price differs for different groups of Settlement Periods, this element should be repeated.">

	condition Choice:
		one-of

type CommodityFloatingStrikePriceModel: <"The different options for specifying the average strike price per unit. These options are to specify a single average strike price per unit or to specify a schedule of average strike prices.">

	floatingStrikePricePerUnit FloatingStrikePrice (0..1) <"The currency amount of the strike price per unit.">
	floatingStrikePricePerUnitSchedule CommodityCalculationPeriodsSchedule (0..1)

	condition Choice:
		one-of

type CommodityFreightFlatRateModel: <"The Flat Rate, applicable to Wet Voyager Charter Freight Swaps.">

	flatRate FlatRateEnum (1..1) <"Whether the Flat Rate is the New Worldwide Tanker Nominal Freight Scale for the Freight Index Route taken at the Trade Date of the transaction or taken on each Pricing Date.">
	flatRateAmount NonNegativeMoney (0..1) <"If flatRate is set to \"Fixed\", the actual value of the Flat Rate.">

type CommodityNonPeriodicPaymentDatesModel: <"The different options for specifying the Payment Date.">

	paymentDates AdjustableDatesOrRelativeDateOffset (0..1) <"Dates on which payments will be made.">
	masterAgreementPaymentDates boolean (0..1) <"If present and true indicates that the Payment Date(s) are specified in the relevant master agreement.">

	condition Choice:
		one-of

type CommodityNotionalQuantityModel: <"The different options for specifying the Notional Quantity. A flat notional for the term of the contract may be specified, or else the Notional Quantity per Calculation Period. In the latter case, there must be a notional quantity step specified for each Calculation Period, regardless of whether the Notional Quantity changes or remains the same between periods.">

	commodityNotionalQuantityModelSequence CommodityNotionalQuantityModelSequence (0..1)
	quantityReference QuantityReference (0..1) <"A pointer style reference to a quantity defined on another leg.">

	condition Choice:
		one-of

type CommodityNotionalQuantityModelSequence:

	notionalQuantitySchedule CommodityNotionalQuantitySchedule (0..1) <"Allows the documentation of a shaped notional trade where the notional changes over the life of the transaction.">
	notionalQuantity CommodityNotionalQuantity (0..1) <"The Notional Quantity.">
	settlementPeriodsNotionalQuantity CommoditySettlementPeriodsNotionalQuantity (0..*) <"For an electricity transaction, the Notional Quantity for a one or more groups of Settlement Periods to which the Notional Quantity is based. If the schedule differs for different groups of Settlement Periods, this element should be repeated.">
	totalNotionalQuantity number (0..1) <"The Total Notional Quantity.">

	condition Choice:
		required choice notionalQuantitySchedule, notionalQuantity , settlementPeriodsNotionalQuantity

type CommodityOptionFeaturesModel: <"Describes additional features within the option.">

	effectiveDate AdjustableOrRelativeDate (1..1) <"The effective date of the Commodity Option Transaction. Note that the Termination/Expiration Date should be specified in expirationDate within the CommodityAmericanExercise type or the CommodityEuropeanExercise type, as applicable.">
	terminationDate AdjustableOrRelativeDate (0..1) <"Specifies the termination date of the Commodity Option Transaction. In some confirmations this will be indicated as the second date in \"Option Term\" or \"Term\". Note: If provided, terminationDate should not be before specified expirationDate within the CommodityAmericanExercise type or the CommodityEuropeanExercise type.">
	commodityOptionFeaturesModelSequence CommodityOptionFeaturesModelSequence (0..1)
	barrier CommodityBarrier (0..1) <"Defines a commodity option barrier product feature.">

	condition Choice:
		optional choice commodityOptionFeaturesModelSequence, barrier

type CommodityOptionFeaturesModelSequence:

	commodityAsianModel CommodityAsianModel (1..1)
	barrier CommodityBarrier (0..1) <"Defines a commodity option barrier product feature.">

type CommodityPaymentDatesModel: <"The different options for specifying the Payment Date. This will consist of either a set of Payment Dates or else a Payment Date schedule.">

	relativePaymentDates CommodityRelativePaymentDates (0..1) <"The Payment Dates of the trade relative to the Calculation Periods.">
	commodityNonPeriodicPaymentDatesModel CommodityNonPeriodicPaymentDatesModel (0..1)

	condition Choice:
		one-of

type CommodityPhysicalOptionModel: <"Items specific to financially-settled commodity options.">

	commoditySwap CommoditySwaptionUnderlying (0..1)
	commodityForward CommodityForward (0..1)
	physicalExercise CommodityPhysicalExercise (1..1) <"The parameters for defining how the commodity option can be exercised into a physical transaction.">

	condition Choice:
		required choice commoditySwap, commodityForward

type CommodityStrikePriceModel: <"The different options for specifying the Strike price per unit.">

	strikePricePerUnit NonNegativeMoney (0..1) <"The currency amount of the strike price per unit.">
	strikePricePerUnitSchedule CommodityStrikeSchedule (0..1)

	condition Choice:
		one-of

type CommoditySwapDetailsModel:

	effectiveDate AdjustableOrRelativeDate (1..1) <"Specifies the effective date of this leg of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically point to the effective date of the other leg of the swap.">
	terminationDate AdjustableOrRelativeDate (1..1) <"Specifies the termination date of this leg of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically point to the termination date of the other leg of the swap.">
	settlementCurrency IdentifiedCurrency (1..1) <"The currency into which the Commodity Swap Transaction will settle. If this is not the same as the currency in which the Commodity Reference Price is quoted on a given floating leg of the Commodity Swap Transaction, then an FX rate should also be specified for that leg.">
	commoditySwapLeg CommoditySwapLeg (0..*)
	weatherLeg WeatherLeg (0..2) <"A weather leg element of a Commodity Swap defines Weather Index Swap transactions. Weather Index Swap transactions are OTC derivative transactions which settle financially based on an index calculated from observations of temperature, precipitation and other weather-related measurements at weather stations throughout the world. Sub-Annex C of the 2005 ISDA Commodity Definitions provides definitions and terms for a number of types of weather indices. These indices include: HDD (heating degree days), CDD (cooling degree days), CPD (critical precipitation days). Weather Index Swap transactions result in a cash flow to one of the two counterparties each Calculation Period depending on the relationship between the Settlement Level and the Weather Index Level. A Weather Index swap transaction always consists of a commodity swap element as a parent to two weatherLeg elements.">
	commodityContentModel CommodityContentModel (0..1)

	condition Choice:
		required choice commoditySwapLeg, weatherLeg

type CommodityUnderlyerChoiceModel: <"A type describing the type of underlyer: a single commodity or a basket of commodities.">

	commodity Commodity (0..1) <"Describes the swap\'s underlyer when it has only one asset component.">
	commodityBasket CommodityBasket (0..1) <"Describes the swap\'s underlyer when it has multiple asset components.">

	condition Choice:
		one-of

type CommodityUSCoalProductModel: <"Items specific to the definition of a US Coal Product.">

	btuQualityAdjustment CoalQualityAdjustments (1..1) <"The Quality Adjustment formula to be used where the Actual Shipment BTU/Lb value differs from the Standard BTU/Lb value.">
	so2QualityAdjustment CoalQualityAdjustments (0..1) <"The Quality Adjustment formula to be used where the Actual Shipment SO2/MMBTU value differs from the Standard SO2/MMBTU value.">

type CommodityUSCoalDeliveryModel: <"Items specific to the definition of the delivery of a US Coal Product.">

	quantityVariationAdjustment boolean (1..1) <"If true, indicates that QVA is applicable. If false, indicates that QVA is inapplicable.">
	transportationEquipment CoalTransportationEquipment (0..1) <"The transportation equipment with which the Coal Product will be delivered and received.">
	risk CommodityDeliveryRisk (0..1) <"Specifies how the risk associated with the delivery is assigned.">

type CommodityWeatherOptionModel: <"Described Weather Index Option component. Weather Index Option transactions are OTC derivative transactions which settle financially based on an index calculated from observations of temperature and precipitation at weather stations throughout the world. Sub-Annex C of the 2005 ISDA Commodity Definitions provides definitions and terms for a number of types of weather indices. These indices include: HDD (heating degree days), CDD (cooling degree days), CPD (critical precipitation days). Weather Index Option Transactions results in a cash flow to the buyer depending on the relationship between the Settlement Level to the Weather Index Strike Level.">

	effectiveDate AdjustableOrRelativeDate (1..1) <"Effective date of an option.">
	weatherCalculationPeriodModel WeatherCalculationPeriodModel (1..1)
	weatherNotionalAmount NonNegativeMoney (1..1)
	exercise CommodityExercise (1..1)
	weatherIndexStrikeLevel WeatherIndex (1..1) <"Weather Index strike price level is specified in terms of weather index units (e.g. 1 Days, 3 Inches, etc.)">
	calculation WeatherLegCalculation (1..1) <"Contains parameters which figure in the calculation of payments on a Weather Index Option.">
	weatherIndexData WeatherIndexData (1..1) <"Specifies where the data (e.g. CPD) have been collected, an actual physical reference point (weather station) and various fall back arrangements.">

type DaysModel: <"The different options for specifying which days are pricing days within a pricing period. Unless a lag element is present, the pricing period will be contained within the calculation period.">

	dayType CommodityDayTypeEnum (1..1) <"The type of day on which pricing occurs.">
	daysModelSequence0 DaysModelSequence0 (0..1)
	daysModelSequence1 DaysModelSequence1 (0..1)
	businessDayConvention BusinessDayConventionEnum (0..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">

	condition Choice:
		required choice daysModelSequence0, daysModelSequence1

type DaysModelSequence0:

	dayDistribution CommodityFrequencyType (1..1) <"The method by which the pricing days are distributed across the pricing period.">
	dayCount int(min: 1) (0..1) <"The number of days over which pricing should take place.">

type DaysModelSequence1:

	dayOfWeek DayOfWeekEnum (1..7) <"The day(s) of the week on which pricing will take place during the pricing period.">
	dayNumber int (0..1) <"The occurrence of the dayOfWeek within the pricing period on which pricing will take place, e.g. the 3rd Friday within each Calculation Period. If omitted, every dayOfWeek will be a pricing day.">

type LagOrReferenceModel: <"Allows a Lag or a LagReference to be specified.">

	lag Lag (0..1) <"The pricing period per calculation period if the pricing days do not wholly fall within the respective calculation period.">
	lagReference LagReference (0..1) <"Allows a lag to reference one already defined elsewhere in the trade.">

	condition Choice:
		one-of

type PriceModel: <"Price model group.">

	priceCurrency Currency (1..1) <"The currency used to specify the digital barrier in terms of a price per unit of commodity.">
	priceUnit QuantityUnit (1..1) <"The unit of measure used to specify the digital barrier in terms of a price per unit of commodity.">

type WeatherCalculationPeriodModel: <"Descriptions of a calculation period.">

	weatherCalculationPeriods WeatherCalculationPeriods (0..1)
	weatherCalculationPeriodsReference CalculationPeriodsReference (0..1)

	condition Choice:
		one-of

type AdjustableOffset extends Offset: <"An adjustable offset can be used to specify a number of days, business or calendar, for example in a notice period.">

	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)

type CollateralProfile:

	value Scheme (1..1)
	collateralProfileScheme NonEmptyURI (0..1)

type CollateralType:

	value Scheme (1..1)
	collateralTypeScheme NonEmptyURI (0..1)

type CollateralValuation: <"This type is used in Repo trades, to specify the valuation of a specific piece of collateral in the transaction.">

	bondCollateralModel BondCollateralModel (0..1)
	unitContractModel UnitContractModel (0..1)
	assetReference AssetReference (1..1) <"A reference to explicitly identify which asset is being valued.">

	condition Choice:
		required choice bondCollateralModel, unitContractModel

type DeliveryMethod: <"Specifies delivery methods for securities transactions. This coding-scheme defines the possible delivery methods for securities.">

	value Scheme (1..1)
	deliveryMethodScheme NonEmptyURI (0..1)

type InitialMargin: <"Defines initial margin applied to a repo transaction. Initial margin is an agreed premium to the Purchase Price of a repo to determine the required Market Value of the collateral to be delivered on the Purchase Date. It reflects quality of the collateral. Its aim is to calculate the risk-adjusted or liquidation value of collateral.">

	marginType MarginTypeEnum (1..1) <"An element defining the type of assets (cash or securities) specified to apply as margin to the repo transaction. See GMRA 2011 paragraph 2(h) for \"Cash Margin\" and GMRA 2011 paragraph 2(cc) for \"Margin Securities\".">
	margin InitialMarginCalculation (1..*) <"Initial margin calculation for a collateral asset. Initial margin requirements may be specified for multiple pieces of collateral.">
	marginThreshold NonNegativeMoney (0..1) <"An element defining a margin threshold which is the Net Exposure of a trade below which parties agree they will not call a margin from each other.">
	minimumTransferAmount NonNegativeMoney (0..1) <"An element defining a minimum transfer amount which is the minimum margin call parties will make once the margin threshold (or margin ratio threshold / haircut threshold) has been exceeded.">

type InitialMarginCalculation: <"Defines the initial margin calculation applicable to a single piece of collateral.">

	initialMarginCalculationSequence0 InitialMarginCalculationSequence0 (0..1)
	initialMarginCalculationSequence1 InitialMarginCalculationSequence1 (0..1)
	assetReference AssetReference (0..1) <"A reference to the collateral asset to which the margin requirement applies. This element should be produced in the case where margin requirements are specified for multiple pieces of collateral, and may be omitted otherwise.">

	condition Choice:
		required choice initialMarginCalculationSequence0, initialMarginCalculationSequence1

type InitialMarginCalculationSequence0:

	marginRatio number (1..1) <"An element defining an initial margin expressed as a ratio of the Market Value of the collateral to the Purchase Price. A default value of initial margin ratio of 1.00 means there is no margin and thus no risk related with the collateral. See GMRA 2000 paragraph 2(z) and GMRA 2011 paragraph 2(bb).">
	marginRatioThreshold number (0..2) <"An element defining a margin ratio threshold which is the value above (when it\'s lower than initial margin ratio) or below (when it\'s higher than initial margin ratio) which parties agree they will not call a margin from each other.">

type InitialMarginCalculationSequence1:

	haircut number (1..1) <"An element defining a haircut expressed as the percentage difference between the Market Value of the collateral and the Purchase Price of the repo and calculated as 100 multiplied by a ratio of the difference between the Market Value of the collateral and the Purchase Price of the repo to the Market Value of the collateral. Haircut is alternative way to adjust the value of collateral sold in a repurchase agreement to initial margin ratio. Because an initial margin is a percentage of the Purchase Price, while a haircut is a percentage of the Market Value of collateral, the arithmetic of initial margins and haircuts is slightly different. For example, an initial margin of 102% is not equivalent to a haircut of 2%, but to 1.961% (ie 100/102%). See GMRA 2011 paragraph 2(aa).">
	haircutThreshold number (0..2) <"An element defining a haircut percentage threshold which is the value above (when it\'s lower than initial haircut) or below (when it\'s higher than initial haircut) which parties agree they will not call a margin from each other.">

type PartyNoticePeriod: <"A type to represent agreed period of notice to be given in advance before exercise of the open repo trade by a party requesting such exercise and reference to that party.">

	partyReference PartyReference (1..1) <"A reference to a party who has the right to request exercise of the open repo trade and for whom noticePeriod is defined.">
	noticePeriod AdjustableOffset (1..1) <"Notice period for open repo transactions in number of days. This element represents agreed period of notice to be given in advance before exercise of the repo trade by a party requesting such exercise.">

type RelativePrice: <"A type which represents Pricing relative to a Benchmark.">

	spread number (1..1) <"Basis Point spread over a Benchmark.">
	bondEquityModel BondEquityModel (1..*)

type RepoSequence:

	callingParty CallingPartyEnum (1..1) <"A party to the open repo transaction that has a right to demand for exercise of far leg of the open repo transaction. This element represents an enumerated list that includes InitialBuyer, InitialSeller, Either, AsDefinedInMasterAgreement. In the default case either party can call for closing open repo transaction, unless otherwise specified. If electing parties are not defined in open repo confirmation, when they are defined by default in the Master Agreement, AsDefinedInMasterAgreement value should be used. Exact buyer/seller related parties, including any third parties who can demand exercise of open repo transactions on behalf of the parties to the trade (calculation agent, executing broker, etc.), can be defined in the relatedParty element (tradeHeader/partyTradeInformation).">
	callDate AdjustableOrRelativeDate (0..1) <"Defines the latest date when the open repo transaction can be exercised (and no later than which it must be exercised) on demand by a party to the trade indicated in the electingParty element (or in the Master Agreement, if the electingParty element has AsDefinedInMasterAgreement value). For instance, in the open repo transaction with callDate agreed as business day one year after the trade date far leg can be settled on any day after the near leg settlement date and before and including the callDate. If the call date is not defined in trade terms and / or not included into trade confirmation this element can be omitted.">
	noticePeriod AdjustableOffset (0..1) <"Notice period for open repo transactions in number of days. This element represents agreed period of notice to be given in advance before exercise of the repo trade by a party requesting such exercise.">
	partyNoticePeriod PartyNoticePeriod (0..2) <"Notice period for open repo transactions referenced to a party to the trade, in number of days. This element represents agreed period of notice to be given in advance before exercise of the repo trade by a party requesting such exercise and reference to that party.">

	condition Choice:
		optional choice noticePeriod, partyNoticePeriod

type RepoFarLeg extends RepoLegBase: <"A transaction leg for a repo is equivalent to a single cash transaction. It is augmented here to carry some values that are of interest for the repo. Also note that the BuyerSeller model in this transaction must be the exact opposite of the one found in the near leg.">

	settlementAmountOrCurrencyModel SettlementAmountOrCurrencyModel (1..1)
	fxRate FxRate (0..1) <"Indicates the rate of a currency conversion that is used to compute settlement amount for cross-currency transactions.">
	repoFarLegSequence RepoFarLegSequence (0..1)
	repoInterest number (0..1) <"The repo interest is basically the difference between the settlement amounts at spot and forward date. It is a fully figured amount, but it does not have to be specified in the message. It is not a \'Money\' amount as it is implicitly expressed in the settlement currency.">

type RepoFarLegSequence:

	deliveryMethod DeliveryMethod (1..1) <"Specifies a delivery method for the security transaction.">
	deliveryDate AdjustableOrRelativeDate (0..1) <"Delivery Date for the transaction. Delivery Date can be populated when it is not equal to the Settlement Date.">
	collateral CollateralValuation (1..*) <"Collateral element is used to carry the quantity and price details that are required to ensure that a repo contract is executed at fair value, with the value of the collateral matching the cash amount of the repo. Collateral is declared as optional here, with multiple cardinalities, since there can be a repo \"Multi\", with multiple instruments specified, or a \"Cash Borrow/Loan\" and “TriPartyRepo” with no collateral. In general cases, however it should be specified. This element can be omitted in farLeg.">

type RepoLegBase extends Leg: <"A transaction leg for a repo is equivalent to a single cash transaction. It is augmented here to carry some values that are of interest for the repo. Also note that the BuyerSeller model in this transaction must be the exact opposite of the one found in the near leg.">

	buyerSellerModel BuyerSellerModel (1..1)
	settlementDate AdjustableOrRelativeDate (1..1) <"Settlement or Payment Date for the transaction.">

type RepoNearLeg extends RepoLegBase: <"A transaction leg for a repo is equivalent to a single cash transaction.">

	settlementAmount Money (1..1) <"Settlement Amount">
	fxRate FxRate (0..1) <"Indicates the rate of a currency conversion that is used to compute settlement amount for cross-currency transactions.">
	repoNearLegSequence RepoNearLegSequence (0..1)

type RepoNearLegSequence:

	deliveryMethod DeliveryMethod (1..1) <"Specifies a delivery method for the security transaction.">
	deliveryDate AdjustableOrRelativeDate (0..1) <"Delivery Date for the transaction. Delivery Date can be populated when it is not equal to the Settlement Date.">
	collateral CollateralValuation (1..*) <"Collateral element is used to carry the quantity and price details that are required to ensure that a repo contract is executed at fair value, with the value of the collateral matching the cash amount of the repo. Collateral is declared as optional here, with multiple cardinalities, since there can be a repo \"Multi\", with multiple instruments specified, or a \"Cash Borrow/Loan\" and “TriPartyRepo” with no collateral. In general cases, however it should be specified. This element can be omitted in farLeg.">

type TriParty: <"The tri-party terms.">

	triPartyAgent PartyReference (1..1) <"The reference to the tri-party agent.">
	collateralProfile CollateralProfile (1..1) <"The collateral profile specified at the tri-party agent.">
	collateralType CollateralType (0..1) <"The collateral type, which is a restriction of the collateral deemed acceptable for the purpose of the transaction.">

type BondCollateralModel: <"A group which has Collateral elements.">

	nominalAmount Money (1..1) <"Total nominal amount of the given bonds used as collateral.">
	bondPriceAndYieldModel BondPriceAndYieldModel (0..1)
	accrualsAmount Money (0..1) <"Accruals expressed as amount.">

type BondEquityModel: <"A model group that allows us to specify that a repo contract can reference bond or equity instruments.">

	bondChoiceModel BondChoiceModel (0..1)
	equity EquityAsset (0..1)

	condition Choice:
		one-of

type BondPriceAndYieldModel: <"A group which has either Bond Price or Yield elements.">

	bondPriceAndYieldModelSequence BondPriceAndYieldModelSequence (0..1)
	dirtyPrice number (0..1) <"Bond dirty price, expressed in percentage points, 100 is the initial value of the bond.">
	relativePrice RelativePrice (0..1) <"Bond price relative to a Benchmark.">
	yieldToMaturity number (0..1) <"Yield to Maturity.">
	inflationFactor number (0..1) <"The inflation factor is specified for inflation-linked products which require some additional elements to calculate prices correctly.">
	allInPrice number (0..1) <"Bond all-in-price which is a price that includes all relevant price adjustments (i.e. accrued interest, haircut or margin ratio, inflation factor,etc.). It expresses a price in terms of percentage of nominal amount.">

	condition Choice:
		required choice bondPriceAndYieldModelSequence, dirtyPrice

type BondPriceAndYieldModelSequence:

	cleanPrice number (1..1) <"Bond clean price, expressed in percentage points, 100 is the initial value of the bond.">
	accruals number (0..1) <"Accruals, relationship is clean price and accruals equals dirty price, all prices are expressed in percentage points, 100 is the initial value of the bond.">
	dirtyPrice number (0..1) <"Bond dirty price, expressed in percentage points, 100 is the initial value of the bond.">

type ClearingRequirements:

	supervisoryBody SupervisoryBody (1..1) <"The regulator or other supervisory body to which the clearing requirements apply.">
	mandatorilyClearable boolean (1..1) <"Whether the particular trade type in question is required by this regulator to be cleared.">
	reason Reason (0..*) <"Indicates a reason supporting why the trade is mandatorily clearable or not.">

type Clearing: <"A structure describing a trade registration event that is part of a clearing process.">

	submitted TradeWrapper (1..1) <"The original trade or event submitted to the clearing service.">
	cleared TradeWrapper (2..2) <"The trades or events generated by the clearing service as a result of clearing.">

type ConfirmationRetracted extends NonCorrectableRequestMessage: <"A message indicating that a confirmation request has been withdrawn by the submitter.">

	tradingAndPostTradeEventsModel TradingAndPostTradeEventsModel (0..1)
	optionExercise OptionExercise (0..1) <"A structure describing an option exercise event. The optionExercise event supports partial exercise (specify the number of options or amount to exercise), full exercise (use fullExercise flag), as well as the option to request options not to be exercised.">
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

	condition Choice:
		optional choice tradingAndPostTradeEventsModel, optionExercise

type ConfirmationStatusSequence:

	assertedEvent EventsChoice (1..1) <"Event (trade or post-trade event) asserted by one of the parties.">
	proposedMatch EventProposedMatch (0..*) <"\"Other side\'s\" event (trade or post-trade event) that meets the minimimum matching criteria and is proposed as match to the event that is being asserted.">

type EventRequestAcknowledgement extends ResponseMessage: <"Defines the structure for a message acknowledging an event request.">

	originalMessage UnprocessedElementWrapper (0..1)
	tradeReferenceInformationModel TradeReferenceInformationModel (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type TradeWrapper: <"A structure that contains a business event.">

	tradeOrInfoModel TradeOrInfoModel (1..1)

type RequestedCollateralAllocationAction: <"A type that describes the type of collateral allocation action that is requested. The purpose is to allow FCMs to specify how the allocations are to be processed.">

	value Scheme (1..1)
	requestedCollateralAllocationActionScheme NonEmptyURI (0..1)

type ClearingResultsModel: <"Events/Results that are applicable to clearing processes.">

	tradingEventsModel TradingEventsModel (0..1)
	clearingResultsModelSequence ClearingResultsModelSequence (0..1)
	deClear DeClear (0..1) <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that it has been done.">
	clearing Clearing (0..1)

	condition Choice:
		one-of

type ClearingResultsModelSequence:

	terminatingEvent TerminatingEvent (0..1) <"This may be used to describe why a trade was terminated.">
	termination TradeNotionalChange (1..1)

type EventsOrInfoModel: <"Defines a model group that allows either details of an event or information about a trade to be provided. Typically this will be used in a response to a request.">

	tradingAndPostTradeEventsModel TradingAndPostTradeEventsModel (0..1)
	tradeReferenceInformationModel TradeReferenceInformationModel (0..1)

	condition Choice:
		one-of

type AffectedTransactions:

	tradeOrTradeReferenceModel TradeOrTradeReferenceModel (1..*)

type BankruptcyEvent extends CreditEvent:

type CreditEvent:

type CreditEventNoticeDocument: <"An event type that records the occurrence of a credit event notice.">

	affectedTransactions AffectedTransactions (0..1) <"Trades affected by this event.">
	referenceEntity LegalEntity (1..1)
	creditEvent CreditEvent (1..1)
	publiclyAvailableInformation Resource (0..*) <"A public information source, e.g. a particular newspaper or electronic news service, that may publish relevant information used in the determination of whether or not a credit event has occurred.">
	notifyingPartyReference PartyReference (1..1)
	notifiedPartyReference PartyReference (1..1)
	creditEventNoticeDate date (1..1)
	creditEventDate date (1..1)

type FailureToPayEvent extends CreditEvent:

type ObligationAccelerationEvent extends CreditEvent:

type ObligationDefaultEvent extends CreditEvent:

type RepudiationMoratoriumEvent extends CreditEvent:

type RestructuringEvent extends CreditEvent:

	partialExerciseAmount Money (0..1)

type AssetValuation extends Valuation: <"A structure that holds a set of measures about an asset, including possibly their sensitivities.">

	quote Quotation (0..*) <"One or more numerical measures relating to the asset, possibly together with sensitivities of that measure to pricing inputs.">
	fxRate FxRate (0..*) <"Indicates the rate of a currency conversion that may have been used to compute valuations.">

type Quotation: <"Some kind of numerical measure about an asset, eg. its NPV, together with characteristics of that measure, together with optional sensitivities.">

	quotationModel QuotationModel (1..1)
	sensitivitySet SensitivitySet (0..*) <"Zero or more sets of sensitivities of this measure to various input parameters.">

type Sensitivity: <"The sensitivity of a value to a defined change in input parameters.">

	value number (1..1)
	name NormalizedString (0..1) <"A optional name for this sensitivity. This is primarily intended for display purposes.">
	definitionRef string (0..1) <"A optional (but normally supplied) reference to the definition of this sensitivity.">

type SensitivitySet: <"A collection of sensitivities. References a definition that explains the meaning/type of the sensitivities.">

	name String (0..1)
	definitionReference SensitivitySetDefinitionReference (0..1) <"A reference to a sensitivity set definition.">
	sensitivity Sensitivity (0..*)
	id string (0..1)

type ValuationSetDetail: <"The amount of detail provided in the valuation set, e.g. is market environment data provided, are risk definitions provided, etc.">

	value Scheme (1..1)
	valuationSetDetailScheme NonEmptyURI (0..1)

type AbstractApplicablePartyProfileObjects: <"An abstract base type that combines objects applicable to the description of a party profile (e.g. applicable assets and cash evets to specific contacts or settlement instructions).">

	identifier AssociationToAssetIdentifier (1..1)
	applicableAssets ApplicableAssets (0..1) <"A structure which describes the applicable assets.">
	applicableTransactions ApplicableTransactionType (0..*) <"A scheme which defines the types of applicable transactions.">

type AbstractContractNotification extends AbstractServicingNotification: <"An extension of the AbstractServicingNotification which includes a reference to the facility and the loan contract to which embedded loan events apply. This abtract type should be used to \'wrap\' contract-level business events.">

	facilityOutstandingsPosition FacilityOutstandingsPosition (0..*)

type AbstractEventRequireId: <"An abstract base type for all loan business events.">

	eventIdentifier BusinessEventIdentifier (1..*)

type AbstractFacilityEvent extends AbstractLoanServicingEvent: <"An abstract base type for all facility-level business events.">

	facilityReference FacilityReference (1..1)

type AbstractFacility extends FacilitySummary: <"An abstract type defining a facility baseline structure.">

	governingLaw GoverningLaw (0..1) <"Defines the governing law (jurisdiction) under which the facility operates.">
	facilityFeaturesModel FacilityFeaturesModel (1..1)
	facilityOptionsFeesAndRatesModel FacilityOptionsFeesAndRatesModel (1..1)
	multiCurrency MultiCurrency (0..1) <"A container to denote whether funds may be drawn in multiple currency denominations, in addition to the base (facility) currency. The current commitment amount defines the base currency associated with the facility.">

type AbstractFacilityContractEvent extends AbstractLoanServicingEvent: <"An abstract base type for all facility and/or contract-level business events.">

	facilityReference FacilityReference (1..1)
	loanContractReference LoanContractReference (0..*) <"A loan contract summary structure.">

type AbstractFacilityNotification extends AbstractServicingNotification: <"An extension of the AbstractServicingNotification which includes a reference to the facility to which embedded loan events apply. This abtract type should be used to \'wrap\' facility-level business events.">

	facilityPosition FacilityPosition (0..1)

type AbstractLcEvent extends AbstractLoanServicingEvent: <"An abstract base type for all LC-level business events.">

	letterOfCreditReference LetterOfCreditReference (1..1)

type AbstractLoanEvent extends AbstractEventRequireId: <"An abstract base type defining common features of a syndicated loan business event.">

	parentEventIdentifier BusinessEventIdentifier (0..1)
	correctedEventIdentifier BusinessEventIdentifier (0..1) <"A unique id associated with a previous inaccurate event. Population of this identifier reflects the fact that this new event is being used to apply a \'corrective measure\' to the referenced event (rather than this being an actual real-life event). The net result (across both events) ensures accurate accounting.">
	lenderAndCashDetailsModel LenderAndCashDetailsModel (0..1)
	comment String (0..1) <"A freetext field which allows the sender to add further details around the business event.">

type AbstractLoanAllocationEvent extends AbstractLoanEvent: <"An abstract structure defining fundamental allocation event information.">

	allocationReference LoanAllocationReference (1..*) <"A reference to an allocation.">

type AbstractLoanAllocationPaymentNotification extends AbstractLoanTradingNotification: <"An underlying abstract structure for all syndicated loan servicing notifications; the wrapper for loan events which occur through the life-cycle of a deal.">

	payment LoanAllocationPayment (1..*) <"The payments/wiring instructions associated with all embedded loan events.">

type AbstractLoanAllocationSettlementEvent extends AbstractLoanEvent: <"An abstract structure defining fundamental settlement event information.">

	allocationReference LoanAllocationReference (1..1) <"Reference to the loan trade allocation.">
	settlementDate date (1..1) <"Date on which settlement will occur.">

type AbstractLoanAllocationSummary: <"An underlying structure defining fundamental allocation event information.">

	allocationIdentifier LoanAllocationIdentifier (1..1) <"Unique allocation id used to identify the allocation record.">
	amount Money (1..1) <"Amount allocated.">
	comment String (0..1) <"A freetext field which allows the sender to add further details around the allocation event.">

type AbstractLoanTask: <"An underlying abstract structure that defines the responsible party for tasks that must be completed.">

	taskIdentifier TaskIdentifier (1..1) <"The unique id of the settlement task.">
	parentTaskIdentifier TaskIdentifier (0..1) <"An identifier used to identify a group of related tasks.">
	correctedTaskIdentifier TaskIdentifier (0..1) <"A unique identifier associated with a previous ‘inaccurate task.’ Population of this identifier represents that this task is a ‘corrective measure’ to a previous task, rather than being a stand-alone task.">
	responsibleParty PartyReference (1..1) <"A reference to the party responsible for the completion of the settlement task.">
	dates LoanTradingSettlementTaskDates (1..1) <"Dates relevant to the settlement task.">
	status LoanTradingSettlementTaskStatusEnum (1..1) <"An enum to define the status of the settlement task.">
	comment String (0..1) <"A freetext field which allows the sender to add further details around the task.">

type AbstractLoanTradePaymentNotification extends AbstractLoanTradingNotification: <"An underlying abstract structure for all syndicated loan servicing notifications; the wrapper for payment events which occur through the life-cycle of a loan trade.">

	payment LoanTradePayment (1..*) <"The payments/wiring instructions associated with all embedded loan events.">

type AbstractLoanTradingNotification extends CorrectableRequestMessage: <"An underlying abstract structure for all syndicated loan servicing notifications; the wrapper for events which occur through the life-cycle of a loan trade.">

	noticeDate date (1..1) <"The business date on which the notice is valid (and was communicated).">
	partyReference PartyReference (1..1) <"The party sending the notification.">
	role LoanTradingPartyRole (1..1) <"The role of the party that is sending the notification.">

type AbstractLoanTrade extends AbstractLoanTradeSummary: <"An underlying structure defining fundamental master loan trade event information.">

	tradeDate date (1..1) <"The trade date associated with a specified trade record.">
	buyerSellerModel BuyerSellerModel (1..1)
	_type LoanTradingTypeEnum (1..1) <"Primary or Secondary.">
	whenIssuedFlag boolean (1..1) <"A flag to indicate the dependency of a secondary market loan trade upon the closing of a primary market loan structuring and syndication process.">
	loanTradingSettlementTermsModel LoanTradingSettlementTermsModel (1..1)

type AbstractLoanTradeSummary: <"An underlying structure defining all loan trade information i.e. this structure contains the main (e.g. fund manager/main counterparty) trade details.">

	tradeIdentifier TradeIdentifier (1..1) <"Unique trade ids used to identify the trade record.">
	facilityReference FacilityReference (1..1) <"Reference to the facility traded.">
	amount Money (1..1) <"The commitment amount traded as of the original trade date.">
	comment String (0..1) <"A freetext field which allows the sender to add further details around the trade event.">

type AbstractLoanTradeEvent extends AbstractLoanEvent: <"An abstract structure defining fundamental master loan trade event information.">

	loanTradeReference LoanTradeReference (1..1)

type AbstractLoanPartyProfileNotification extends CorrectableRequestMessage: <"An abstract base type for all supplementary communication to paying entities and/or servicing platforms.">

	comments String (0..1) <"A free-form, manually entered field which will be used by users directly for additional information.">

type AbstractLoanServicingEvent extends AbstractLoanEvent: <"An abstract base type defining common features of a syndicated loan servicing business event. Such events are originated by the borrower and are required to be communicated to the lender syndicate by agents.">

	businessEventPartiesModel BusinessEventPartiesModel (1..1)
	effectiveDate date (1..1) <"The date on which the associated business event is effective.">

type AbstractLoanStatement extends CorrectableRequestMessage: <"An abstract base type for all syndicated loan statement notifications; the wrapper for deal/facility/contract definitions and facility/contract positions at a particular point in time (snapshot).">

	statementDate date (1..1) <"The date as of which the embedded information is valid.">
	comments String (0..1) <"A free-form, manually entered field which will be used by users directly for additional information.">

type AbstractLoanContractEvent extends AbstractLoanServicingEvent: <"An abstract base type for all loan contract-level business events.">

	loanContractReference LoanContractReference (1..1)

type AbstractPartyProfile extends AbstractPartyProfileId: <"An abstract base type that describes a party profile.">

	effectiveDate date (1..1) <"The business date on which the information conveyed within the party profile becomes effective.">
	partyReference PartyReference (1..1) <"The party whose details are being communicated within the notification.">
	relatedParty RelatedParty (0..*) <"Other parties that may be related to the receiver party. Examples: custodian or trustee; or, to convey company hierarchy (for use in the context of \'blacklists\').">
	documentation PartyProfileDocumentation (0..1) <"Description of the tax form registered by the party.">

type AbstractPartyProfileId: <"An abstract base type that identifies a party profile.">

	partyProfileIdentifier PartyProfileIdentifier (1..*)

type AbstractServicingNotification extends CorrectableRequestMessage: <"An abstract base type for all syndicated loan servicing notifications; the wrapper for loan events which occur through the life-cycle of a deal.">

	noticeDate date (1..1) <"The business date on which the notice is valid (and was communicated).">
	isGlobalOnly boolean (1..1) <"Indicates whether the embedded business event is \'global\', i.e. NOT lender specific.">
	eventPayment EventPayment (0..*) <"The payments/wiring instructions associated with all embedded loan events.">

type AbstractTradingAccrual: <"An underlying structure that details the elements that affect the calculation of a trade-related accrual.">

	amount NonNegativeMoney (1..1) <"The total accrual amount.">
	accrualPeriod AccrualPeriod (0..*) <"One or more accrual periods which reflect the constituent portions of the accrual amount.">

type AccrualOptionBase: <"An abstract type used for defining accrual structures within loan instruments.">

	accrualOptionId AccrualTypeId (1..1) <"A unique id associated with the loan accrual type.">
	dayCountFraction DayCountFraction (1..1) <"The day count basis for the accrual.">
	paymentFrequency Period (0..1)

type AccrualOptionChangeNotificationSequence0:

	fixedRateOptionChange FixedRateOptionChange (0..1)
	floatingRateOptionChange FloatingRateOptionChange (0..1)
	contract LoanContract (0..*)

	condition Choice:
		required choice fixedRateOptionChange, floatingRateOptionChange

type AccrualOptionChangeNotificationSequence1:

	lcOptionChange LcOptionChange (1..1)
	letterOfCredit LetterOfCredit (0..*)

type AccrualPeriod: <"A structure that describes the details of the underlying elements that explain the calculation of an accrual against a reference balance.">

	periodWithDaysModel PeriodWithDaysModel (1..1)
	referenceAmount MoneyWithParticipantShare (1..1) <"Global and lender share amounts.">
	referenceAmountType AccrualReferenceAmountTypeEnum (0..1) <"The rate applied to this period.">
	rate number (1..1) <"The rate applied to this period.">
	accrualAmount MoneyWithParticipantShare (1..1) <"The accrual amount over the defined period.">

type AccrualTypeId: <"A structure used to uniquely identify a single accrual type within a syndicated loan structure.">

	value string (1..1)
	accrualTypeIdScheme NonEmptyURI (1..1)

type AccruingFeeOption extends FeeRateOptionBase: <"A structure that represents the accruing fee option associated within a facility.">

	_type AccruingFeeType (1..1) <"The accruing fee type for which a rate is being provided.">
	periodOptionalEndModel PeriodOptionalEndModel (1..1)
	calculationDefinition string (0..1) <"A freetext field which allows the sender to add further details around the business event.">

type AccruingFeePayment extends AbstractFacilityEvent: <"An event describing an accruing fee payment made at the facility level.">

	id AccrualTypeId (1..1) <"A unique id associated with the loan accrual type.">
	periodModel PeriodModel (1..1)
	amount MoneyWithParticipantShare (1..1)
	accruingFeePaymentSequence AccruingFeePaymentSequence (0..1)

type AccruingFeePaymentSequence:

	accrualSchedule AccrualPeriod (0..*) <"A schedule that incorporates all sub-periods of an accrual calculation.">
	projection PaymentProjection (0..1) <"Projected interest payment details.">

type AccruingFeeType: <"A list of all eligible accruing facility-level fee types.">

	value Scheme (1..1)
	accruingFeeTypeScheme NonEmptyURI (0..1)

type AccruingPikOption extends FeeRateOptionBase: <"A structure that represents the accruing PIK option associated within a facility.">

	periodModel PeriodModel (1..1)

type AccruingPikOptionChange extends AbstractFacilityEvent: <"An event representing a change in a PIK accrual option. In real terms - an example of this would be a margin rate change.">

	accruingPikOption AccruingPikOption (1..1) <"The latest version of the acccruing PIK option.">

type AccruingPikPayment extends AbstractFacilityEvent: <"An event representing a payment to facilitate capitalization of interest on all outstanding contracts against a particular facility.">

	periodModel PeriodModel (1..1)
	amount MoneyWithParticipantShare (1..1)
	accrualSchedule AccrualPeriod (0..*) <"A schedule that incorporates all sub-periods of an accrual calculation.">

type AdjustmentType: <"A structure used to describe an adjustment.">

	adjustmentType AmountAdjustmentEnum (1..1) <"Defines the type of adjustment applied - increase or decrease.">
	amount MoneyWithParticipantShare (1..1)

type ApplicableAssets: <"A structure that defines the assets (or type of assets) that a particular payment profile may be associated with.">

	dealIdentifier DealIdentifier (0..*) <"The deals for which this default settlement instruction is valid.">
	facilityIdentifier FacilityIdentifier (0..*) <"The facilities for which this default settlement instruction is valid.">
	facilityType FacilityType (0..*) <"The facility type (i.e. term, delayed draw, TLB, etc.) for which this default settlement instruction is valid.">

	condition Choice:
		one-of

type ApplicableCommunicationDetails extends AbstractApplicablePartyProfileObjects: <"A structure that defines the assets (or type of assets) that a particular set of communication details may be associated with.">

	purpose ApplicablePurpose (1..1) <"A scheme to describe the purpose of a person or business unit in relation to an asset or assets.">
	businessUnitReference BusinessUnitReference (0..1) <"A reference to the business unit element of a party block.">
	personReference PersonReference (0..1) <"A reference to a person element of a party block.">

	condition Choice:
		required choice businessUnitReference, personReference

type ApplicablePurpose: <"A scheme that describes the purpose of a contact in relation to an asset or assets.">

	value string (1..1)
	applicablePurposeScheme NonEmptyURI (0..1)

type ApplicableSettlementInstructionDetails extends AbstractApplicablePartyProfileObjects: <"A structure that defines the assets (or type of assets) that a particular set of settlement instrution details may be associated with.">

	settlementDetails SettlementDetails (1..*) <"Settlement account details to describe the acount to which cash should be sent, for payments received by the party sending the Lender Party Notification.">

type ApplicableTransactionType: <"A scheme that describes transaction types.">

	value string (1..1)
	applicableTransactionTypeScheme NonEmptyURI (0..1)

type AssociationToAssetId: <"A structure that defines an association identifier based on a qualifying scheme.">

	value string (1..1)
	associationToAssetIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type AssociationToAssetIdentifier: <"A type defining an association between party or settlement information with an asset or assets">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	associationtId AssociationToAssetId (1..1)
	id string (0..1)

type BuyerSellerAmounts: <"A structure that defines the buyer and seller amounts of a payable.">

	buyersAmount NonNegativeMoney (1..1) <"The buyer\'s amount of a payable.">
	sellersAmount NonNegativeMoney (1..1) <"The seller\'s amount of a payable.">

type CashPayable: <"A structure taht represents payable cash, together with reference to any withholding tax being applied. This is used as a generic cash flow container across all loan business events (within the event header).">

	payerReceiverModel PayerReceiverModel (1..1)
	netAmount NonNegativeMoney (1..1) <"The cash amount payable, net of all tax withholding. This amount represents the funds to be wired from \'payer\' to \'receiver\' as a result of the underlying business event.">
	taxWithholding TaxWithholding (0..*) <"Details of the tax being withheld.">

type CommitmentChange: <"A structure which specifies the commitment changes occurring throughout the life of a facility.">

	date date (1..1) <"The date on which a facility increase/decrease has/will occur.">
	adjustment AdjustmentType (1..1) <"The total remaining commitment amount (in facility currency), once the adjustnment has been applied.">
	remaining MoneyWithParticipantShare (1..1) <"The total remaining commitment amount (in facility currency), once the adjustnment has been applied.">

type CommitmentSchedule: <"A structure that represents a complete amortization schedule through the life of a facility.">

	commitmentChange CommitmentChange (1..*) <"The date on which a facility increase/decrease has/will occur.">

type Deal extends DealSummary: <"A syndicated bank loan deal (credit agreement) definition.">

	dealRulesModel DealRulesModel (1..1)
	facilityGroup AbstractFacility (1..*)

type DealIdentifier extends IdentifiedAsset: <"A unique reference to a syndicated bank loan deal (credit agreement).">

type DealSummary extends DealIdentifier: <"A short form of a deal.">

	dealRolesModel DealRolesModel (1..1)
	creditAgreementDate date (1..1) <"The credit agreement date is also known as the \'closing date\' (the date on which the agreement was signed). Funding of the facilities occurs either on or after (in the case of a Delayed Draw) the Credit Agreement date.">
	currency Currency (0..1) <"Deal denomination currency.">
	dealSummarySequence DealSummarySequence (0..1)

	condition Choice:
		optional choice currency, dealSummarySequence

type DealSummarySequence:

	issuedAmount NonNegativeMoney (1..1) <"Original deal amount.">
	currentDealAmount MoneyWithParticipantShare (0..1) <"Current deal amount.">

type EventPayment extends Payment: <"A structure that represents the prepayment structure associated within a facility.">

	eventPaymentSequence EventPaymentSequence (1..*)

type EventPaymentSequence:

	eventIdentifier BusinessEventIdentifier (1..1)

type EventInstructionOverride: <"A type that identifies a party profile record.">

	overrideIdentifier OverrideIdentifier (1..1)
	eventIdentifier BusinessEventIdentifier (1..1) <"The event for which the (currency-specific) settlement instructions should be applied.">
	settlementDetails SettlementDetails (1..*) <"Settlement account details to describe the acount to which cash should be sent, for payments received by the party sending the Lender Event Settlement Notification.">

type EvergreenOption: <"A struture that represents an evergreen option that is available within a letter of credit instrument.">

	nonRenewalNoticePeriod Period (0..1) <"The number of calendar days before the expiry of the letter of credit, that the borrower must declare an intention to extend the letter of credit.">
	extensionPeriod Period (1..1) <"The number of calendar days defining the extension period.">

type FacilityCommitment: <"A structure that represents the commitment amount against a facility or facility portion. Also shows the utilization levels against the total commitment amount (in facility currency).">

	totalCommitmentAmount MoneyWithParticipantShare (1..1) <"The total commitment level associated with the facility or facility portion (in facility currency).">
	facilityCommitmentSequence FacilityCommitmentSequence (0..1)

type FacilityCommitmentSequence:

	utilizationModel UtilizationModel (1..1)
	unavailableToUtilizeAmount MoneyWithParticipantShare (1..1) <"The portion of the commitment amount which is NOT available for the borrower to draw against.">

type FacilityContractIdentifier extends ContractIdentifier: <"A unique identifier for outstanding contracts.">

	facilityReference FacilityReference (1..1)

type FacilityFeature: <"A list of facility features.">

	value Scheme (1..1)
	facilityFeatureScheme NonEmptyURI (0..1)

type FacilityIdentifier extends IdentifiedAsset: <"A unique identifier to a facility.">

type FacilityOutstandingsPosition extends FacilityPosition: <"A structure that represents current/prior facility commitment and outstanding amounts on both the global and lender position levels.">

	outstandingsPosition OutstandingsPosition (0..*) <"A structure used to define all positions held by the lender at the loan contract level. This structure is design to hold either some or all loan contracts.">

type FacilityPosition: <"A structure that represents current/prior facility commitment amounts on both the global and lender position levels.">

	facilityReference FacilityReference (1..1) <"A unique facility identifier.">
	currentPriorCommitmentModel CurrentPriorCommitmentModel (1..1)

type FacilityRateChangeEvent extends AbstractFacilityContractEvent: <"An event describing changes in a facility-level rate.">

	rate PeriodRate (1..1) <"This represents a \'surcharge\' rate that may apply in addition to a regular margin (on outstanding loan contracts).">

type FacilityReference extends Reference: <"A reference to a facility.">

	href string (1..1)

type FacilitySummary extends FacilityIdentifier: <"A short form of a facility.">

	facilityRolesModel FacilityRolesModel (1..1)
	facilityDatesModel FacilityDatesModel (1..1)
	facilityCommitmentModel FacilityCommitmentModel (1..1)

type FeeRateOptionBase extends AccrualOptionBase: <"An abstract type that specifies an underlying fixed rate cash accrual option.">

	rate number (1..1)

type FixedRateAccrual extends FixedRateOptionBase: <"A full definition of the fixed rate accrual characteristics of a loan contract. This structure defines both the underlying base rate as well as any additional margins and costs associated with the loan contract.">

	periodWithDaysModel PeriodWithDaysModel (1..1)
	fixedRateAccrualSequence FixedRateAccrualSequence (0..1)
	paymentProjection PaymentProjection (0..1) <"Projected interest payment details.">

type FixedRateAccrualSequence:

	penaltySpread number (0..1) <"The penalty spread currently applied to the interest rate period.">
	defaultSpread number (0..1) <"The default spread currently applied to the interest rate period.">
	mandatoryCostRate number (0..1) <"The mandatory cost rate currently applied to the interest rate period.">
	allInRate number (1..1) <"The actual percentage rate charged to the borrower. (Base Rate + Spread + Default Rate + Penalty Rate + Mandatory Cost Rate) = All In Rate. This rate NEVER includes PIK.">

type FixedRateOption extends FixedRateOptionBase: <"A structure that represents the accruing fixed rate option associated within a facility.">

	periodModel PeriodModel (1..1)
	currency Currency (1..1)
	allInRateLimits RateLimits (0..1)
	borrowerPartyReference PartyReference (0..*) <"A party reference to the borrower(s) permitted to exercise the cash accrual option.">
	drawdownNoticeDays int(min: 0) (0..1) <"The number of business days that a lender must be notified prior to a drawdown event occurring.">
	fxRateSetNoticeDays int(min: 0) (0..1) <"The number of business days that a lender must be notified prior to an FX rate set event occurring.">
	rateSetNoticeDays int(min: 0) (0..1) <"The number of business days that a lender must be notified prior to a rate set event occurring.">

type FixedRateOptionBase extends AccrualOptionBase: <"An abstract type that specifies an underlying fixed rate cash accrual option.">

	rate number (1..1)
	pikSpread number (0..1)

type FixedRateOptionChange extends AbstractFacilityEvent: <"An event representing a change in a fixed rate accrual option. In real terms - an example of this would be a margin rate change.">

	fixedRateOption FixedRateOption (1..1) <"The latest version of the fixed rate option.">

type FloatingRateAccrual extends FloatingRateOptionBase: <"A full definition of the accrual characteristics of a loan contract. This structure defines both the underlying base rate as well as any additional margins and costs associated with the loan contract.">

	periodWithDaysModel PeriodWithDaysModel (1..1)
	floatingRateAccrualSequence FloatingRateAccrualSequence (0..1)
	paymentProjection PaymentProjection (0..1) <"Projected interest payment details.">

type FloatingRateAccrualSequence:

	rateFixingDate date (1..1) <"The date on which the underlying interest rate is fixed. It is an actual (adjusted) date. Note: This should default to the effective date of the loan contract in the case of a PRIME base rate.">
	baseRate number (0..1) <"The actual underlying base rate associated with the period, defined as a percentage.">
	floatingRateAccrualSequenceSequence FloatingRateAccrualSequenceSequence (0..1)

type FloatingRateAccrualSequenceSequence:

	penaltySpread number (0..1) <"The penalty spread currently applied to the interest rate period.">
	defaultSpread number (0..1) <"The default spread currently applied to the interest rate period.">
	mandatoryCostRate number (0..1) <"The mandatory cost rate currently applied to the interest rate period.">
	allInRate number (1..1) <"The actual percentage rate charged to the borrower. (Base Rate + Spread + Default Rate + Penalty Rate + Mandatory Cost Rate) = All In Rate. This rate NEVER includes PIK.">

type FloatingRateIndexLoan: <"A subset of the ISDA Floating Rate Option scheme, i.e. the floating rate index. These indexes are the ones used by the syndicated loan market.">

	value Scheme (1..1)
	floatingRateIndexScheme NonEmptyURI (0..1)

type FloatingRateOption extends FloatingRateOptionBase: <"A structure that represents the accruing floating rate option associated within a facility.">

	currency Currency (1..1)
	periodModel PeriodModel (1..1)
	baseRateLimits RateLimits (0..1)
	allInRateLimits RateLimits (0..1)
	borrowerPartyReference PartyReference (0..*) <"A party reference to the borrower(s) permitted to exercise the cash accrual option.">
	drawdownNoticeDays int(min: 0) (0..1) <"The number of business days that a lender must be notified prior to a drawdown event occurring.">
	fxRateSetNoticeDays int(min: 0) (0..1) <"The number of business days that a lender must be notified prior to an FX rate set event occurring.">
	rateSetNoticeDays int(min: 0) (0..1) <"The number of business days that a lender must be notified prior to a rate set event occurring.">

type FloatingRateOptionBase extends AccrualOptionBase: <"An abstract type that specifies an underlying floating rate cash accrual option.">

	floatingRateIndexLoanModel FloatingRateIndexLoanModel (1..1)
	spread number (1..1)
	pikSpread number (0..1)

type FloatingRateOptionChange extends AbstractFacilityEvent: <"An event describing a change in a floating rate accrual option. In real terms - an example of this would be a margin rate change associated with the 3-Month LIBOR accrual option.">

	floatingRateOption FloatingRateOption (1..1) <"The latest version of the floating rate option.">

type FxTerms extends FxFixing: <"A structure which specifies FX conversion terms.">

	rate PositiveDecimal (1..1) <"The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.">

type InterestCapitalizationSequence:

	accrualSchedule AccrualPeriod (0..*) <"A schedule that incorporates all sub-periods of an accrual calculation.">
	projection PaymentProjection (0..1) <"Projected interest payment details.">

type LcAccrual extends FeeRateOptionBase: <"A full definition of the accrual characteristics of a letter of credit. This structure defines both the underlying letter of credit issuance fee rate as well as any FX rates applied.">

	lcAccrualSequence LcAccrualSequence (0..1)

type LcAccrualSequence:

	currency Currency (1..1) <"The currency in which the letter of credit accrual is denominated. This field should ONLY be populated when the accrual currency is different to the base letter of credit currency.">
	lcFxRate FxTerms (1..1) <"Defines exchange rate between the letter of credit accrual and letter of credit currencies.">

type LcOption extends FeeRateOptionBase: <"A structure that represents the accruing L/C rate option associated within a facility.">

	periodModel PeriodModel (1..1)
	_type LcType (1..1) <"The letter of credit type for which a fee rate is being provided.">
	minLcIssuanceFeeAmount MoneyWithParticipantShare (0..1) <"The letter of credit notional amount. The amount is represented at the global and (optionally) atthe lender-specific level.">

type LcOptionChange extends AbstractFacilityEvent: <"An event representing a change in an L/C accrual option. In real terms - an example of this would be an L/C margin rate change.">

	lcOption LcOption (1..1) <"The latest version of the letter of credit option.">

type LcPurpose: <"A list of L/C purposes.">

	value Scheme (1..1)
	lcPurposeScheme NonEmptyURI (0..1)

type LcType: <"A list of L/C types.">

	value Scheme (1..1)
	lcTypeScheme NonEmptyURI (0..1)

type LenderClassification: <"A list of lender clasifications. These are used to derive other rules associated with specific lender types.">

	value Scheme (1..1)
	lenderClassificationScheme NonEmptyURI (0..1)

type LetterOfCredit extends LetterOfCreditSummary: <"A definition of an unfunded borrowing (guarantee) instrument known as a Letter of Credit.">

	expiryDate date (1..1) <"Expiry date of the letter of credit.">
	finalExpiryDate date (0..1) <"Final expiry date of the letter of credit, once the evergreen option has been exercised.">
	lcAccrual LcAccrual (1..1) <"The letter of credit fee rate details.">
	purpose LcPurpose (0..1) <"Defines the purpose of a letter of credit.">
	letterOfCreditFeaturesModel LetterOfCreditFeaturesModel (1..1)
	facilityFxRate FxTerms (0..1) <"Defines exchange rate between the letter of credit and facility.">

type LetterOfCreditReference extends Reference: <"A reference to a letter of credit.">

	href string (1..1)

type LetterOfCreditSummary: <"A short form definition of a letter of credit.">

	identifier FacilityContractIdentifier (1..*) <"A unique identifier for a letter of credit.">
	_type LcType (1..1) <"The letter of credit type for which a fee rate is being provided.">
	effectiveDate date (1..1) <"Effective date of the letter of credit.">
	letterOfCreditRolesModel LetterOfCreditRolesModel (1..1)
	amount MoneyWithParticipantShare (1..1) <"The letter of credit notional amount. The amount is represented at the global and (optionally) at the lender-specific level.">

type LoanAcknowledgement extends Message: <"A base type to extend the FpML basic \'message\' type, similar in function to the \'response\' message, but specific to the needs loan asset class.">

	header ResponseMessageHeader (1..1)
	validationModel ValidationModel (1..1)
	correlationAndOptionalSequenceModel CorrelationAndOptionalSequenceModel (0..1)
	onBehalfOfModel OnBehalfOfModel (0..1)
	originalMessage UnprocessedElementWrapper (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type LoanAllocation extends AbstractLoanAllocationSummary: <"An event structure defining information related to a loan trade allocation.">

	loanAllocationPartiesModel LoanAllocationPartiesModel (1..1)
	buyerSellerModel BuyerSellerModel (0..1)

type LoanAllocationEvent extends AbstractLoanAllocationEvent: <"An event structure defining information related to a loan trade allocation.">

type LoanAllocationIdentifier extends TradeIdentifier: <"A structure that contains sender-specific and optional shared loan allocation identifiers.">

	loanTradeReference LoanTradeReference (1..1) <"Reference to the original loan trade.">

type LoanAllocationNoSettlePeriod: <"A structure that describes a period during which settlement cannot occur.">

	periodModel PeriodModel (1..1)
	periodType LoanAllocationNoSettlePeriodType (1..1) <"A list of allowable types of no-settle periods.">

type LoanAllocationNoSettlePeriodType: <"A structure that defines no-settle period types based on a qualifying scheme.">

	value Scheme (1..1)
	noSettlePeriodTypeScheme NonEmptyURI (0..1)

type LoanAllocationPayment extends Payment: <"A structure that represents a payment related to a loan trade.">

	loanAllocationPaymentSequence LoanAllocationPaymentSequence (1..*)

type LoanAllocationPaymentSequence:

	allocationReference LoanAllocationReference (1..1) <"Reference to the loan trade allocation.">

type LoanAllocationReference extends Reference: <"A reference to a loan trade allocation.">

	href string (1..1)

type LoanAllocationSettlementTask extends AbstractLoanTask: <"A structure that details tasks and their statuses, the completion of which are prerequisites to the settlement of a trade or allocation.">

	allocationReference LoanAllocationReference (1..1) <"Reference to a unique allocation id used to identify the allocation record.">
	_type LoanAllocationSettlementTaskType (1..1) <"The type of the settlement task.">

type LoanAllocationSettlementTaskType: <"A structure used to uniquely identify a settlement task type within a syndicated loan structure.">

	value string (1..1)
	allocationSettlementTaskTypeScheme NonEmptyURI (0..1)

type LoanAllocationSettlementEvent extends AbstractLoanAllocationSettlementEvent: <"An event structure defining the counterparty-to-counterparty trade settlement details.">

	amount Money (1..1) <"The amount settled.">
	fundingFactors LoanTradingCounterpartySettlementFundingFactors (0..1) <"Factors impacting the setttlement cash flows.">
	facilityOutstandingsPosition FacilityOutstandingsPosition (1..1) <"One or more accrual periods which reflect the constituent portions of the accrual amount.">

type LoanAllocationTransferFeeDueEvent extends AbstractLoanAllocationEvent: <"A structure that defines details related to the admin agent\'s determination of transfer fee(s) owed on an allocation.">

	amount NonNegativeMoney (1..1) <"Amount of transfer fee due to the admin agent for the allocation.">
	dueDate date (1..1) <"The business date on which the transfer fee is due.">

type LoanAllocationTransferFeeOwedEvent extends AbstractLoanAllocationEvent: <"A structure that defines details related to the admin agent\'s determination of transfer fee(s) owed on an allocation.">

	loanTradingTransferFeeDeterminationModel LoanTradingTransferFeeDeterminationModel (1..1)

type LoanBulkServicingNotificationChoice0:

	facilityFeePaymentGroup NonRecurringFeePayment (0..1)
	facilityEventGroup AbstractFacilityEvent (0..1)
	accruingFeePayment AccruingFeePayment (0..1)
	accruingPikPayment AccruingPikPayment (0..1)
	loanContractEventGroup AbstractLoanContractEvent (0..1)
	lcEventGroup AbstractLcEvent (0..1)

	condition Choice:
		one-of

type LoanBulkServicingNotificationChoice1:

	facilityDetailsModel FacilityDetailsModel (0..1)
	loanBulkServicingNotificationChoiceChoice LoanBulkServicingNotificationChoiceChoice (0..1)

	condition Choice:
		optional choice facilityDetailsModel, loanBulkServicingNotificationChoiceChoice

type LoanBulkServicingNotificationChoiceChoice:

	letterOfCreditDetailsModel LetterOfCreditDetailsModel (0..1)
	loanContractDetailsModel LoanContractDetailsModel (0..1)

	condition Choice:
		optional choice letterOfCreditDetailsModel, loanContractDetailsModel

type LoanContract extends LoanContractSummary: <"A funded borrowing instrument which utilizes a portion of an available under a single facility (line of credit) within a bank deal (credit agreement).">

	repricingDate date (0..1) <"The maturity date of the loan contract. In the case of a PRIME-based loan, this field should be set to the maturity date of the facility.">
	maturityDate date (0..1) <"The maturity date of the loan contract. In the case of a PRIME-based loan, this field should be set to the maturity date of the facility.">
	fixedRateAccrual FixedRateAccrual (0..1) <"Defines the base rate and additional charges associated with the loan contract.">
	floatingRateAccrual FloatingRateAccrual (0..1) <"Defines the base rate and additional charges associated with the loan contract.">
	facilityFxRate FxTerms (0..1) <"Defines a single (current) FX rate used to calculate utilization in the facility currency. Used in the case where the loan contract currency is different to the facility currency.">

	condition Choice:
		required choice fixedRateAccrual, floatingRateAccrual

type LoanContractAdjustment extends AbstractLoanContractEvent: <"An event representing adjustment in the notional amount of a loan contract that has no cash flow effect. E.g. an amount adjustment due to a defaulted loan.">

	adjustment AdjustmentType (1..1) <"Defines the type of adjustment applied - increase or decrease.">
	amount MoneyWithParticipantShare (1..1)

type LoanContractBaseRateSet extends AbstractLoanContractEvent: <"An event representing the initial setting of the rate on a single (new) loan contract.">

	fixingDate date (1..1) <"The date on which the underlying interest rate is fixed. It is an actual (adjusted) date. Note: This should default to the effective date of the loan contract in the case of a PRIME base rate.">
	rate number (1..1)

type LoanContractMaturityChange extends AbstractLoanContractEvent: <"An event representing a change of maturity date on a one or more outstanding loan contracts.">

	currentMaturityDate date (1..1) <"The new loan contract maturity date.">
	priorMaturityDate date (0..1) <"The previous loan contract maturity date.">

type LoanContractReference extends Reference: <"A reference to a loan contract.">

	href string (1..1)

type LoanContractSummary: <"A short form of a loan contract.">

	identifier FacilityContractIdentifier (1..*) <"A unique identifier for a loan contract.">
	effectiveDate date (1..1) <"The effective date of the loan contract. This is the date on which the funds are passed to the borrower. It is an actual (adjusted) date.">
	borrowerPartyReference PartyReference (1..1) <"A reference to the borrower against a loan contract.">
	guarantorPartyReference PartyReference (0..1) <"Party references to any guarantors associated with the facility borrower.">
	amount MoneyWithParticipantShare (1..1)

type LoanInterestPayment extends AbstractLoanContractEvent: <"An event representing the lender-specific payment of interest amounts for a given accrual period against a single loan contract.">

	periodModel PeriodModel (1..1)
	calculationMethod InterestCalculationMethodEnum (1..1) <"Defines whether the agent bank is making an interest payment based on the lender pro-rata share at the end of the period (snapshot) or based on the lender position throughout the period (which is the default).">
	amount MoneyWithParticipantShare (1..1)
	loanInterestPaymentSequence LoanInterestPaymentSequence (0..1)

type LoanInterestPaymentSequence:

	accrualSchedule AccrualPeriod (0..*) <"A schedule that incorporates all sub-periods of an accrual calculation.">
	projection PaymentProjection (0..1) <"Projected interest payment details.">

type LoanNotificationExceptionSequence:

	loanIdentifiersModel LoanIdentifiersModel (1..1)
	party Party (1..1)

type LoanSettlementDateAvailabilityEvent extends AbstractLoanAllocationEvent: <"An event structure defining information related to trade settlement date coordination.">

	amount Money (1..*) <"The amount settled.">
	specificDates DateList (0..1) <"Specific date or dates on which a trade may be settled.">
	periodModel PeriodModel (0..1)
	onOrAfterDate date (0..1) <"Date on or after which a trade can be settled.">
	loanSettlementDateAvailabilityEventSequence LoanSettlementDateAvailabilityEventSequence (0..1)
	noSettlePeriod LoanAllocationNoSettlePeriod (0..*) <"A period during which no settlement of a trade can occur, other than non-business days.">

	condition Choice:
		required choice specificDates, periodModel , onOrAfterDate

type LoanSettlementDateAvailabilityEventSequence:

	leadDays int(min: 1) (1..1) <"Number of days advance notification required to express the intent to settle a trade.">
	cutOffTime time (1..1) <"Specific cutoff time to express the intent to settle a trade.">

type LoanSettlementDateFinalizationEvent extends AbstractLoanAllocationEvent: <"An event structure defining the trade settlement date.">

	amount Money (1..1) <"The amount settled.">
	settlementDate date (1..1) <"The settlement date associated with a single loan trade allocation.">

type LoanTradeEvent extends AbstractLoanTradeEvent: <"An event structure defining counterparty-to-counterparty loan trade information. This structure contains the main (e.g. fund manager/main counterparty) trade details.">

type LoanTradeTransferFeeDueEvent extends AbstractLoanTradeEvent: <"A structure that defines details related to the admin agent\'s determination of transfer fee(s) owed on a trade.">

	amount NonNegativeMoney (1..1) <"Amount of transfer fee owed to the admin agent for the trade.">
	dueDate date (1..1) <"The business date on which the transfer fee is due.">

type LoanTradeTransferFeeOwedEvent extends AbstractLoanTradeEvent: <"A structure that defines details related to the admin agent\'s determination of transfer fee(s) owed on an allocation.">

	loanTradingTransferFeeDeterminationModel LoanTradingTransferFeeDeterminationModel (1..1)

type LoanTransferSettlementEvent extends AbstractLoanAllocationSettlementEvent: <"An event structure defining the agent-to-counterparty trade settlement details.">

	amount Money (1..1) <"The amount settled.">
	facilityOutstandingsPosition FacilityOutstandingsPosition (1..1) <"One or more accrual periods which reflect the constituent portions of the accrual amount.">

type LoanTrade extends AbstractLoanTrade: <"A structure that defines counterparty-to-counterparty loan trade information. This structure contains the main (e.g. fund manager/main counterparty) trade details.">

	price number (1..1) <"The trade price, notated as a decimal, to be expressed as a percentage multiplied by the commitment amount.">
	transferFee LoanTransferFee (1..1) <"Details of the transfer fee owed to the admin agent.">
	loanTradingCounterpartyCashSettlementRulesModel LoanTradingCounterpartyCashSettlementRulesModel (1..1)
	loanTradingParticipationSettlementTermsModel LoanTradingParticipationSettlementTermsModel (0..1)

type LoanTradePayment extends Payment: <"A structure that represents a payment related to a loan trade.">

	loanTradeReference LoanTradeReference (1..*) <"Reference to the original loan trade.">

type LoanTradeReference extends Reference: <"A reference to a loan trade.">

	href string (1..1)

type LoanTradeSettlementTask extends AbstractLoanTask: <"A structure that details tasks and their statuses, the completion of which are prerequisites to the settlement of a trade or allocation.">

	loanTradeReference LoanTradeReference (1..1) <"Reference to the master trade.">
	_type LoanTradeSettlementTaskType (1..1) <"The type of the settlement task.">

type LoanTradeSettlementTaskType: <"A structure that uniquely identifies a settlement task type within a syndicated loan structure.">

	value string (1..1)
	tradeSettlementTaskTypeScheme NonEmptyURI (0..1)

type LoanTradeSummary extends AbstractLoanTradeSummary: <"A structure that defines all loan trade information i.e. this structure contains the main (e.g. fund manager/main counterparty) trade details.">

type LoanTradingAccruingFeeAccrual extends AbstractTradingAccrual: <"A structure that details the underlying elements that affect the calculation of a fee accrual.">

	accrualTypeId AccrualTypeId (1..1) <"A unique id associated with the loan accrual type.">
	_type LoanTradingAccruingFeeTypeEnum (0..1) <"Describes the type of the accruing fee.">

type LoanTradingCostOfCarry: <"A structure that incorporates elements of an accrual calculation, for the purpose of defining cost-of-carry.">

	amount Money (1..1) <"The amount of cost of carry accrued for the given loan contract. Funded Amount * Price + (100-Price) * Unfunded - (100-Price) * Paydown - Non-Recurring Fees.">
	accrual LoanTradingCostOfCarryAccrual (0..1) <"Details of the accrual schedule in support of the cost of carry amount: The commencement amount is the calculated \'value\' of the asset being purchased/sold, as of the end of the REGULAR settlement period (e.g. at T+7 for Par). This amount takes into account ALL potential adjustments, price and utilized/unutilized balances as of the regular settlement date. Hence, the reference amount will be the commencement amount and the rate will be the average LIBOR (between T+7 and actual settlement date). If however, the settlement amount at the END of the delay period has changed by more than 25 percent as compared to the commencement amount, then the (calculated) settlement amount for each applicable day within the delay period must be calculated and used to accrue the cost of carry. The average LIBOR will still be the applicable rate.">

type LoanTradingCostOfCarryAccrual: <"A schedule that incorporates all sub-periods of an accrual calculation for the purposes of determining the cost of carry in the case of a trade with delayed settlement.">

	utilizationPeriod UtilizationPeriod (1..*) <"The funded and unfunded utilization details. These figures together with the commitment adjustment and non-recurring fees would be used to calculate the trade amount on a daily basis. If using the commencement amount, as of regular settlement date, then it is only necessary to define the utilization as of that single date. If using the settlement amount calculation (for each day through the settlement period), then it will be necessary to provide a schedule of utilized/unutilized balances throught the entire period.">
	commencementAccrual AccrualPeriod (0..1) <"The accrual associated with a simple commencement amount based calculation.">
	settlementPeriodAccrual AccrualPeriod (0..*) <"An array of accrual periods which define a single accrual schedule.">

	condition Choice:
		required choice commencementAccrual, settlementPeriodAccrual

type LoanTradingCounterpartySettlementFundingFactors: <"A structure that defines the factors that impact settlement cashflows.">

	loanTradingCounterpartySettlementFundingFactorsSequence LoanTradingCounterpartySettlementFundingFactorsSequence (0..1)
	transferFeeAmounts BuyerSellerAmounts (1..1) <"Countparty shares of the transfer fee owed to the agent.">

type LoanTradingCounterpartySettlementFundingFactorsSequence:

	delayedCompensation LoanTradingDelayedCompensation (1..1)
	costOfCarry LoanTradingCostOfCarry (1..1)
	economicBenefit LoanTradingEconomicBenefit (0..*) <"The total economic benefit, based on facility-level activity between trade and settlement date, payable to the buyer of the asset.">

type LoanTradingDelayedCompensation: <"A structure that incorporates elements of interest and fee accruals, for the purpose of defining delayed compensation.">

	amount NonNegativeMoney (1..1) <"The total delayed compensation amount. This is the sum of all the loan contract, letter of credit and on-going fee accrual amounts.">
	loanTradingSettlementAccrualsModel LoanTradingSettlementAccrualsModel (1..1)

type LoanTradingEconomicBenefit: <"A structure that combines a simple (money) amount with an optional event, for the purpose of defining economic benefit at settlement.">

	amount Money (1..1) <"Economic benefit amount.">
	eventIdentifier BusinessEventIdentifier (0..1)
	commitmentAdjustment CommitmentAdjustment (0..1) <"Any commitment adjustments which have occurred during settlement of the trade. Represented by the business event structure.">

	condition Choice:
		optional choice eventIdentifier, commitmentAdjustment

type LoanTradingLetterOfCreditAccrual extends AbstractTradingAccrual: <"A structure that incorporates sub-periods of an accrual calculation for a traded letter of credit.">

	letterOfCreditReference LetterOfCreditReference (1..1) <"A unique identifier for the letter of credit.">

type LoanTradingNonRecurringFee: <"A structure that details the underlying elements that affect the calculation of a fee accrual.">

	amount NonNegativeMoney (1..1) <"The total accrual amount.">
	feeType LoanTradingNonRecurringFeeTypeEnum (0..1) <"Describes the type of the accruing fee.">
	miscFeeType NonRecurringMiscFeeType (0..1) <"Miscellaneous nonrecurring fee type.">

	condition Choice:
		required choice feeType, miscFeeType

type LoanTradingOutstandingsAccrual extends AbstractTradingAccrual: <"A structure that incorporates sub-periods of an accrual calculation for a traded outstanding contract.">

	loanContractReference LoanContractReference (1..1) <"A unique id for the loan contract.">

type LoanTradingPartyRole: <"A type that describes a role played by a party in a trading transaction. Examples include roles such as guarantor, custodian, confirmation service provider, etc. This can be extended to provide custom roles.">

	value Scheme (1..1)
	tradingPartyRoleScheme NonEmptyURI (0..1)

type LoanTradingSettlementTaskDates: <"A structure that details key dates related to a task that is a prerequisite to trade settlement.">

	raisedDate date (1..1) <"The date on which the settlement task was raised.">
	expectedDate date (0..1) <"The date by which the settlement task is expected to be completed.">
	clearedDate date (0..1) <"The date on which the settlement task was either cleared or cancelled.">

type LoanTransfer extends AbstractLoanTrade: <"An event structure defining counterparty-to-admin agent loan trade information.">

	transferFeeRemittedBy BuySellEnum (1..1) <"Party responsible for remitting the transfer fee to the admin agent (buyer or seller).">

type LoanTransferFee: <"A structure that represents countparty shares or alternatively the total amount of the assignment fee owed to the admin agent.">

	remittedBy BuySellEnum (1..1) <"Party responsible for remitting the transfer fee to the admin agent (buyer or seller).">
	loanTransferFeeSequence LoanTransferFeeSequence (0..1)
	transferFeeAmounts BuyerSellerAmounts (0..1) <"Countparty shares of the transfer fee owed to the agent.">

	condition Choice:
		required choice loanTransferFeeSequence, transferFeeAmounts

type LoanTransferFeeSequence:

	paidBy LoanTransferFeePaidByEnum (1..1) <"Rule enumeration for transfer fee split and paid by.">
	totalAmount NonNegativeMoney (0..1) <"The amount payable to the agent for re-assigning a share in one of the underlying facilities within the deal.">

type MoneyWithParticipantShare extends Money: <"An extension of the money type with the ability to specify a lender share amount in addition to the global amount (represented by \'amount\').">

	shareAmount number (0..1) <"The lender share amount.">

type MultiCurrency: <"A struture that defines all the currencies in which funds can be drawn against a facility.">

	drawCurrency Currency (2..*) <"List of currencies in which the borrower(s) may draw funds.">

type NonRecurringFeePayment extends AbstractFacilityContractEvent: <"An event describing a non-recurring fee being paid at either the loan contract or facility level.">

	amount MoneyWithParticipantShare (1..1)

type NonRecurringMiscFeeType: <"A list of all non-recurring (one-off) fee types.">

	value Scheme (1..1)
	nonRecurringMiscFeeTypeScheme NonEmptyURI (0..1)

type OutstandingContractsStatementChoice:

	loanContract LoanContract (0..1) <"A collection of loan contracts.">
	letterOfCredit LetterOfCredit (0..1) <"A collection of letter of credits.">

	condition Choice:
		one-of

type OutstandingsPosition: <"A structure that represents outstanding loan contracts or outstanding letter of credit position. Both the global and lender position (current and prior) levels can be represented.">

	loanContractReference LoanContractReference (0..1)
	letterOfCreditReference LetterOfCreditReference (0..1)
	amount MoneyWithParticipantShare (1..1) <"The global and share amounts against the associated instrument. This is after any referenced business events have taken place.">
	priorAmount MoneyWithParticipantShare (0..1) <"The global and share amounts against the associated instrument. This is prior to any referenced business events.">
	facilityFxRate FxTerms (0..1) <"Defines a single (current) FX rate used to calculate utilization in the facility currency. Used in the case where the loan contract currency is different to the facility currency.">

	condition Choice:
		required choice loanContractReference, letterOfCreditReference

type OverrideId: <"A structure that defines an override identifier based on a qualifying scheme.">

	value string (1..1)
	overrideIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type OverrideIdentifier: <"A type that identifies an override record.">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	overrideId OverrideId (1..1)
	id string (0..1)

type PartyProfile extends AbstractPartyProfile: <"A type that describes a party profile record.">

	partyProfileChoice PartyProfileChoice (1..*)

type PartyProfileChoice:

	communicationDetails ApplicableCommunicationDetails (0..1) <"Relates an asset, or assets, to an element within a party block (customarily a business unit or person).">
	settlementInstructionDetails ApplicableSettlementInstructionDetails (0..1) <"Relates an asset, or assets, to set of settlement instructions.">

	condition Choice:
		one-of

type PartyProfileDocumentation: <"A structure that defines documentation related to a party profile.">

	taxForm TaxForm (0..1) <"Type of tax form registered.">

type PartyProfileId: <"A structure that defines a party profile identifier based on a qualifying scheme.">

	value string (1..1)
	partyProfileIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type PartyProfileIdentifier: <"A type that identifies a party profile record.">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	partyProfileId PartyProfileId (1..1)
	id string (0..1)

type PaymentProjection: <"A structure that represents interest payment projections.">

	nextPaymentDate date (1..1) <"The next payment for the associated event type is due on this date. This is an actual (adjusted) date.">
	projectedAmount MoneyWithParticipantShare (0..1) <"Projected amount payable on the next payment date.">

type PeriodRate: <"A structure that represents a rate applicable against a well-defined or open-ended period.">

	periodOptionalEndModel PeriodOptionalEndModel (1..1)
	rate number (1..1)

type ProRataFacilities: <"A structure that defines a restriction pertaining to which facilities must be traded on a pro-rata basis.">

	facilityReference FacilityReference (2..*)

type RateLimits: <"A structure that defines the limits associated with rates that can be applied to a loan instrument.">

	floorRate PeriodRate (0..1) <"The rate floor being applied.">
	capRate PeriodRate (0..1) <"The rate cap being applied.">

type RolloverChoice:

	baseRateSet LoanContractBaseRateSet (0..1)
	borrowing Borrowing (0..1)
	commitmentAdjustment CommitmentAdjustment (0..1)
	interestCapitalization InterestCapitalization (0..1)
	interestPayment LoanInterestPayment (0..1)
	repayment Repayment (0..1)

	condition Choice:
		one-of

type SettlementDetails: <"A set of currency-specific settlement instructions.">

	id SettlementInstructionId (1..1) <"A unique identifier for a cash settlement details structure.">
	currency Currency (1..1) <"Currency associated with the settlement instruction.">
	settlementInstruction SettlementInstruction (1..1) <"A standard settlement instruction defining how a currency payment is to be made.">

type SettlementInstructionId: <"A type defining a cash settlement details identifier and qualifying scheme">

	value string (1..1)
	settlementInstructionIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type TaskId: <"A structure that defines a task identifier based on a qualifying scheme.">

	value string (1..1)
	taskIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type TaskIdentifier: <"A type defining a task identifier issued by the indicated party.">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	taskId TaskId (1..1)
	id string (0..1)

type TaxForm: <"A structure that defines a tax form registration.">

	taxFormType TaxFormType (1..1) <"Type of tax form registered.">
	taxFormExpiryDate date (0..1) <"Date of expiration of this tax form.">

type TaxFormType: <"A scheme that describes tax form types.">

	value string (1..1)
	taxFormTypeScheme NonEmptyURI (0..1)

type TaxWithholding: <"A structure that represents the withholding tax being applied to a particular cash flow.">

	amount NonNegativeMoney (1..1) <"The amount of withholding tax being applied.">
	taxRate NonNegativeDecimal (0..1) <"The tax rate being applied to the associated cash flow.">
	reason WithholdingTaxReason (0..1) <"A scheme used to identify the reason for withholding tax being applied to a cash flow.">

type TradingInstructionOverride: <"A structure that identifies settlement instructions to override default settlement instructions, for a particular trade/allocation.">

	overrideIdentifier OverrideIdentifier (1..1)
	allocationIdentifier LoanAllocationIdentifier (0..1) <"The allocation for which the settlement instructions should be applied.">
	loanTradeReference LoanTradeReference (0..1) <"Reference to the original loan trade.">
	settlementDetails SettlementDetails (1..*) <"Settlement account details to describe the acount to which cash should be sent, for payments received by the party sending the Lender Event Settlement Notification.">

	condition Choice:
		required choice allocationIdentifier, loanTradeReference

type TransferFeeDefinition: <"A structure that represents the rules for payment of transfer fees to the agent.">

	amount NonNegativeMoney (1..1) <"The amount payable to the agent for re-assigning a share in one of the underlying facilities within the deal.">
	^rule TransferFeeRule (1..1) <"A rule which defines the calculation of transfer fees applicable as a result of a facility commitment transfer.">
	lenderTypeWaived LenderClassification (0..*) <"The list of lender types which are exempt from paying an transfer fee to the agent bank.">

type TransferFeeRule: <"A list of rules associated with the way in which transfer fees should be paid.">

	value Scheme (1..1)
	transferFeeRuleScheme NonEmptyURI (0..1)

type UtilizationAmounts: <"A structure which defines the total utilization and available credit levels for a given facility.">

	fundedAmount NonNegativeDecimal (1..1) <"The amount of utilization which is funded.">
	unfundedAmount NonNegativeDecimal (1..1) <"The amount of utilization which is unfunded.">

type UtilizationPeriod: <"A schedule that incorporates all sub-periods of an interest accrual calculation.">

	periodWithDaysModel PeriodWithDaysModel (1..1)
	utilizationAmounts UtilizationAmounts (1..1) <"The funded and unfunded utilization details.">

type WithholdingTaxReason: <"A list of reasons for withholding tax being applied to a cash flow.">

	value Scheme (1..1)
	withholdingTaxReasonScheme NonEmptyURI (0..1)

type BusinessEventPartiesModel: <"A model that represents the main parties involved in any business event.">

	agentPartyReference PartyReference (0..1) <"A reference to the agent bank for the associated deal.">
	borrowerPartyReference PartyReference (0..1) <"A reference to the main borrower associated with the specific business event.">

type CurrentPriorCommitmentModel: <"A model that represents current and prior global commitment break-down. The model requires global amounts and can optionally represent lender-specific share amounts.">

	commitment FacilityCommitment (1..1) <"The global and share amount of principal commitment. This is after any referenced business events have taken place.">
	priorCommitment FacilityCommitment (0..1) <"The global and share amount of principal commitment. This is prior to any referenced business events.">

type DealRolesModel: <"A model that defines all parties playing various roles within a given deal.">

	issuerPartyReference PartyReference (1..1) <"A party reference to the (main) issuer of the deal.">
	guarantorPartyReference PartyReference (0..*) <"Party references to the guarantors associated with the (main) issuer of the deal.">
	agentPartyReference PartyReference (1..1) <"A party reference to the agent bank associated with the deal.">
	dealRolesModelSequence DealRolesModelSequence (0..1)

type DealRolesModelSequence:

	syndicationLeadPartyReference PartyReference (1..1) <"A party reference to the lead syndication bank of the deal.">
	syndicationCoLeadPartyReference PartyReference (0..*) <"Party references to the syndication co-lead banks of the deal.">

type DealRulesModel: <"a model that defines deal-level rules.">

	transferFee TransferFeeDefinition (0..1) <"The transfer fee amount and rules. This applies to the commitment transfer of any facility within the deal structure.">
	proRataFacilities ProRataFacilities (0..*) <"Groups of facilities which must be traded on a pro-rata basis. The ratio of facility trade amounts must be equal to the ratio of their corresponding global amounts.">

type FacilityCommitmentModel: <"A model that describes facility commitment information together with any schedule associated with the commitment.">

	currentCommitment FacilityCommitment (1..1) <"The current global/lender share commitment amount. This defines the current limit against which the borrower may draw funds.">
	originalCommitment MoneyWithParticipantShare (0..1) <"The original global commitment amount. This defines the limit, as of the start date, against which the borrower may draw funds.">
	commitmentSchedule CommitmentSchedule (0..1) <"The commitment schedule associated with the facility.">
	dealFxRate FxTerms (0..1) <"Defines the exchange rate between the facility and deal denomination currencies (only required if the currencies are different).">

type FacilityDatesModel: <"A model that defines all relevant dates related to a specific facility.">

	startDate date (1..1) <"The start date of the facility.">
	expiryDate date (0..1) <"The latest date that a drawdown can be made effective against the facility.">
	maturityDate date (0..1) <"The maturity date of the facility.">

type FacilityDetailsModel: <"A model used to reference a facility by either identifier or summary, within various notifications.">

	facilityIdentifier FacilityIdentifier (0..1) <"A deal summary structure.">
	facilitySummary FacilitySummary (0..1) <"A facility summary structure.">

	condition Choice:
		one-of

type FacilityFeaturesModel: <"A model that describes features/attributes associated with a given facility.">

	feature FacilityFeature (0..*) <"Facility features which help define the instrument with greater granularity. E.g. bridge, acquisition etc.">
	lien Lien (0..1) <"The lien level associated with the facility. E.g. 1st, 2nd, 3rd.">
	seniority CreditSeniority (0..1) <"The seniority of the facility. E.g. senior, senior secured etc.">

type FacilityLoanContractDetailsModel: <"A model used to reference a facility by either identifier or summary, within various notifications.">

	facilityDetailsModel FacilityDetailsModel (1..1)
	facilityLoanContractDetailsModelChoice0 FacilityLoanContractDetailsModelChoice0 (0..*)
	facilityLoanContractDetailsModelChoice1 FacilityLoanContractDetailsModelChoice1 (0..*)

	condition Choice:
		required choice facilityLoanContractDetailsModelChoice0, facilityLoanContractDetailsModelChoice1

type FacilityLoanContractDetailsModelChoice0:

	loanContractIdentifier ContractIdentifier (0..1) <"A collection of loan contracts.">
	letterOfCreditIdentifier ContractIdentifier (0..1) <"A collection of letter of credits.">

	condition Choice:
		one-of

type FacilityLoanContractDetailsModelChoice1:

	loanContract LoanContract (0..1) <"A collection of loan contracts.">
	letterOfCredit LetterOfCredit (0..1) <"A collection of letter of credits.">

	condition Choice:
		one-of

type FacilityOptionsFeesAndRatesModel: <"A model that describes additional (non-static) facility rate details. These are managed separate since they can change independently during the life of the facility.">

	facilityOptionsFeesAndRatesModelChoice FacilityOptionsFeesAndRatesModelChoice (1..*)
	accruingPikOption AccruingPikOption (0..1) <"A loan contract PIK accrual option.">
	accruingFeeOption AccruingFeeOption (0..*) <"A description of all the different types of accruing fees which apply to the facility.">
	facilityRatesModel FacilityRatesModel (1..1)

type FacilityOptionsFeesAndRatesModelChoice:

	fixedRateOption FixedRateOption (0..1) <"A set of default cash accrual options. Each option is usually available to any borrowers defined within the facility, but an explicitly defined set of borrower entities (within the option) or be applicable to all borrower(s) within the facility.">
	floatingRateOption FloatingRateOption (0..1) <"A set of default cash accrual options. Each option is usually available to any borrowers defined within the facility, but an explicitly defined set of borrower entities (within the option) or be applicable to all borrower(s) within the facility.">
	lcOption LcOption (0..1) <"A description of all the letter of credit fee types which apply to the facility.">

	condition Choice:
		one-of

type FacilityRatesModel: <"A model that describes various facility rate details.">

	defaultRate PeriodRate (0..1) <"This represents a default rate that may apply in addition to a regular margin rate (on outstanding loan contracts). This rate applied at the discretion of the agent bank, if the borrower is deemed to be in default.">
	mandatoryCostRate PeriodRate (0..1) <"The mandatory cost rate currently applied to the interest rate period.">
	penaltyRate PeriodRate (0..1) <"This represents a penalty rate that may apply in addition to the regular margin rate (on outstanding loan contracts). This rate is applied at the discretion of the agent bank, if the borrower has broken terms stated within the credit agreement.">

type FacilityRolesModel: <"A model that describes the various roles played by parties within a given facility.">

	borrowerPartyReference PartyReference (1..1) <"A party reference to the (main) borrower. This may be different to the issuer defined at the deal-level.">
	coBorrowerPartyReference PartyReference (0..*) <"Party references to co-borrowers as listed on the credit agreement.">
	agentPartyReference PartyReference (0..1) <"A party reference to the agent bank. Each facility (within a single deal) can have specific/different agent banks, especially if there are jurisdictional boundaries being crossed.">
	lcIssuingBankPartyReference PartyReference (0..*) <"Party references to any guarantors associated with the facility borrower.">
	guarantorPartyReference PartyReference (0..*) <"Party references to any guarantors associated with the facility borrower.">

type FloatingRateIndexLoanModel: <"A model which captures the index and tenor associated with the floating rate. We are referring to a loan-specific floating rate scheme.">

	floatingRateIndex FloatingRateIndexLoan (1..1)
	indexTenor Period (0..1) <"The ISDA Designated Maturity, i.e. the tenor of the floating rate.">

type LenderAndCashDetailsModel: <"A model that describes lender and cash flow details (relative to the lender), represented within a business event.">

	lenderPartyReference PartyReference (1..1) <"A reference to the lender associated with a specific business event.">
	cashPayable CashPayable (0..1) <"Defines the overall net cash payable, as well as, the breakdown of individual cashflows.">

type LetterOfCreditDetailsModel: <"A model used to reference an L/C by either identifier, summary or full L/C details, within various notifications.">

	letterOfCreditIdentifier FacilityContractIdentifier (0..1) <"A deal summary structure.">
	letterOfCreditSummary LetterOfCreditSummary (0..1) <"A facility summary structure.">
	letterOfCredit LetterOfCredit (0..1) <"A facility summary structure.">

	condition Choice:
		one-of

type LetterOfCreditFeaturesModel: <"A model that describes the additional features associated with a letter of credit.">

	evergreenOption EvergreenOption (0..1) <"An option allowing the borrower to extend the letter of credit tenor.">
	lcAutoAdjust LcAutoAdjustEnum (0..1) <"Defines the purpose of a letter of credit.">
	minLcIssuanceFeeAmount MoneyWithParticipantShare (0..1) <"The letter of credit notional amount. The amount is represented at the global and (optionally) atthe lender-specific level.">

type LetterOfCreditRolesModel: <"A model that describes the various roles played by parties within a given letter of credit.">

	borrowerPartyReference PartyReference (1..1) <"Main borrower.">
	issuingBankPartyReference PartyReference (1..1) <"Party references to any guarantors associated with the facility borrower.">
	beneficiaryPartyReference PartyReference (0..1) <"A party reference of the beneficiary.">

type LoanAllocationPartiesModel: <"A model which contains the main parties involved in a loan allocation situation.">

	originalPartyReference PartyReference (1..1) <"A reference to the party responsible for the allocation.">
	allocatedPartyReference PartyReference (1..1) <"A reference to the party that has been allocated to.">

type LoanContractDetailsModel: <"A model used to reference a loan contract by either identifier, summary or full contract details, within various notifications.">

	contractIdentifier FacilityContractIdentifier (0..1) <"A deal summary structure.">
	contractSummary LoanContractSummary (0..1) <"A facility summary structure.">
	contract LoanContract (0..1)

	condition Choice:
		one-of

type LoanIdentifiersModel: <"A model which contains the identifiers used by loan structures.">

	eventIdentifier BusinessEventIdentifier (0..1)
	overrideIdentifier OverrideIdentifier (0..1)
	taskIdentifier TaskIdentifier (0..1)

	condition Choice:
		one-of

type LoanTradeAllocationDetailsModel: <"A model used to reference a single loan trade together with all associated allocations.">

	allocationId LoanAllocationIdentifier (1..*) <"A party-specific allocation identifier.">
	tradeSummary LoanTradeSummary (1..1)

type LoanTradingCounterpartyCashSettlementRulesModel: <"A model which contains the master trade settlement terms.">

	documentationType LoanTradingDocTypeEnum (1..1) <"Defines whether the loan trade is being settled under par or distressed documentation.">
	accrualSettlementType LoanTradingAccrualSettlementEnum (1..1) <"Defines the way in which interest (and fees) will be handled between the buyer and seller of the loan.">
	delayedCompensationFlag boolean (1..1) <"Defines whether delayed compensation is due at settlement of the loan trade.">
	nonRecurringFeesBenefactor BuySellEnum (1..1) <"Defines the benefit of all amendment fees, consent, waiver, ticking and other non-recurring fees occurring between trade date and settlement date.">

type LoanTradingParticipationSettlementTermsModel: <"A model which contains trade settlement terms for participations.">

	collateralRequiredFlag boolean (1..1) <"Identifies whether the buyer is to supply collateral in the case the trade involves a revolver and the trade settles as a participation.">
	votingRights LoanTradingVotingRightsEnum (1..1) <"Identifies whether the buyer is to receive voting rights or be retained by the seller.">

type LoanTradingSettlementAccrualsModel: <"A model which contains all relevant amounts to settle a loan trade with accrued interest and fees.">

	accruingFee LoanTradingAccruingFeeAccrual (0..*) <"Details of the amount of on-going fees accrued by the traded portion of a loan contract.">
	nonRecurringFee LoanTradingNonRecurringFee (0..*) <"Details of the amount of on-going fees accrued by the traded portion of a loan contract.">
	interest LoanTradingOutstandingsAccrual (0..*) <"Details of the amount of interest accrued by the traded portion of a loan contract.">
	letterOfCreditFee LoanTradingLetterOfCreditAccrual (0..*) <"Details of the amount of interest accrued by the traded portion of a loan contract.">

type LoanTradingSettlementTermsModel: <"A model which contains settlement terms of a trade.">

	tradingAssociation LoanTradingAssocEnum (1..1) <"Defines the trading association under which the loan trade documentation is governed.">
	formOfPurchase LoanTradingFormOfPurchaseEnum (1..1) <"Defines whether the trade is being settled by assignment or participation (i.e. sub-participation).">

type LoanTradingTransferFeeDeterminationModel: <"A model which contains factors associated with the payment of a transfer fee.">

	waivedFlag boolean (1..1) <"A flag defining whether the transfer fee is to be waived for this allocation.">
	creditAgreementAmount NonNegativeMoney (1..1) <"Amount of transfer fee owed to the admin agent for the allocation, per the credit agreement.">
	agentAmount NonNegativeMoney (1..1) <"Amount of transfer fee owed to the admin agent for the allocation, as determined by the agent.">

type PeriodOptionalEndModel: <"A model that describes a period, with an optional end date.">

	startDate date (1..1) <"Date on which this period begins.">
	endDate date (0..1) <"Date on which this period ends.">

type PeriodWithDaysModel: <"A model that describes a period, with an element to define number of days within the period.">

	periodModel PeriodModel (1..1)
	numberOfDays number (1..1) <"The actual number of days represented within the \'period\'. This takes into account counting the appropriate convention.">

type RepaymentTypeModel: <"A model that establishes the flags that determine the type of repayment that is occurring and the flexibility asociated with it (from the lender\'s perspective).">

	refusalAllowed boolean (1..1) <"Defines whether the lender has an option to accept or deny the payment.">
	borrowerMandatory boolean (0..1) <"Defines whether the repayment is mandatory from the borrower\'s perspective, based on the (amortization) schedule on the credit agreement.">
	scheduledRepayment boolean (0..1) <"Defines whether the repayment is a scheduled repayment. This is normally the case when the repayment is defined on the amortization schedule associated with the facility (on the credit agreement).">

type UtilizationModel: <"A model that describes the breakdown of the utilization profile against a single facility.">

	utilizationModelSequence0 UtilizationModelSequence0 (0..1)
	utilizationModelSequence1 UtilizationModelSequence1 (0..1)

	condition Choice:
		one-of

type UtilizationModelSequence0:

	fundedUtilizedAmount MoneyWithParticipantShare (1..1) <"The amount of utilization which is funded.">
	unfundedUtilizedAmount MoneyWithParticipantShare (0..1) <"The amount of utilization which is unfunded.">

type UtilizationModelSequence1:

	unfundedUtilizedAmount MoneyWithParticipantShare (1..1) <"The amount of utilization which is unfunded.">
	fundedUtilizedAmount MoneyWithParticipantShare (0..1) <"The amount of utilization which is funded.">

type Account: <"A generic account that represents any party\'s account at another party. Parties may be identified by the account at another party.">

	accountId AccountId (1..*) <"An account identifier. For example an Account number.">
	accountName AccountName (0..1) <"The name by which the account is known.">
	accountType AccountType (0..1) <"The type of account. e.g., Client, House">
	accountSequence AccountSequence (0..1)
	servicingParty PartyReference (0..1) <"A reference to the party that services/supports the account.">
	id string (1..1) <"The unique identifier for the account within the document.">

	condition Choice:
		required choice accountSequence, servicingParty

type AccountSequence:

	accountBeneficiary PartyReference (1..1) <"A reference to the party beneficiary of the account.">
	servicingParty PartyReference (0..1) <"A reference to the party that services/supports the account.">

type AccountId: <"The data type used for account identifiers.">

	value NonEmptyScheme (1..1)
	accountIdScheme NonEmptyURI (0..1) <"The identifier scheme used with this accountId. A unique URI to determine the authoritative issuer of these identifiers.">

type AccountName: <"The data type used for the name of the account.">

	value Scheme (1..1)
	accountNameScheme NonEmptyURI (0..1) <"The identifier scheme used with this accountName. A unique URI to determine the source of the account name.">

type AccountReference extends Reference: <"Reference to an account.">

	href string (1..1)

type AccountType: <"The data type used for account type.">

	value Scheme (1..1)
	accountTypeScheme NonEmptyURI (0..1) <"The identifier scheme used with this accountType. A unique URI to determine the the type of account.">

type ActionType: <"The data type used for ESMA action type.">

	value Scheme (1..1)
	actionTypeScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1) <"The identifier scheme used with this actionType. A unique URI to determine the the type of action.">

type Address: <"A type that represents a physical postal address.">

	streetAddress StreetAddress (0..1) <"The set of street and building number information that identifies a postal address within a city.">
	city String (0..1) <"The city component of a postal address.">
	state String (0..1) <"A country subdivision used in postal addresses in some countries. For example, US states, Canadian provinces, Swiss cantons.">
	country CountryCode (0..1) <"The ISO 3166 standard code for the country within which the postal address is located.">
	postalCode String (0..1) <"The code, required for computerised mail sorting systems, that is allocated to a physical address by a national postal authority.">

type AdjustableDate: <"A type for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">

	unadjustedDate IdentifiedDate (1..1) <"A date subject to adjustment.">
	dateAdjustments BusinessDayAdjustments (1..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.">
	adjustedDate IdentifiedDate (0..1) <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">
	id string (0..1)

type AdjustableDate2: <"A type that is different from AdjustableDate in two regards. First, date adjustments can be specified with either a dateAdjustments element or a reference to an existing dateAdjustments element. Second, it does not require the specification of date adjustments.">

	unadjustedDate IdentifiedDate (1..1) <"A date subject to adjustment.">
	dateAdjustments BusinessDayAdjustments (0..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business dat in the specified business centers.">
	dateAdjustmentsReference BusinessDayAdjustmentsReference (0..1) <"A pointer style reference to date adjustments defined elsewhere in the document.">
	adjustedDate IdentifiedDate (0..1) <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">
	id string (0..1)

	condition Choice:
		optional choice dateAdjustments, dateAdjustmentsReference

type AdjustableDates: <"A type for defining a series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the dates.">

	unadjustedDate IdentifiedDate (1..*) <"A date subject to adjustment.">
	dateAdjustments BusinessDayAdjustments (1..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business dat in the specified business centers.">
	adjustedDate IdentifiedDate (0..*) <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">
	id string (0..1)

type AdjustableDatesOrRelativeDateOffset: <"A type for defining a series of dates, either as a list of adjustable dates, or a as a repeating sequence from a base date">

	adjustableDates AdjustableDates (0..1) <"A series of adjustable dates">
	relativeDate RelativeDateOffset (0..1) <"A series of dates specified as a repeating sequence from a base date.">

	condition Choice:
		one-of

type AdjustableOrAdjustedDate: <"A type for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">

	adjustableDateModel AdjustableDateModel (0..1)
	adjustedDate IdentifiedDate (0..1) <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">
	id string (0..1)

	condition Choice:
		required choice adjustableDateModel, adjustedDate

type AdjustableOrRelativeDate: <"A type giving the choice between defining a date as an explicit date together with applicable adjustments or as relative to some other (anchor) date.">

	adjustableDate AdjustableDate (0..1) <"A date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">
	relativeDate RelativeDateOffset (0..1) <"A date specified as some offset to another date (the anchor date).">
	id string (0..1)

	condition Choice:
		required choice adjustableDate, relativeDate

type AdjustableOrRelativeDates: <"A type giving the choice between defining a series of dates as an explicit list of dates together with applicable adjustments or as relative to some other series of (anchor) dates.">

	adjustableDates AdjustableDates (0..1) <"A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">
	relativeDates RelativeDates (0..1) <"A series of dates specified as some offset to another series of dates (the anchor dates).">
	id string (0..1)

	condition Choice:
		required choice adjustableDates, relativeDates

type AdjustableRelativeOrPeriodicDates:

	adjustableDates AdjustableDates (0..1) <"A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">
	relativeDateSequence RelativeDateSequence (0..1) <"A series of dates specified as some offset to other dates (the anchor dates) which can">
	periodicDates PeriodicDates (0..1)
	id string (0..1)

	condition Choice:
		required choice adjustableDates, relativeDateSequence , periodicDates

type AdjustableRelativeOrPeriodicDates2: <"A type giving the choice between defining a series of dates as an explicit list of dates together with applicable adjustments, or as relative to some other series of (anchor) dates, or as a set of factors to specify periodic occurences.">

	adjustableDates AdjustableDates (0..1) <"A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">
	relativeDates RelativeDates (0..1) <"A series of dates specified as some offset to another series of dates (the anchor dates).">
	periodicDates PeriodicDates (0..1)
	id string (0..1)

	condition Choice:
		required choice adjustableDates, relativeDates , periodicDates

type AdjustedRelativeDateOffset extends RelativeDateOffset: <"A type defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date) plus optional date adjustments.">

	relativeDateAdjustments BusinessDayAdjustments (0..1) <"The business day convention and financial business centers used for adjusting the relative date if it would otherwise fall on a day that is not a business date in the specified business centers.">

type AmountReference extends Reference: <"Specifies a reference to a monetary amount.">

	href string (1..1)

type AmountSchedule extends Schedule: <"A type defining a currency amount or a currency amount schedule.">

	currency Currency (1..1) <"The currency in which an amount is denominated.">

type AssetClass:

	value Scheme (1..1)
	assetClassScheme NonEmptyURI (0..1)

type AutomaticExercise: <"A type to define automatic exercise of a swaption. With automatic exercise the option is deemed to have exercised if it is in the money by more than the threshold amount on the exercise date.">

	thresholdRate number (1..1) <"A threshold rate. The threshold of 0.10% would be represented as 0.001">

type AverageDailyTradingVolumeLimit: <"To indicate the limitation percentage and limitation period.">

	limitationPercentage RestrictedPercentage (1..1) <"Specifies the limitation percentage in Average Daily trading volume.">
	limitationPeriod int(min: 0) (1..1) <"Specifies the limitation period for Average Daily trading volume in number of days.">

type Beneficiary: <"A type defining the beneficiary of the funds.">

	routingIdentificationModel RoutingIdentificationModel (1..1)
	beneficiaryPartyReference PartyReference (0..1) <"Link to the party acting as beneficiary. This element can only appear within the beneficiary container element.">

type BrokerConfirmation: <"Identifies the market sector in which the trade has been arranged.">

	brokerConfirmationType BrokerConfirmationType (1..1) <"The type of broker confirmation executed between the parties.">

type BrokerConfirmationType: <"Identifies the market sector in which the trade has been arranged.">

	value Scheme (1..1)
	brokerConfirmationTypeScheme NonEmptyURI (0..1)

type BusinessCenter: <"A code identifying a business day calendar location. A business day calendar location is drawn from the list identified by the business day calendar location scheme.">

	value Scheme (1..1)
	businessCenterScheme NonEmptyURI (0..1)
	id string (0..1)

type BusinessCenters: <"A type for defining business day calendar used in determining whether a day is a business day or not. A list of business day calendar locations may be ordered in the document alphabetically based on business day calendar location code. An FpML document containing an unordered business day calendar location list is still regarded as a conformant document.">

	businessCenter BusinessCenter (1..*)
	id string (0..1)

type BusinessCentersReference extends Reference: <"A pointer style reference to a set of business day calendar defined elsewhere in the document.">

	href string (1..1)

type BusinessCenterTime: <"A type for defining a time with respect to a business day calendar location. For example, 11:00am London time.">

	hourMinuteTime HourMinuteTime (1..1) <"A time specified in hh:mm:ss format where the second component must be \'00\', e.g. 11am would be represented as 11:00:00.">
	businessCenter BusinessCenter (1..1)

type BusinessDateRange extends DateRange: <"A type defining a range of contiguous business days by defining an unadjusted first date, an unadjusted last date and a business day convention and business centers for adjusting the first and last dates if they would otherwise fall on a non business day in the specified business centers. The days between the first and last date must also be good business days in the specified centers to be counted in the range.">

	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)

type BusinessDayAdjustments: <"A type defining the business day convention and financial business centers used for adjusting any relevant date if it would otherwise fall on a day that is not a business day in the specified business centers.">

	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)
	id string (0..1)

type BusinessDayAdjustmentsReference extends Reference: <"Reference to a business day adjustments structure.">

	href string (1..1)

type BusinessUnit: <"A type that represents information about a unit within an organization.">

	name String (0..1) <"A name used to describe the organization unit">
	businessUnitId Unit (0..1) <"An identifier used to uniquely identify organization unit">
	contactInfo ContactInformation (0..1) <"Information on how to contact the unit using various means.">
	country CountryCode (0..1) <"The ISO 3166 standard code for the country where the individual works.">
	id string (0..1)

type BusinessUnitReference extends Reference: <"Reference to an organizational unit.">

	href string (1..1)

type BusinessUnitRole: <"A type describing a role played by a unit in one or more transactions. Examples include roles such as Trader, Collateral, Confirmation, Settlement, etc. This can be extended to provide custom roles.">

	value Scheme (1..1)
	unitRoleScheme NonEmptyURI (0..1)

type CalculationAgent: <"A type defining the ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.">

	calculationAgentPartyReference PartyReference (0..*) <"A pointer style reference to a party identifier defined elsewhere in the document. The party referenced is the ISDA Calculation Agent for the trade. If more than one party is referenced then the parties are assumed to be co-calculation agents, i.e. they have joint responsibility.">
	calculationAgentParty CalculationAgentPartyEnum (0..1) <"The ISDA calculation agent responsible for performing duties as defined in the applicable product definitions. For example, the Calculation Agent may be defined as being the Non-exercising Party.">

	condition Choice:
		one-of

type CalculationPeriodFrequency extends Frequency: <"A type defining the frequency at which calculation period end dates occur within the regular part of the calculation period schedule and thier roll date convention. In case the calculation frequency is of value T (term), the period is defined by the swap\\swapStream\\calculationPerioDates\\effectiveDate and the swap\\swapStream\\calculationPerioDates\\terminationDate.">

	rollConvention RollConventionEnum (1..1) <"Used in conjunction with a frequency and the regular period start date of a calculation period, determines each calculation period end date within the regular part of a calculation period schedule.">

type CashflowId: <"An identifier used to identify a single component cashflow.">

	value NonEmptyScheme (1..1)
	cashflowIdScheme NonEmptyURI (0..1)

type CashflowNotional: <"The notional/principal value/quantity/volume used to compute the cashflow.">

	currency Currency (0..1) <"The currency in which an amount is denominated.">
	units NormalizedString (0..1) <"The units in which an amount (not monetary) is denominated.">
	amount number (1..1) <"The quantity of notional (in currency or other units).">
	id string (0..1)

	condition Choice:
		required choice currency, units

type CashflowType: <"A coding scheme used to describe the type or purpose of a cash flow or cash flow component.">

	value Scheme (1..1)
	cashflowTypeScheme NonEmptyURI (0..1)

type CashSettlementReferenceBanks: <"A type defining the list of reference institutions polled for relevant rates or prices when determining the cash settlement amount for a product where cash settlement is applicable.">

	referenceBank ReferenceBank (1..*) <"An institution (party) identified by means of a coding scheme and an optional name.">
	id string (0..1)

type ClearanceSystem: <"Unless otherwise specified, the principal clearance system customarily used for settling trades in the relevant underlying.">

	value Scheme (1..1)
	clearanceSystemScheme NonEmptyURI (0..1)

type SwaptionPhysicalSettlement:

	clearedPhysicalSettlement boolean (1..1) <"Specifies whether the swap resulting from physical settlement of the swaption transaction will clear through a clearing house. The meaning of Cleared Physical Settlement is defined in the 2006 ISDA Definitions, Section 15.2 (published in Supplement number 28).">
	predeterminedClearingOrganizationPartyReference PartyReference (0..1) <"A reference to the clearing organization (CCP, DCO) to which the trade should be cleared.">

type Collateral: <"A type for defining the obligations of the counterparty subject to credit support requirements.">

	independentAmount IndependentAmount (1..1) <"Independent Amount is an amount that usually less creditworthy counterparties are asked to provide. It can either be a fixed amount or a percentage of the Transaction\'s value. The Independent Amount can be: (i) transferred before any trading between the parties occurs (as a deposit at a third party\'s account or with the counterparty) or (ii) callable after trading has occurred (typically because a downgrade has occurred). In situation (i), the Independent Amount is not included in the calculation of Exposure, but in situation (ii), it is included in the calculation of Exposure. Thus, for situation (ii), the Independent Amount may be transferred along with any collateral call. Independent Amount is a defined term in the ISDA Credit Support Annex. (\"with respect to a party, the amount specified as such for that party in Paragraph 13; if no amount is specified, zero\").">

type CollateralValueAllocation:

	_type CollateralValueAllocationEnum (1..1) <"The type of allocation e.g. Full or ExcessOverMargin">
	value Money (1..*)

type ContactInformation: <"A type that represents how to contact an individual or organization.">

	telephone TelephoneNumber (0..*) <"A telephonic contact.">
	email NormalizedString (0..*) <"An address on an electronic mail or messaging sysem .">
	address Address (0..1) <"A postal or street address.">

type ContractualDefinitions: <"The definitions, such as those published by ISDA, that will define the terms of the trade.">

	value Scheme (1..1)
	contractualDefinitionsScheme NonEmptyURI (0..1)

type ContractualMatrix:

	matrixType MatrixType (1..1) <"Identifies the form of applicable matrix.">
	publicationDate date (0..1) <"Specifies the publication date of the applicable version of the matrix. When this element is omitted, the ISDA supplemental language for incorporation of the relevant matrix will generally define rules for which version of the matrix is applicable.">
	matrixTerm MatrixTerm (0..1) <"Defines any applicable key into the relevant matrix. For example, the Transaction Type would be the single term required for the Credit Derivatives Physical Settlement Matrix. This element should be omitted in the case of the 2000 ISDA Definitions Settlement Matrix for Early Termination and Swaptions.">

type ContractualSupplement: <"A contractual supplement (such as those published by ISDA) that will apply to the trade.">

	value Scheme (1..1)
	contractualSupplementScheme NonEmptyURI (0..1)

type ContractualTermsSupplement: <"A contractual supplement (such as those published by ISDA) and its publication date that will apply to the trade.">

	_type ContractualSupplement (1..1) <"Identifies the form of applicable contractual supplement.">
	publicationDate date (0..1) <"Specifies the publication date of the applicable version of the contractual supplement.">

type CorrespondentInformation: <"A type that describes the information to identify a correspondent bank that will make delivery of the funds on the paying bank\'s behalf in the country where the payment is to be made.">

	routingIdentificationModel RoutingIdentificationModel (1..1)
	correspondentPartyReference PartyReference (0..1) <"Link to the party acting as correspondent. This element can only appear within the correspondentInformation container element.">

type CountryCode: <"The code representation of a country or an area of special sovereignty. By default it is a valid 2 character country code as defined by the ISO standard 3166-1 alpha-2 - Codes for representation of countries http://www.niso.org/standards/resources/3166.html.">

	value Token (1..1)
	countryScheme NonEmptyURI (0..1)

type CreditSeniority:

	value Scheme (1..1)
	creditSeniorityScheme NonEmptyURI (0..1) <"creditSeniorityTradingScheme overrides creditSeniorityScheme when the underlyer defines the reference obligation used in a single name credit default swap trade.">

type CreditSupportAgreement: <"The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.">

	_type CreditSupportAgreementType (1..1) <"The type of ISDA Credit Support Agreement">
	date date (1..1) <"The date of the agreement executed between the parties and intended to govern collateral arrangements for all OTC derivatives transactions between those parties.">
	identifier CreditSupportAgreementIdentifier (0..1) <"An identifier used to uniquely identify the CSA">

type CreditSupportAgreementIdentifier:

	value NonEmptyScheme (1..1)
	creditSupportAgreementIdScheme NonEmptyURI (0..1)

type CreditSupportAgreementType:

	value Scheme (1..1)
	creditSupportAgreementTypeScheme NonEmptyURI (0..1)

type CreditRating: <"A party\'s credit rating.">

	value Scheme (1..1)
	creditRatingScheme NonEmptyURI (0..1)

type Currency: <"The code representation of a currency or fund. By default it is a valid currency code as defined by the ISO standard 4217 - Codes for representation of currencies and funds http://www.iso.org/iso/en/prods-services/popstds/currencycodeslist.html.">

	value Scheme (1..1)
	currencyScheme NonEmptyURI (0..1)

type DateList: <"List of Dates">

	date date (1..*)

type DateOffset extends Offset: <"A type defining an offset used in calculating a date when this date is defined in reference to another date through a date offset. The type includes the convention for adjusting the date and an optional sequence element to indicate the order in a sequence of multiple date offsets.">

	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">

type DateRange: <"A type defining a contiguous series of calendar dates. The date range is defined as all the dates between and including the first and the last date. The first date must fall before the last date.">

	unadjustedFirstDate date (1..1) <"The first date of a date range.">
	unadjustedLastDate date (1..1) <"The last date of a date range.">

type DateReference extends Reference: <"Reference to an identified date or a complex date structure.">

	href string (1..1)

type DateTimeList: <"List of DateTimes">

	dateTime zonedDateTime (1..*)

type DayCountFraction: <"The specification for how the number of days between two dates is calculated for purposes of calculation of a fixed or floating payment amount and the basis for how many days are assumed to be in a year. Day Count Fraction is an ISDA term. The equivalent AFB (Association Francaise de Banques) term is Calculation Basis.">

	value Scheme (1..1)
	dayCountFractionScheme NonEmptyURI (0..1)

type DeterminationMethod: <"Coding scheme that specifies the method according to which an amount or a date is determined.">

	value Scheme (1..1)
	determinationMethodScheme NonEmptyURI (0..1)
	id string (0..1)

type DeterminationMethodReference extends Reference: <"A reference to the return swap notional determination method.">

	href string (1..1)

type DirectionalLeg extends Leg: <"An abstract base class for all directional leg types with effective date, termination date, where a payer makes a stream of payments of greater than zero value to a receiver.">

	legIdentifier LegIdentifier (0..*) <"Version aware identification of this leg.">
	payerReceiverModel PayerReceiverModel (1..1)
	effectiveDate AdjustableOrRelativeDate (0..1) <"Specifies the effective date of this leg of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically point to the effective date of the other leg of the swap.">
	terminationDate AdjustableOrRelativeDate (0..1) <"Specifies the termination date of this leg of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically point to the termination date of the other leg of the swap.">

type Documentation: <"An entity for defining the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed.">

	masterAgreement MasterAgreement (0..1) <"The agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.">
	masterConfirmation MasterConfirmation (0..1) <"The agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.">
	brokerConfirmation BrokerConfirmation (0..1) <"Specifies the deails for a broker confirm.">
	contractualDefinitions ContractualDefinitions (0..*) <"The definitions such as those published by ISDA that will define the terms of the trade.">
	contractualTermsSupplement ContractualTermsSupplement (0..*) <"A contractual supplement (such as those published by ISDA) that will apply to the trade.">
	contractualMatrix ContractualMatrix (0..*) <"A reference to a contractual matrix of elected terms/values (such as those published by ISDA) that shall be deemed to apply to the trade. The applicable matrix is identified by reference to a name and optionally a publication date. Depending on the structure of the matrix, an additional term (specified in the matrixTerm element) may be required to further identify a subset of applicable terms/values within the matrix.">
	creditSupportAgreement CreditSupportAgreement (0..1) <"The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.">
	otherAgreement OtherAgreement (0..*) <"Any other agreement executed between the parties.">
	attachment Resource (0..*) <"A human readable document related to this transaction, for example a confirmation.">

	condition Choice:
		optional choice masterConfirmation, brokerConfirmation

type Empty: <"A special type meant to be used for elements with no content and no attributes.">

type EntityId: <"A legal entity identifier (e.g. RED entity code).">

	value NonEmptyScheme (1..1)
	entityIdScheme NonEmptyURI (0..1)

type EntityName: <"The name of the reference entity. A free format string. FpML does not define usage rules for this element.">

	value Scheme (1..1)
	entityNameScheme NonEmptyURI (0..1)

type ExchangeId: <"A short form unique identifier for an exchange. If the element is not present then the exchange shall be the primary exchange on which the underlying is listed. The term \"Exchange\" is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.">

	value NonEmptyScheme (1..1)
	exchangeIdScheme NonEmptyURI (0..1)

type Exercise: <"The abstract base class for all types which define way in which options may be exercised.">

	id string (0..1)

type ExerciseFee: <"A type defining the fee payable on exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised.">

	payerReceiverModel PayerReceiverModel (1..1)
	notionalReference NotionalReference (1..1) <"A pointer style reference to the associated notional schedule defined elsewhere in the document.">
	feeAmount number (0..1) <"The amount of fee to be paid on exercise. The fee currency is that of the referenced notional.">
	feeRate number (0..1) <"A fee represented as a percentage of some referenced notional. A percentage of 5% would be represented as 0.05.">
	feePaymentDate RelativeDateOffset (1..1) <"The date on which exercise fee(s) will be paid. It is specified as a relative date.">

	condition Choice:
		required choice feeAmount, feeRate

type ExerciseFeeSchedule: <"A type to define a fee or schedule of fees to be payable on the exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised.">

	payerReceiverModel PayerReceiverModel (1..1)
	notionalReference ScheduleReference (1..1) <"A pointer style reference to the associated notional schedule defined elsewhere in the document.">
	feeAmountSchedule AmountSchedule (0..1) <"The exercise fee amount schedule. The fees are expressed as currency amounts. The currency of the fee is assumed to be that of the notional schedule referenced.">
	feeRateSchedule Schedule (0..1) <"The exercise free rate schedule. The fees are expressed as percentage rates of the notional being exercised. The currency of the fee is assumed to be that of the notional schedule referenced.">
	feePaymentDate RelativeDateOffset (1..1) <"The date on which exercise fee(s) will be paid. It is specified as a relative date.">

	condition Choice:
		required choice feeAmountSchedule, feeRateSchedule

type ExerciseNotice: <"A type defining to whom and where notice of execution should be given. The partyReference refers to one of the principal parties of the trade. If present the exerciseNoticePartyReference refers to a party, other than the principal party, to whome notice should be given.">

	partyReference PartyReference (1..1) <"The party referenced has allocated the trade identifier.">
	exerciseNoticePartyReference PartyReference (0..1) <"The party referenced is the party to which notice of exercise should be given by the buyer.">
	businessCenter BusinessCenter (1..1)

type ExerciseProcedure: <"A type describing how notice of exercise should be given. This can be either manual or automatic.">

	manualExercise ManualExercise (0..1) <"Specifies that the notice of exercise must be given by the buyer to the seller or seller\'s agent.">
	automaticExercise AutomaticExercise (0..1) <"If automatic is specified then the notional amount of the underlying swap, not previously exercised under the swaption will be automatically exercised at the expriration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than the specified threshold rate. The term in-the-money is assumed to have the meaning defining in the 2000 ISDA Definitions, Section 17.4 In-the-money.">
	followUpConfirmation boolean (1..1) <"A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.">
	limitedRightToConfirm boolean (0..1) <"Has the meaning defined as part of the 1997 ISDA Government Bond Option Definitions, section 4.5 Limited Right to Confirm Exercise. If present, (i) the Seller may request the Buyer to confirm its intent if not done on or before the expiration time on the Expiration date (ii) specific rules will apply in relation to the settlement mode.">
	splitTicket boolean (0..1) <"Typically applicable to the physical settlement of bond and convertible bond options. If present, means that the Party required to deliver the bonds will divide those to be delivered as notifying party desires to facilitate delivery obligations.">

	condition Choice:
		required choice manualExercise, automaticExercise

type ExerciseProcedureOption: <"A type describing how notice of exercise should be given. This can be either manual or automatic.">

	manualExercise Empty (0..1) <"Specifies that the notice of exercise must be given by the buyer to the seller or seller\'s agent.">
	automaticExercise Empty (0..1) <"If automatic is specified then the notional amount of the underlying swap, not previously exercised under the swaption will be automatically exercised at the expriration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than the specified threshold rate. The term in-the-money is assumed to have the meaning defining in the 2000 ISDA Definitions, Section 17.4 In-the-money.">

	condition Choice:
		one-of

type FloatingRate extends Rate: <"A type defining a floating rate.">

	floatingRateIndexModel FloatingRateIndexModel (1..1)
	floatingRateMultiplierSchedule Schedule (0..1) <"A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.">
	spreadSchedule SpreadSchedule (0..*) <"The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">
	rateTreatment RateTreatmentEnum (0..1) <"The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.">
	capRateSchedule StrikeSchedule (0..*) <"The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.">
	floorRateSchedule StrikeSchedule (0..*) <"The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.">

type FloatingRateIndex: <"The ISDA Floating Rate Option, i.e. the floating rate index.">

	value Scheme (1..1)
	floatingRateIndexScheme NonEmptyURI (0..1)

type ForecastRateIndex: <"A type defining a rate index.">

	floatingRateIndex FloatingRateIndex (1..1) <"The ISDA Floating Rate Option, i.e. the floating rate index.">
	indexTenor Period (1..1) <"The ISDA Designated Maturity, i.e. the tenor of the floating rate.">

type Formula: <"A type describing a financial formula, with its description and components.">

	formulaDescription String (0..1) <"Text description of the formula">
	math Math (0..1) <"An element for containing an XML representation of the formula. Defined using xsd:any currently for flexibility in choice of language (MathML, OpenMath)">
	formulaComponent FormulaComponent (0..*) <"Elements describing the components of the formula. The name attribute points to a value used in the math element. The href attribute points to a value elsewhere in the document">

type FormulaComponent: <"Elements describing the components of the formula. The name attribute points to a value used in the math element. The href attribute points to a numeric value defined elsewhere in the document that is used by the formula component.">

	componentDescription String (1..1) <"Text description of the component">
	formula Formula (0..1) <"Additional formulas required to describe this component">
	name NormalizedString (0..1)

type Frequency: <"A type defining a time frequency, e.g. one day, three months. Used for specifying payment or calculation frequencies at which the value T (Term) is applicable.">

	periodMultiplier int(min: 1) (1..1) <"A time period multiplier, e.g. 1, 2 or 3 etc. If the period value is T (Term) then periodMultiplier must contain the value 1.">
	period PeriodExtendedEnum (1..1) <"A time period, e.g. a day, week, month, year or term of the stream.">
	id string (0..1)

type FutureValueAmount extends NonNegativeMoney: <"A type defining a currency amount as at a future value date.">

	calculationPeriodNumberOfDays int(min: 1) (1..1) <"The number of days from the adjusted calculation period start date to the adjusted value date, calculated in accordance with the applicable day count fraction.">
	valueDate date (1..1) <"Adjusted value date of the future value amount.">

type FxCashSettlement: <"A type that is used for describing cash settlement of an option / non deliverable forward. It includes the currency to settle into together with the fixings required to calculate the currency amount.">

	settlementCurrency Currency (1..1) <"The currency in which cash settlement occurs for non-deliverable forwards and cash-settled options (non-deliverable or otherwise).">
	referenceCurrency Currency (0..1)
	notionalAmount PositiveMoney (0..1) <"The amount of money that the settlement will be derived from.">
	fixing FxFixing (0..*) <"Specifies the source for and timing of a fixing of an exchange rate. This is used in the agreement of non-deliverable forward trades as well as various types of FX OTC options that require observations against a particular rate. This element is optional, permitting it to be omitted where fixing details are unavailable at the point of message creation. It has multiple occurrence to support the case where fixing details must be specified for more than one currency pair e.g. on an option settled into a third currency (that is not one of the option currencies).">
	rateSourceFixing FxRateSourceFixing (0..*) <"Specifies the source for and timing of a fixing of an exchange rate. This is used in the agreement of non-deliverable forward trades as well as various types of FX OTC options that require observations against a particular rate. This element is optional, permitting it to be omitted where fixing details are unavailable at the point of message creation. It has multiple occurrence to support the case where fixing details must be specified for more than one currency pair e.g. on an option settled into a third currency (that is not one of the option currencies).">
	settlementDate AdjustableDate (0..1) <"The date on which settlement is scheduled to occur">

	condition Choice:
		optional choice fixing, rateSourceFixing

type FxCashSettlementSimple: <"A type that is used for describing cash settlement of a variance or volatility swap option. It includes the settlement currency together with the spot currency exchange required to calculate the settlement currency amount.">

	settlementCurrency Currency (1..1) <"The currency in which cash settlement occurs.">
	referenceCurrency Currency (0..1) <"Reference Currency.">
	fixing FxFixing (0..*) <"Quoted currency pair.">
	rateSourceFixing FxRateSourceFixing (0..*) <"Settlement Rate Source and Fixing Date.">

	condition Choice:
		optional choice fixing, rateSourceFixing

type FxInformationSource extends InformationSource:

	fixingTime BusinessCenterTime (0..1) <"The time that the fixing will be taken along with a business center to define the time zone">

type FxFixing: <"A type that specifies the source for and timing of a fixing of an exchange rate. This is used in the agreement of non-deliverable forward trades as well as various types of FX OTC options that require observations against a particular rate.">

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	fixingDate date (0..1) <"Describes the specific date when a non-deliverable forward or cash-settled option will \"fix\" against a particular rate, which will be used to compute the ultimate cash settlement. This element should be omitted where a single, discrete fixing date cannot be identified e.g. on an american option, where fixing may occur at any date on a continuous range.">
	fxSpotRateSource FxSpotRateSource (0..1) <"Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.">

type FxRate: <"A type describing the rate of a currency conversion: pair of currency, quotation mode and exchange rate.">

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	rate number (1..1) <"The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.">

type FxRateSourceFixing: <"Describes a rate source to be fixed and the date the fixing occurs">

	settlementRateSource FxSettlementRateSource (1..1)
	fixingDate AdjustableDate (1..1) <"The date on which the fixing is scheduled to occur.">

type FxSettlementRateSource:

	settlementRateOption SettlementRateOption (0..1) <"Indicates that an officially defined rate settlement rate option will be the used for the fixing.">
	nonstandardSettlementRate FxInformationSource (0..1) <"Indicates that a non-standard rate source will be used for the fixing.">

	condition Choice:
		one-of

type FxSpotRateSource: <"A type defining the rate source and fixing time for an fx rate.">

	primaryRateSource InformationSource (1..1) <"The primary source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">
	secondaryRateSource InformationSource (0..1) <"An alternative, or secondary, source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">
	fixingTime BusinessCenterTime (0..1) <"The time at which the spot currency exchange rate will be observed. It is specified as a time in a business day calendar location, e.g. 11:00am London time.">

type GoverningLaw: <"Identification of the law governing the transaction.">

	value Scheme (1..1)
	governingLawScheme NonEmptyURI (0..1)

type GrossCashflow: <"A payment component owed from one party to the other for the cash flow date. This payment component should by of only a single type, e.g. a fee or a cashflow from a cashflow stream.">

	grossCashflowSequence GrossCashflowSequence (0..1)
	cashflowType CashflowType (0..1) <"Defines the type of cash flow. For instance, a type of fee, premium, principal exchange, leg fee.">

type GrossCashflowSequence:

	cashflowId CashflowId (1..1) <"Unique identifier for a cash flow.">
	partyTradeIdentifierReference PartyTradeIdentifierReference (0..1) <"Pointer-style reference to the partyTradeIdentifier block within the tradeIdentifyingItems collection, which identifies the parent trade for this cashflow.">
	payerReceiverModel PayerReceiverModel (1..1)
	cashflowAmount Money (1..1) <"Cash flow amount in a given currency to be paid/received.">

type IdentifiedCurrency extends Currency: <"Specifies Currency with ID attribute.">

	id string (0..1)

type IdentifiedCurrencyReference extends Reference: <"Reference to a currency with ID attribute">

	href string (1..1)

type IdentifiedDate: <"A date which can be referenced elsewhere.">

	value date (1..1)
	id string (0..1)

type IdentifiedPayerReceiver: <"A type extending the PayerReceiverEnum type wih an id attribute.">

	value PayerReceiverEnum (1..1)
	id string (0..1)

type IdentifiedRate: <"A rate which can be referenced elsewhere.">

	value number (1..1)
	id string (0..1)

type IndependentAmount:

	payerReceiverModel PayerReceiverModel (1..1)
	paymentDetail PaymentDetail (1..*) <"A container element allowing a schedule of payments associated with the Independent Amount.">

type IndustryClassification: <"A party\'s industry sector classification.">

	value Scheme (1..1)
	industryClassificationScheme NonEmptyURI (0..1)

type InformationProvider:

	value Scheme (1..1)
	informationProviderScheme NonEmptyURI (0..1)

type InformationSource: <"A type defining the source for a piece of information (e.g. a rate refix or an fx fixing).">

	rateSource InformationProvider (1..1) <"An information source for obtaining a market rate. For example Bloomberg, Reuters, Telerate etc.">
	rateSourcePage RateSourcePage (0..1) <"A specific page for the rate source for obtaining a market rate.">
	rateSourcePageHeading String (0..1) <"The heading for the rate source on a given rate source page.">

type InstrumentId: <"A short form unique identifier for a security.">

	value NonEmptyScheme (1..1)
	instrumentIdScheme NonEmptyURI (1..1)

type InterestAccrualsCompoundingMethod extends InterestAccrualsMethod: <"A type defining the way in which interests are accrued: the applicable rate (fixed or floating reference) and the compounding method.">

	interestAccrualsCompoundingMethodSequence InterestAccrualsCompoundingMethodSequence (0..1)

type InterestAccrualsCompoundingMethodSequence:

	compoundingMethod CompoundingMethodEnum (1..1) <"If more that one calculation period contributes to a single payment amount this element specifies whether compounding is applicable, and if so, what compounding method is to be used. This element must only be included when more that one calculation period contributes to a single payment amount.">

type InterestAccrualsMethod: <"A type describing the method for accruing interests on dividends. Can be either a fixed rate reference or a floating rate reference.">

	floatingRateCalculation FloatingRateCalculation (0..1) <"The floating rate calculation definitions">
	fixedRate number (0..1) <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">

	condition Choice:
		one-of

type IntermediaryInformation: <"A type that describes the information to identify an intermediary through which payment will be made by the correspondent bank to the ultimate beneficiary of the funds.">

	routingIdentificationModel RoutingIdentificationModel (1..1)
	intermediarySequenceNumber int(min: 1) (1..1) <"A sequence number that gives the position of the current intermediary in the chain of payment intermediaries. The assumed domain value set is an ascending sequence of integers starting from 1.">
	intermediaryPartyReference PartyReference (0..1) <"Reference to the party acting as intermediary.">

type InterpolationMethod:

	value Scheme (1..1)
	interpolationMethodScheme NonEmptyURI (0..1)

type Language: <"The data type used for indicating the language of the resource, described using the ISO 639-2/T Code.">

	value Scheme (1..1)
	languageScheme NonEmptyURI (0..1)

type Leg: <"A supertype of leg. All swap legs extend this type.">

	id string (0..1)

type LegId: <"Leg identity.">

	value Token60 (1..1)
	legIdScheme NonEmptyURI (1..1)

type LegIdentifier: <"Version aware identification of a leg.">

	legId LegId (1..1) <"Identity of this leg.">
	versionHistoryModel VersionHistoryModel (0..1)

type LegalEntity: <"A type defining a legal entity.">

	legalEntitySequence LegalEntitySequence (0..1)
	entityId EntityId (0..*) <"A legal entity identifier (e.g. RED entity code)..">
	id string (0..1)

	condition Choice:
		required choice legalEntitySequence, entityId

type LegalEntitySequence:

	entityName EntityName (1..1) <"The name of the reference entity. A free format string. FpML does not define usage rules for this element.">
	entityId EntityId (0..*) <"A legal entity identifier (e.g. RED entity code).">

type LegalEntityReference extends Reference: <"References a credit entity defined elsewhere in the document.">

	href string (1..1)

type MainPublication: <"A type to define the main publication source.">

	value Scheme (1..1)
	mainPublicationScheme NonEmptyURI (0..1)

type ManualExercise: <"A type defining manual exercise, i.e. that the option buyer counterparty must give notice to the option seller of exercise.">

	exerciseNotice ExerciseNotice (0..1) <"Definition of the party to whom notice of exercise should be given.">
	fallbackExercise boolean (0..1) <"If fallback exercise is specified then the notional amount of the underlying swap, not previously exercised under the swaption, will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than one tenth of a percentage point (0.10% or 0.001). The term in-the-money is assumed to have the meaning defined in the 2000 ISDA Definitions, Section 17.4. In-the-money.">

type MasterAgreement: <"An entity for defining the agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.">

	masterAgreementId MasterAgreementId (0..*) <"An identifier that has been created to identify the master agreement.">
	masterAgreementType MasterAgreementType (1..1) <"The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.">
	masterAgreementVersion MasterAgreementVersion (0..1) <"The version of the master agreement.">
	masterAgreementDate date (0..1) <"The date on which the master agreement was signed.">

type MasterAgreementId: <"A master agreement identifier allocated by a party. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">

	value NonEmptyScheme (1..1)
	masterAgreementIdScheme NonEmptyURI (0..1)

type MasterAgreementType:

	value Scheme (1..1)
	masterAgreementTypeScheme NonEmptyURI (0..1)

type MasterAgreementVersion:

	value Scheme (1..1)
	masterAgreementVersionScheme NonEmptyURI (0..1)

type MasterConfirmation: <"An entity for defining the master confirmation agreement executed between the parties.">

	masterConfirmationType MasterConfirmationType (1..1) <"The type of master confirmation executed between the parties.">
	masterConfirmationDate date (1..1) <"The date of the confirmation executed between the parties and intended to govern all relevant transactions between those parties.">
	masterConfirmationAnnexDate date (0..1) <"The date that an annex to the master confirmation was executed between the parties.">
	masterConfirmationAnnexType MasterConfirmationAnnexType (0..1) <"The type of master confirmation annex executed between the parties.">

type MasterConfirmationAnnexType:

	value Scheme (1..1)
	masterConfirmationAnnexTypeScheme NonEmptyURI (0..1)

type MasterConfirmationType:

	value Scheme (1..1)
	masterConfirmationTypeScheme NonEmptyURI (0..1)

type MatchId: <"An identifier used to identify matched cashflows.">

	value NonEmptyScheme (1..1)
	matchIdScheme NonEmptyURI (0..1)

type Math: <"A type defining a mathematical expression.">

type MatrixType:

	value Scheme (1..1)
	matrixTypeScheme NonEmptyURI (0..1)

type MatrixTerm:

	value Scheme (1..1)
	matrixTermScheme NonEmptyURI (0..1)

type MimeType: <"The type that indicates the type of media used to store the content. MimeType is used to determine the software product(s) that can read the content. MIME types are described in RFC 2046.">

	value Scheme (1..1)
	mimeTypeScheme NonEmptyURI (0..1)

type Money extends MoneyBase: <"A type defining a currency amount.">

	amount number (1..1) <"The monetary quantity in currency units.">

type MoneyBase: <"Abstract base class for all money types.">

	currency Currency (1..1) <"The currency in which an amount is denominated.">
	id string (0..1)

type MultipleExercise: <"A type defining multiple exercises. As defining in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more than the maximum notional amount, and if an integral multiple amount is specified, the notional exercised must be equal to or, be an integral multiple of, the integral multiple amount.">

	partialExerciseModel PartialExerciseModel (1..1)
	maximumNotionalAmount number (0..1) <"The maximum notional amount that can be exercised on a given exercise date.">
	maximumNumberOfOptions NonNegativeDecimal (0..1) <"The maximum number of options that can be exercised on a given exercise date. If the number is not specified, it means that the maximum number of options corresponds to the remaining unexercised options.">

	condition Choice:
		optional choice maximumNotionalAmount, maximumNumberOfOptions

type NonNegativeAmountSchedule extends NonNegativeSchedule: <"A type defining a currency amount or a currency amount schedule.">

	currency Currency (1..1) <"The currency in which an amount is denominated.">

type NonNegativeMoney extends MoneyBase: <"A type defining a non negative money amount.">

	amount NonNegativeDecimal (1..1) <"The non negative monetary quantity in currency units.">

type NonNegativePayment extends PaymentBaseExtended: <"A complex type to specify non negative payments.">

	paymentAmount NonNegativeMoney (1..1) <"Non negative payment amount.">

type NonNegativeSchedule: <"A type defining a schedule of non-negative rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.">

	initialValue NonNegativeDecimal (1..1) <"The non-negative initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.">
	step NonNegativeStep (0..*) <"The schedule of step date and non-negative value pairs. On each step date the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">
	id string (0..1)

type NonNegativeStep extends StepBase: <"A type defining a step date and non-negative step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortization or a step-up coupon schedule.">

	stepValue NonNegativeDecimal (1..1) <"The non-negative rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.">

type NotionalAmount extends NonNegativeMoney: <"A complex type to specify the notional amount.">

type NotionalAmountReference extends Reference: <"A reference to the notional amount.">

	href string (1..1)

type NotionalReference extends Reference: <"A reference to the notional amount.">

	href string (1..1)

type NumberOfOptionsReference extends Reference: <"A reference to the number of options.">

	href string (1..1)

type NumberOfUnitsReference extends Reference: <"A reference to the number of units.">

	href string (1..1)

type ObservationFrequency extends Period: <"A type defining the frequency at which calculation period end dates occur within the regular part of the calculation period schedule and thier roll date convention. In case the calculation frequency is of value T (term), the period is defined by the swap\\swapStream\\calculationPerioDates\\effectiveDate and the swap\\swapStream\\calculationPerioDates\\terminationDate.">

	periodConvention RollConventionEnum (0..1) <"Used in conjunction with a frequency and the regular period start date of an observation period, determines each observation period end date within the regular part of a observation period schedule.">

type Offset extends Period: <"A type defining an offset used in calculating a new date relative to a reference date. E.g. calendar days, business days, Commodity Business days, etc..">

	dayType DayTypeEnum (0..1) <"In the case of an offset specified as a number of days, this element defines whether consideration is given as to whether a day is a good business day or not. If a day type of business days is specified then non-business days are ignored when calculating the offset. The financial business centers to use for determination of business days are implied by the context in which this element is used. This element must only be included when the offset is specified as a number of days. If the offset is zero days then the dayType element should not be included.">

type OffsetPrevailingTime: <"Allows the specification of a time that may be on a day prior or subsequent to the day in question. This type is intended for use with a day of the week (i.e. where no actual date is specified) as part of, for example, a period that runs from 23:00-07:00 on a series of days and where holidays on the actual days would affect the entire time period.">

	time PrevailingTime (1..1)
	offset Offset (0..1) <"Indicates whether time applies to the actual day specified (in which case this element should be omitted) the day prior to that day (in which case periodMultiplier should be -1 and period should be Day) or the day subsequent to that day (in which case periodMultiplier should be 1 and period should be Day).">

type OnBehalfOf:

	partyReference PartyReference (1..1) <"The party for which the message reciever should work.">
	accountReference AccountReference (0..*) <"Identifies the account(s) related to the party when they cannot be determined from the party alone, for example in a inter-book trade.">

type OrganizationType: <"A code that describes what type of role an organization plays, for example a SwapsDealer, a Major Swaps Participant, or Other">

	value Token (1..1)
	organizationTypeScheme NonEmptyURI (0..1)

type OriginatingEvent:

	value Scheme (1..1)
	originatingEventScheme NonEmptyURI (0..1)

type OtherAgreement: <"An entity for defining the an agreement executed between parties.">

	identifier OtherAgreementId (0..*) <"An identifier that has been created to identify the agreement.">
	_type OtherAgreementType (1..1) <"The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.">
	version OtherAgreementVersion (0..1) <"The version of the agreement.">
	date date (0..1) <"The date on which the agreement was signed.">

type OtherAgreementId: <"A agreement identifier allocated by a party. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">

	value NonEmptyScheme (1..1)
	agreementIdScheme NonEmptyURI (0..1)

type OtherAgreementType:

	value Scheme (1..1)
	agreementTypeScheme NonEmptyURI (0..1)

type OtherAgreementVersion:

	value Scheme (1..1)
	agreementVersionScheme NonEmptyURI (0..1)

type PartialExercise: <"A type defining partial exercise. As defined in the 2000 ISDA Definitions, Section 12.3 Partial Exercise, the buyer of the option may exercise all or less than all the notional amount of the underlying swap but may not be less than the minimum notional amount (if specified) and must be an integral multiple of the integral multiple amount if specified.">

	partialExerciseModel PartialExerciseModel (1..1)

type Party: <"A type defining a legal entity or a subdivision of a legal entity. Parties can perform multiple roles in a trade lifecycle. For example, the principal parties obligated to make payments from time to time during the term of the trade, but may include other parties involved in, or incidental to, the trade, such as parties acting in the role of novation transferor/transferee, broker, calculation agent, etc. In FpML roles are defined in multiple places within a document.">

	partyModel PartyModel (0..1)
	partySequence PartySequence (0..1)
	id string (1..1) <"The id uniquely identifying the Party within the document.">

	condition Choice:
		required choice partyModel, partySequence

type PartySequence:

	groupType PartyGroupType (1..1) <"Party Group Type, e.g. JointAndSeveralLiability">
	partyReference PartyReference (2..*) <"Reference to a party that is a member of the group of entities that are acting together as a single party in a transaction.">

type PartyGroupType: <"The data type used for party group classification.">

	value Scheme (1..1)
	partyGroupTypeScheme NonEmptyURI (0..1)

type PartyId: <"The data type used for party identifiers.">

	value NonEmptyScheme (1..1)
	partyIdScheme NonEmptyURI (1..1)

type PartyName: <"The data type used for the legal name of an organization.">

	value Scheme (1..1)
	partyNameScheme NonEmptyURI (0..1)

type PartyReference extends Reference: <"Reference to a party.">

	href string (1..1)

type PartyRole: <"A type describing a role played by a party in one or more transactions. Examples include roles such as guarantor, custodian, confirmation service provider, etc. This can be extended to provide custom roles.">

	value Scheme (1..1)
	partyRoleScheme NonEmptyURI (0..1)

type PartyRoleType: <"A type refining the role a role played by a party in one or more transactions. Examples include \"AllPositions\" and \"SomePositions\" for Guarantor. This can be extended to provide custom types.">

	value Scheme (1..1)
	partyRoleTypeScheme NonEmptyURI (0..1)

type PersonReference extends Reference: <"Reference to an individual.">

	href string (1..1)

type PartyTradeIdentifierReference extends Reference: <"A reference to a partyTradeIdentifier object.">

	href string (1..1)

type Payment extends PaymentBase: <"A type for defining payments. In Transparency view, normally the payer and receiver party references are not used; however they may be provided if necessary for administrative activities such as Reporting Party Determination in FX.">

	payerReceiverModel PayerReceiverModel (1..1)
	paymentAmount NonNegativeMoney (1..1) <"The currency amount of the payment.">
	paymentDate AdjustableOrAdjustedDate (0..1) <"The payment date. This date is subject to adjustment in accordance with any applicable business day convention.">
	paymentType PaymentType (0..1) <"A classification of the type of fee or additional payment, e.g. brokerage, upfront fee etc. FpML does not define domain values for this element.">
	settlementInformation SettlementInformation (0..1) <"The information required to settle a currency payment that results from a trade.">
	discountFactor number (0..1) <"The value representing the discount factor used to calculate the present value of the cash flow.">
	presentValueAmount Money (0..1) <"The amount representing the present value of the forecast payment.">
	href string (0..1) <"Can be used to reference the yield curve used to estimate the discount factor.">

type PaymentBase: <"An abstract base class for payment types.">

	id string (0..1)

type PaymentBaseExtended extends PaymentBase: <"Base type for payments.">

	payerReceiverModel PayerReceiverModel (1..1)
	paymentDate AdjustableOrRelativeDate (1..1) <"The payment date, which can be expressed as either an adjustable or relative date.">

type PaymentDetail extends PaymentBase:

	paymentDate AdjustableOrRelativeDate (0..1) <"Payment date.">
	paymentAmount Money (0..1) <"A fixed payment amount.">
	paymentDetailSequence PaymentDetailSequence (0..1)

	condition Choice:
		required choice paymentAmount, paymentDetailSequence

type PaymentDetailSequence:

	paymentRule PaymentRule (1..1) <"A type defining the calculation rule.">
	paymentAmount Money (0..1) <"A fixed payment amount.">

type PaymentDetails: <"Details on the referenced payment. e.g. Its cashflow components, settlement details.">

	paymentReference PaymentReference (1..1) <"The reference to the identified payment strucutre.">
	grossCashflow GrossCashflow (1..*) <"Payment details of this cash flow component, including currency, amount and payer/payee.">
	settlementInformation SettlementInformation (0..1) <"The information required to settle a currency payment.">

type PaymentReference extends Reference: <"Reference to a payment.">

	href string (1..1)

type PaymentRule: <"The abstract base type from which all calculation rules of the independent amount must be derived.">

type PaymentType:

	value Scheme (1..1)
	paymentTypeScheme NonEmptyURI (0..1)

type Period: <"A type to define recurring periods or time offsets.">

	periodMultiplier int (1..1) <"A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be used when specifying an offset relative to another date, e.g. -2 days.">
	period PeriodEnum (1..1) <"A time period, e.g. a day, week, month or year of the stream. If the periodMultiplier value is 0 (zero) then period must contain the value D (day).">
	id string (0..1)

type PeriodicDates:

	calculationStartDate AdjustableOrRelativeDate (1..1)
	calculationEndDate AdjustableOrRelativeDate (0..1)
	calculationPeriodFrequency CalculationPeriodFrequency (1..1) <"The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.">
	calculationPeriodDatesAdjustments BusinessDayAdjustments (1..1) <"The business day convention to apply to each calculation period end date if it would otherwise fall on a day that is not a business day in the specified financial business centers.">

type Person: <"A type that represents information about a person connected with a trade or business process.">

	personSequence PersonSequence (0..1)
	personId PersonId (0..*) <"An identifier assigned by a system for uniquely identifying the individual">
	businessUnitReference BusinessUnitReference (0..1) <"The unit for which the indvidual works.">
	contactInfo ContactInformation (0..1) <"Information on how to contact the individual using various means.">
	dateOfBirth date (0..1) <"The birth date of the person, e.g. 1970-01-01">
	country CountryCode (0..1) <"The ISO 3166 standard code for the country where the individual works.">
	id string (0..1)

type PersonSequence:

	honorific NormalizedString (0..1) <"An honorific title, such as Mr., Ms., Dr. etc.">
	firstName NormalizedString (1..1) <"Given name, such as John or Mary.">
	middleName NormalizedString (0..*)
	initial Initial (0..*)
	surname NormalizedString (1..1) <"Family name, such as Smith or Jones.">
	suffix NormalizedString (0..1) <"Name suffix, such as Jr., III, etc.">

	condition Choice:
		optional choice middleName, initial

type PersonId: <"An identifier used to identify an individual person.">

	value NonEmptyScheme (1..1)
	personIdScheme NonEmptyURI (0..1)

type PersonRole: <"A type describing a role played by a person in one or more transactions. Examples include roles such as Trader, Broker, MiddleOffice, Legal, etc. This can be extended to provide custom roles.">

	value Scheme (1..1)
	personRoleScheme NonEmptyURI (0..1)

type PositiveMoney extends MoneyBase: <"A type defining a positive money amount">

	amount PositiveDecimal (1..1) <"The positive monetary quantity in currency units.">

type PrevailingTime: <"A type for defining a time with respect to a geographic location, for example 11:00 Phoenix, USA. This type should be used where a wider range of locations than those available as business centres is required.">

	hourMinuteTime HourMinuteTime (1..1) <"A time specified in hh:mm:ss format where the second component must be \'00\', e.g. 11am would be represented as 11:00:00.">
	location TimezoneLocation (1..1) <"The geographic location to which the hourMinuteTime applies. The time takes into account any current day light saving changes or other adjustments i.e. it is the prevaling time at the location.">

type PricingStructure: <"An abstract pricing structure base type. Used as a base for structures such as yield curves and volatility matrices.">

	name NormalizedString (0..1) <"The name of the structure, e.g \"USDLIBOR-3M EOD Curve\".">
	currency Currency (0..1) <"The currency that the structure is expressed in (this is relevant mostly for the Interes Rates asset class).">
	id string (0..1)

type PricingStructureReference extends Reference: <"Reference to a pricing structure or any derived components (i.e. yield curve).">

	href string (1..1)

type PrincipalExchanges: <"A type defining which principal exchanges occur for the stream.">

	initialExchange boolean (1..1) <"A true/false flag to indicate whether there is an initial exchange of principal on the effective date.">
	finalExchange boolean (1..1) <"A true/false flag to indicate whether there is a final exchange of principal on the termination date.">
	intermediateExchange boolean (1..1) <"A true/false flag to indicate whether there are intermediate or interim exchanges of principal during the term of the swap.">
	id string (0..1)

type Product: <"The base type which all FpML products extend.">

	productModel ProductModel (0..1)
	id string (0..1)

type ProductId:

	value NonEmptyLongScheme (1..1)
	productIdScheme NonEmptyURI (0..1)

type ProductReference extends Reference: <"Reference to a full FpML product.">

	href string (1..1)

type ProductType:

	value NonEmptyLongScheme (1..1)
	productTypeScheme NonEmptyURI (0..1)

type ProposedCollateralAllocation: <"The proposed collateral allocation.">

	collateralPartyAndAccountReferencesModel CollateralPartyAndAccountReferencesModel (1..1)
	proposedCollateralAllocationChoice ProposedCollateralAllocationChoice (1..*)

type ProposedCollateralAllocationChoice:

	collateralValueAllocation CollateralValueAllocation (1..1) <"Collateral allocation by value.">

type QuotedCurrencyPair: <"A type that describes the composition of a rate that has been quoted or is to be quoted. This includes the two currencies and the quotation relationship between the two currencies and is used as a building block throughout the FX specification.">

	currency1 Currency (1..1) <"The first currency specified when a pair of currencies is to be evaluated.">
	currency2 Currency (1..1) <"The second currency specified when a pair of currencies is to be evaluated.">
	quoteBasis QuoteBasisEnum (1..1) <"The method by which the exchange rate is quoted.">

type Rate: <"The abstract base class for all types which define interest rate streams.">

	id string (0..1)

type RateObservation: <"A type defining parameters associated with an individual observation or fixing. This type forms part of the cashflow representation of a stream.">

	resetDate date (0..1) <"The reset date.">
	adjustedFixingDate date (0..1) <"The adjusted fixing date, i.e. the actual date the rate is observed. The date should already be adjusted for any applicable business day convention.">
	observedRate number (0..1) <"The actual observed rate before any required rate treatment is applied, e.g. before converting a rate quoted on a discount basis to an equivalent yield. An observed rate of 5% would be represented as 0.05.">
	treatedRate number (0..1) <"The observed rate after any required rate treatment is applied. A treated rate of 5% would be represented as 0.05.">
	observationWeight int(min: 1) (1..1) <"The number of days weighting to be associated with the rate observation, i.e. the number of days such rate is in effect. This is applicable in the case of a weighted average method of calculation where more than one reset date is established for a single calculation period.">
	rateReference RateReference (0..1) <"A pointer style reference to a floating rate component defined as part of a stub calculation period amount component. It is only required when it is necessary to distinguish two rate observations for the same fixing date which could occur when linear interpolation of two different rates occurs for a stub calculation period.">
	forecastRate number (0..1) <"The value representing the forecast rate used to calculate the forecast future value of the accrual period.A value of 1% should be represented as 0.01">
	treatedForecastRate number (0..1) <"The value representing the forecast rate after applying rate treatment rules. A value of 1% should be represented as 0.01">
	id string (0..1)

type RateReference: <"Reference to any rate (floating, inflation) derived from the abstract Rate component.">

	href string (1..1)

type RateSourcePage:

	value Scheme (1..1)
	rateSourcePageScheme NonEmptyURI (0..1)

type Reference: <"The abstract base class for all types which define intra-document pointers.">

type ReferenceAmount: <"Specifies the reference amount using a scheme.">

	value Scheme (1..1)
	referenceAmountScheme NonEmptyURI (0..1)

type ReferenceBank: <"A type to describe an institution (party) identified by means of a coding scheme and an optional name.">

	referenceBankId ReferenceBankId (1..1) <"An institution (party) identifier, e.g. a bank identifier code (BIC).">
	referenceBankName String (0..1) <"The name of the institution (party). A free format string. FpML does not define usage rules for the element.">

type ReferenceBankId:

	value NonEmptyScheme (1..1)
	referenceBankIdScheme NonEmptyURI (0..1)

type Region: <"A code that describes the world region of a counterparty. For example, NorthAmerica, Europe, Asia.">

	value Scheme (1..1)
	regionScheme NonEmptyURI (0..1)

type RelatedBusinessUnit:

	businessUnitReference BusinessUnitReference (1..1) <"The unit that is related to this.">
	role BusinessUnitRole (1..1) <"The category of the relationship. The related unit performs the role specified in this field for the base party. For example, if the role is \"Trader\", the related unit acts acts or acted as the base party\'s trading unit.">

type RelatedParty:

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	role PartyRole (1..1) <"The category of the relationship. The related party performs the role specified in this field for the base party. For example, if the role is \"Guarantor\", the related party acts as a guarantor for the base party.">
	_type PartyRoleType (0..1) <"Additional definition refining the type of relationship. For example, if the \"role\" is Guarantor, this element may be used to specify whether all positions are guaranteed, or only a subset of them.">

type RelatedPerson:

	personReference PersonReference (1..1) <"The individual person that is related to this.">
	role PersonRole (1..1) <"The category of the relationship. The related individual performs the role specified in this field for the base party. For example, if the role is \"Trader\", the related person acts acts or acted as the base party\'s trader.">

type RelativeDateOffset extends Offset: <"A type defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date). If the anchor date is itself an adjustable date then the offset is assumed to be calculated from the adjusted anchor date. A number of different scenarios can be supported, namely; 1) the derived date may simply be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date; 2) the unadjusted derived date may be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date with the resulting unadjusted derived date subject to adjustment in accordance with a specified business day convention, i.e. the derived date must fall on a good business day; 3) the derived date may be a number of business days preceding or following the anchor date. Note that the businessDayConvention specifies any required adjustment to the unadjusted derived date. A negative or positive value in the periodMultiplier indicates whether the unadjusted derived precedes or follows the anchor date. The businessDayConvention should contain a value NONE if the day type element contains a value of Business (since specifying a negative or positive business days offset would already guarantee that the derived date would fall on a good business day in the specified business centers).">

	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)
	dateRelativeTo DateReference (1..1) <"Specifies the anchor as an href attribute. The href attribute value is a pointer style reference to the element or component elsewhere in the document where the anchor date is defined.">
	adjustedDate IdentifiedDate (0..1) <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">

type RelativeDates extends RelativeDateOffset: <"A type describing a set of dates defined as relative to another set of dates.">

	periodSkip int(min: 1) (0..1) <"The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.">
	scheduleBounds DateRange (0..1) <"The first and last dates of a schedule. This can be used to restrict the range of values in a reference series of dates.">

type RelativeDateSequence: <"A type describing a date when this date is defined in reference to another date through one or several date offsets.">

	dateRelativeTo DateReference (1..1) <"Specifies the anchor as an href attribute. The href attribute value is a pointer style reference to the element or component elsewhere in the document where the anchor date is defined.">
	dateOffset DateOffset (1..*)
	businessCentersOrReferenceModel BusinessCentersOrReferenceModel (0..1)

type ReportingRegimeName: <"An identifier of an reporting regime or format used for regulatory reporting, for example DoddFrankAct, MiFID, HongKongOTCDRepository, etc.">

	value Scheme (1..1)
	reportingRegimeNameScheme NonEmptyURI (0..1)

type RequestedAction:

	value Scheme (1..1)
	requestedActionScheme NonEmptyURI (0..1)

type RequiredIdentifierDate: <"A date with a required identifier which can be referenced elsewhere.">

	value date (1..1)
	id string (1..1)

type ResetFrequency extends Frequency: <"A type defining the reset frequency. In the case of a weekly reset, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency the this implies that more or more reset dates is established for each calculation period and some form of rate averaginhg is applicable. The specific averaging method of calculation is specified in FloatingRateCalculation. In case the reset frequency is of value T (term), the period is defined by the swap\\swapStream\\calculationPerioDates\\effectiveDate and the swap\\swapStream\\calculationPerioDates\\terminationDate.">

	weeklyRollConvention WeeklyRollConventionEnum (0..1) <"The day of the week on which a weekly reset date occurs. This element must be included if the reset frequency is defined as weekly and not otherwise.">

type Resource: <"Describes the resource that contains the media representation of a business event (i.e used for stating the Publicly Available Information). For example, can describe a file or a URL that represents the event. This type is an extended version of a type defined by RIXML (www.rixml.org).">

	resourceId ResourceId (1..1) <"The unique identifier of the resource within the event.">
	resourceType ResourceType (0..1) <"A description of the type of the resource, e.g. a confirmation.">
	language Language (0..1) <"Indicates the language of the resource, described using the ISO 639-2/T Code.">
	sizeInBytes number (0..1) <"Indicates the size of the resource in bytes. It could be used by the end user to estimate the download time and storage needs.">
	length ResourceLength (0..1) <"Indicates the length of the resource. For example, if the resource were a PDF file, the length would be in pages.">
	mimeType MimeType (1..1) <"Indicates the type of media used to store the content. mimeType is used to determine the software product(s) that can read the content. MIME Types are described in RFC 2046.">
	name NormalizedString (0..1) <"The name of the resource.">
	comments String (0..1) <"Any additional comments that are deemed necessary. For example, which software version is required to open the document? Or, how does this resource relate to the others for this event?">
	string String (0..1) <"Provides extra information as string. In case the extra information is in XML format, a CDATA section must be placed around the source message to prevent its interpretation as XML content.">
	hexadecimalBinary string (0..1) <"Provides extra information as binary contents coded in hexadecimal.">
	base64Binary string (0..1) <"Provides extra information as binary contents coded in base64.">
	url NonEmptyURI (0..1) <"Indicates where the resource can be found, as a URL that references the information on a web server accessible to the message recipient.">

	condition Choice:
		optional choice string, hexadecimalBinary , base64Binary , url

type ResourceId: <"The data type used for resource identifiers.">

	value NonEmptyScheme (1..1)
	resourceIdScheme NonEmptyURI (0..1)

type ResourceLength: <"The type that indicates the length of the resource.">

	lengthUnit LengthUnitEnum (1..1) <"The length unit of the resource. For example, pages (pdf, text documents) or time (audio, video files).">
	lengthValue number (1..1) <"The length value of the resource.">

type ResourceType: <"The data type used for describing the type or purpose of a resource, e.g. \"Confirmation\".">

	value Scheme (1..1)
	resourceTypeScheme NonEmptyURI (0..1)

type ReturnSwapNotionalAmountReference extends Reference: <"A reference to the return swap notional amount.">

	href string (1..1)

type Rounding: <"A type defining a rounding direction and precision to be used in the rounding of a rate.">

	roundingDirection RoundingDirectionEnum (1..1) <"Specifies the rounding direction.">
	precision int(min: 0) (1..1) <"Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).">

type Routing: <"A type that provides three alternative ways of identifying a party involved in the routing of a payment. The identification may use payment system identifiers only; actual name, address and other reference information; or a combination of both.">

	routingIdentificationModel RoutingIdentificationModel (1..1)

type RoutingExplicitDetails: <"A type that models name, address and supplementary textual information for the purposes of identifying a party involved in the routing of a payment.">

	routingExplicitDetailsModel RoutingExplicitDetailsModel (1..1)

type RoutingId:

	value Scheme (1..1)
	routingIdCodeScheme NonEmptyURI (0..1)

type RoutingIds: <"A type that provides for identifying a party involved in the routing of a payment by means of one or more standard identification codes. For example, both a SWIFT BIC code and a national bank identifier may be required.">

	routingId RoutingId (1..*) <"A unique identifier for party that is a participant in a recognized payment system.">

type RoutingIdsAndExplicitDetails: <"A type that provides a combination of payment system identification codes with physical postal address details, for the purposes of identifying a party involved in the routing of a payment.">

	routingIds RoutingIds (1..*) <"A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.">
	routingExplicitDetailsModel RoutingExplicitDetailsModel (1..1)

type Schedule: <"A type defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.">

	initialValue number (1..1) <"The initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.">
	step Step (0..*) <"The schedule of step date and value pairs. On each step date the associated step value becomes effective A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">
	id string (0..1)

type ScheduleReference extends Reference: <"Reference to a schedule of rates or amounts.">

	href string (1..1)

type SettlementInformation: <"A type that represents the choice of methods for settling a potential currency payment resulting from a trade: by means of a standard settlement instruction, by netting it out with other payments, or with an explicit settlement instruction.">

	standardSettlementStyle StandardSettlementStyleEnum (0..1) <"An optional element used to describe how a trade will settle. This defines a scheme and is used for identifying trades that are identified as settling standard and/or flagged for settlement netting.">
	settlementInstruction SettlementInstruction (0..1) <"An explicit specification of how a currency payment is to be made, when the payment is not netted and the route is other than the recipient\'s standard settlement instruction.">

	condition Choice:
		one-of

type SettlementInstruction: <"A type that models a complete instruction for settling a currency payment, including the settlement method to be used, the correspondent bank, any intermediary banks and the ultimate beneficary.">

	settlementMethod SettlementMethod (0..1) <"The mechanism by which settlement is to be made. The scheme of domain values will include standard mechanisms such as CLS, Fedwire, Chips ABA, Chips UID, SWIFT, CHAPS and DDA.">
	correspondentInformation CorrespondentInformation (0..1) <"The information required to identify the correspondent bank that will make delivery of the funds on the paying bank\'s behalf in the country where the payment is to be made">
	intermediaryInformation IntermediaryInformation (0..*) <"Information to identify an intermediary through which payment will be made by the correspondent bank to the ultimate beneficiary of the funds.">
	beneficiaryBank Beneficiary (0..1) <"The bank that acts for the ultimate beneficiary of the funds in receiving payments.">
	beneficiary Beneficiary (1..1) <"The ultimate beneficiary of the funds. The beneficiary can be identified either by an account at the beneficiaryBank (qv) or by explicit routingInformation. This element provides for the latter.">
	depositoryPartyReference PartyReference (0..1) <"Reference to the depository of the settlement.">
	splitSettlement SplitSettlement (0..*) <"The set of individual payments that are to be made when a currency payment settling a trade needs to be split between a number of ultimate beneficiaries. Each split payment may need to have its own routing information.">

type SettlementMethod:

	value Scheme (1..1)
	settlementMethodScheme NonEmptyURI (0..1)

type SettlementPriceDefaultElection: <"Coding scheme that specifies the settlement price default election.">

	value Scheme (1..1)
	settlementPriceDefaultElectionScheme NonEmptyURI (0..1)

type SettlementPriceSource: <"The source from which the settlement price is to be obtained, e.g. a Reuters page, Prezzo di Riferimento, etc.">

	value Scheme (1..1)
	settlementPriceSourceScheme NonEmptyURI (0..1)

type SettlementRateOption: <"A type defining the settlement rate options through a scheme reflecting the terms of the Annex A to the 1998 FX and Currency Option Definitions.">

	value Scheme (1..1)
	settlementRateOptionScheme NonEmptyURI (0..1)

type SettlementRateSource: <"A type describing the method for obtaining a settlement rate.">

	informationSource InformationSource (0..1) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">
	cashSettlementReferenceBanks CashSettlementReferenceBanks (0..1) <"A container for a set of reference institutions. These reference institutions may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.">

	condition Choice:
		one-of

type SharedAmericanExercise extends Exercise: <"TBA">

	commencementDate AdjustableOrRelativeDate (1..1) <"The first day of the exercise period for an American style option.">
	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.">
	latestExerciseTime BusinessCenterTime (0..1) <"For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.">
	latestExerciseTimeDetermination DeterminationMethod (0..1) <"Latest exercise time determination method.">

	condition Choice:
		optional choice latestExerciseTime, latestExerciseTimeDetermination

type SimplePayment extends PaymentBase: <"A complex type to specified payments in a simpler fashion than the Payment type. This construct should be used from the version 4.3 onwards.">

	payerReceiverModel PayerReceiverModel (1..1)
	paymentAmount NonNegativeMoney (1..1)
	paymentDate AdjustableOrRelativeDate (1..1) <"The payment date. This date is subject to adjustment in accordance with any applicable business day convention.">

type SplitSettlement: <"A type that supports the division of a gross settlement amount into a number of split settlements, each requiring its own settlement instruction.">

	splitSettlementAmount Money (1..1) <"One of the monetary amounts in a split settlement payment.">
	beneficiaryBank Routing (0..1) <"The bank that acts for the ultimate beneficiary of the funds in receiving payments.">
	beneficiary Routing (1..1) <"The ultimate beneficiary of the funds. The beneficiary can be identified either by an account at the beneficiaryBank (qv) or by explicit routingInformation. This element provides for the latter.">

type SpreadSchedule extends Schedule: <"Adds an optional spread type element to the Schedule to identify a long or short spread value.">

	_type SpreadScheduleType (0..1)

type SpreadScheduleReference extends Reference: <"Provides a reference to a spread schedule.">

	href string (1..1)

type SpreadScheduleType: <"Defines a Spread Type Scheme to identify a long or short spread value.">

	value Scheme (1..1)
	spreadScheduleTypeScheme NonEmptyURI (0..1)

type Step extends StepBase: <"A type defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortization or a step-up coupon schedule.">

	stepValue number (1..1) <"The rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.">

type StepBase: <"A type defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortization or a step-up coupon schedule.">

	stepDate date (1..1) <"The date on which the associated stepValue becomes effective. This day may be subject to adjustment in accordance with a business day convention.">
	id string (0..1)

type StreetAddress: <"A type that describes the set of street and building number information that identifies a postal address within a city.">

	streetLine String (1..*) <"An individual line of street and building number information, forming part of a postal address.">

type Strike: <"A type describing a single cap or floor rate.">

	strikeRate number (1..1) <"The rate for a cap or floor.">
	buyer IdentifiedPayerReceiver (0..1) <"The buyer of the option">
	seller IdentifiedPayerReceiver (0..1) <"The party that has sold.">
	id string (0..1)

type StrikeSchedule extends Schedule: <"A type describing a schedule of cap or floor rates.">

	buyer IdentifiedPayerReceiver (0..1) <"The buyer of the option">
	seller IdentifiedPayerReceiver (0..1) <"The party that has sold.">

type Stub extends StubValue: <"A type defining how a stub calculation period amount is calculated and the start and end date of the stub. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating rate tenors many be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3 Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.">

	stubStartDate AdjustableOrRelativeDate (0..1) <"Start date of stub period. This was created to support use of the InterestRateStream within the Equity Derivative sphere, and this element is not expected to be produced in the representation of Interest Rate products.">
	stubEndDate AdjustableOrRelativeDate (0..1) <"End date of stub period. This was created to support use of the InterestRateStream within the Equity Derivative sphere, and this element is not expected to be produced in the representation of Interest Rate products.">

type StubValue: <"A type defining how a stub calculation period amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating rate tenors many be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3 Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.">

	floatingRate StubFloatingRate (0..2) <"The rates to be applied to the initial or final stub may be the linear interpolation of two different rates. While the majority of the time, the rate indices will be the same as that specified in the stream and only the tenor itself will be different, it is possible to specift two different rates. For example, a 2 month stub period may use the linear interpolation of a 1 month and 3 month rate. The different rates would be specified in this component. Note that a maximum of two rates can be specified. If a stub period uses the same floating rate index, including tenor, as the regular calculation periods then this should not be specified again within this component, i.e. the stub calculation period amount component may not need to be specified even if there is an initial or final stub period. If a stub period uses a different floating rate index compared to the regular calculation periods then this should be specified within this component. If specified here, they are likely to have id attributes, allowing them to be referenced from within the cashflows component.">
	stubRate number (0..1) <"An actual rate to apply for the initial or final stub period may have been agreed between the principal parties (in a similar way to how an initial rate may have been agreed for the first regular period). If an actual stub rate has been agreed then it would be included in this component. It will be a per annum rate, expressed as a decimal. A stub rate of 5% would be represented as 0.05.">
	stubAmount Money (0..1) <"An actual amount to apply for the initial or final stub period may have been agreed between th two parties. If an actual stub amount has been agreed then it would be included in this component.">

	condition Choice:
		one-of

type StubFloatingRate extends Rate: <"A type defining a floating rate.">

	stubFloatingRateIndexModel StubFloatingRateIndexModel (1..1)
	floatingRateMultiplierSchedule Schedule (0..1) <"A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.">
	spreadSchedule SpreadSchedule (0..*) <"The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">
	rateTreatment RateTreatmentEnum (0..1) <"The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.">
	capRateSchedule StrikeSchedule (0..*) <"The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.">
	floorRateSchedule StrikeSchedule (0..*) <"The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.">

type SupervisoryBody: <"An identifier of an organization that supervises or regulates trading activity, e.g. CFTC, SEC, FSA, ODRF, etc.">

	value Scheme (1..1)
	supervisoryBodyScheme NonEmptyURI (0..1)

type TelephoneNumber: <"A type that represents a telephonic contact.">

	_type TelephoneTypeEnum (0..1) <"The type of telephone number (work, personal, mobile).">
	number String (1..1) <"A telephonic contact.">

type TimezoneLocation: <"A geophraphic location for the purposes of defining a prevailing time according to the tz database.">

	value Scheme (1..1)
	timezoneLocationScheme NonEmptyURI (0..1)

type TradeId: <"A trade reference identifier allocated by a party. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">

	value NonEmptyScheme (1..1)
	tradeIdScheme NonEmptyURI (1..1)
	id string (0..1)

type UnderlyerInterestLeg extends DirectionalLeg: <"A type describing interest payments associated with and underlyer, such as financing">

	fixedRate number (0..1) <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">
	spreadSchedule SpreadSchedule (0..*) <"The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">

	condition Choice:
		required choice fixedRate, spreadSchedule

type Unit: <"A type used to record information about a unit, subdivision, desk, or other similar business entity.">

	value Scheme (1..1)
	unitScheme NonEmptyURI (0..1)

type AdjustableDateModel:

	unadjustedDate IdentifiedDate (1..1) <"A date subject to adjustment.">
	dateAdjustments BusinessDayAdjustments (1..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.">
	adjustedDate IdentifiedDate (0..1) <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">

type BusinessCentersOrReferenceModel:

	businessCentersReference BusinessCentersReference (0..1) <"A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.">
	businessCenters BusinessCenters (0..1)

	condition Choice:
		one-of

type BuyerSellerModel:

	buyerPartyReference PartyReference (1..1) <"A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.">
	buyerAccountReference AccountReference (0..1) <"A reference to the account that buys this instrument.">
	sellerPartyReference PartyReference (1..1) <"A reference to the party that sells (\"writes\") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.">
	sellerAccountReference AccountReference (0..1) <"A reference to the account that sells this instrument.">

type CollateralPartyAndAccountReferencesModel:

	allocationPartyReference PartyReference (0..1) <"Reference to a party.">
	allocationAccountReference AccountReference (0..1) <"Reference to an account.">

type FloatingRateIndexModel:

	floatingRateIndex FloatingRateIndex (1..1)
	indexTenor Period (0..1) <"The ISDA Designated Maturity, i.e. the tenor of the floating rate.">

type OnBehalfOfModel:

	onBehalfOf OnBehalfOf (1..1) <"Indicates which party (or parties) (and accounts) a trade or event is being processed for. Normally there will only be a maximum of 2 parties, but in the case of a novation there could be a transferor, transferee, remaining party, and other remaining party. Also, in the context of a trade package there could be several parties for which limit check is requested, necessitating multiple onBehalfOf elements. Except for these cases, there should be no more than two onBehalfOf references in a message.">

type PartialExerciseModel:

	notionalReference NotionalReference (0..*) <"A pointer style reference to the associated notional schedule defined elsewhere in the document. This element has been made optional as part of its integration in the OptionBaseExtended, because not required for the options on securities.">
	integralMultipleAmount number (0..1) <"A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.">
	minimumNotionalAmount number (0..1) <"The minimum notional amount that can be exercised on a given exercise date. See multipleExercise.">
	minimumNumberOfOptions int(min: 0) (0..1) <"The minimum number of options that can be exercised on a given exercise date.">

	condition Choice:
		required choice minimumNotionalAmount, minimumNumberOfOptions

type PartiesAndAccountsModel: <"Supporting party and account definitions.">

	party Party (1..*) <"A legal entity or a subdivision of a legal entity. Parties can perform multiple roles in a trade lifecycle. For example, the principal parties obligated to make payments from time to time during the term of the trade, but may include other parties involved in, or incidental to, the trade, such as parties acting in the role of novation transferor/transferee, broker, calculation agent, etc. In FpML roles are defined in multiple places within a document.">
	account Account (0..*) <"Optional account information used to precisely define the origination and destination of financial instruments.">

type PartyModel: <"A model group with the content model of a party.">

	partyId PartyId (1..*) <"A party identifier, e.g. a S.W.I.F.T. bank identifier code (BIC).">
	partyName PartyName (0..1) <"The legal name of the organization. A free format string. FpML does not define usage rules for this element.">
	partyInformationModel PartyInformationModel (0..1)
	contactInfo ContactInformation (0..1) <"Information on how to contact the party using various means.">
	businessUnit BusinessUnit (0..*) <"Optional organization unit information used to describe the organization units (e.g. trading desks) involved in a transaction or business process .">
	person Person (0..*) <"Optional information about people involved in a transaction or busines process. (These are eomployees of the party).">

type PartyAndAccountReferencesModel:

	partyReference PartyReference (1..1) <"Reference to a party.">
	accountReference AccountReference (0..1) <"Reference to an account.">

type PartyInformationModel: <"Information about a party for reporting purposes.">

	classification IndustryClassification (0..*) <"The party\'s industry sector classification.">
	creditRating CreditRating (0..*) <"The party\'s credit rating.">
	country CountryCode (0..1) <"The country where the party is domiciled.">
	region Region (0..*) <"A code for a grouping of countries to which this belongs.">
	jurisdiction GoverningLaw (0..*) <"The legal jurisdiction of the entity\'s registration.">
	organizationType OrganizationType (0..1) <"The type of an organization\'s participantion in the OTC derivatives market.">

type PayerModel:

	payerPartyReference PartyReference (1..1) <"A reference to the party responsible for making the payments defined by this structure.">
	payerAccountReference AccountReference (0..1) <"A reference to the account responsible for making the payments defined by this structure.">

type PayerReceiverModel:

	payerModel PayerModel (1..1)
	receiverModel ReceiverModel (1..1)

type PaymentDiscountingModel: <"A model group for representing the discounting elements that can be associated with a payment.">

	discountFactor number (0..1) <"The value representing the discount factor used to calculate the present value of the cash flow.">
	presentValueAmount Money (0..1) <"The amount representing the present value of the forecast payment.">

type PeriodModel:

	startDate date (1..1) <"Date on which this period begins.">
	endDate date (1..1) <"Date on which this period ends.">

type PremiumModel: <"A model group for representing the option premium when expressed in a way other than an amount.">

	premiumType PremiumTypeEnum (0..1) <"Forward start Premium type">
	pricePerOption Money (0..1) <"The amount of premium to be paid expressed as a function of the number of options.">
	percentageOfNotional number (0..1) <"The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.">

type ProductModel:

	primaryAssetClass AssetClass (0..1) <"A classification of the most important risk class of the trade. FpML defines a simple asset class categorization using a coding scheme.">
	secondaryAssetClass AssetClass (0..*) <"A classification of additional risk classes of the trade, if any. FpML defines a simple asset class categorization using a coding scheme.">
	productType ProductType (0..*) <"A classification of the type of product. FpML defines a simple product categorization using a coding scheme.">
	productId ProductId (0..*) <"A product reference identifier. The product ID is an identifier that describes the key economic characteristics of the trade type, with the exception of concepts such as size (notional, quantity, number of units) and price (fixed rate, strike, etc.) that are negotiated for each transaction. It can be used to hold identifiers such as the \"UPI\" (universal product identifier) required by certain regulatory reporting rules. It can also be used to hold identifiers of benchmark products or product temnplates used by certain trading systems or facilities. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">
	assetClass AssetClass (0..*) <"A classification of the risk class of the trade. FpML defines a simple asset class categorization using a coding scheme.">

type ReceiverModel:

	receiverPartyReference PartyReference (1..1) <"A reference to the party that receives the payments corresponding to this structure.">
	receiverAccountReference AccountReference (0..1) <"A reference to the account that receives the payments corresponding to this structure.">

type RoutingExplicitDetailsModel:

	routingName String (1..1) <"A real name that is used to identify a party involved in the routing of a payment.">
	routingAddress Address (0..1) <"A physical postal address via which a payment can be routed.">
	routingAccountNumber String (0..1) <"An account number via which a payment can be routed.">
	routingReferenceText String (0..*) <"A piece of free-format text used to assist the identification of a party involved in the routing of a payment.">

type RoutingIdentificationModel:

	routingIds RoutingIds (0..1) <"A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.">
	routingExplicitDetails RoutingExplicitDetails (0..1) <"A set of details that is used to identify a party involved in the routing of a payment when the party does not have a code that identifies it within one of the recognized payment systems.">
	routingIdsAndExplicitDetails RoutingIdsAndExplicitDetails (0..1) <"A combination of coded payment system identifiers and details for physical addressing for a party involved in the routing of a payment.">

	condition Choice:
		one-of

type SettlementAmountOrCurrencyModel:

	settlementAmount Money (0..1) <"Settlement Amount">
	settlementCurrency Currency (0..1) <"Settlement Currency for use where the Settlement Amount cannot be known in advance">

	condition Choice:
		one-of

type StockLoanModel: <"Stock Loan Content Model">

	lossOfStockBorrow boolean (0..1) <"If true, then loss of stock borrow is applicable.">
	maximumStockLoanRate RestrictedPercentage (0..1) <"Specifies the maximum stock loan rate for Loss of Stock Borrow.">
	increasedCostOfStockBorrow boolean (0..1) <"If true, then increased cost of stock borrow is applicable.">
	initialStockLoanRate RestrictedPercentage (0..1) <"Specifies the initial stock loan rate for Increased Cost of Stock Borrow.">

type StubFloatingRateIndexModel:

	floatingRateIndex FloatingRateIndex (1..1)
	indexTenor Period (0..1) <"The ISDA Designated Maturity, i.e. the tenor of the floating rate.">

type UnitContractModel: <"A group which has unit based trade elements (copied from FpML Extensions 2.2 - fpmlext-repo.xsd).">

	numberOfUnits NonNegativeDecimal (1..1) <"The number of units (index or securities).">
	unitPrice NonNegativeMoney (1..1) <"The price of each unit.">

type IssuerId: <"The data type used for issuer identifiers.">

	value NonEmptyScheme (1..1)
	issuerIdScheme NonEmptyURI (0..1)

type IssuerTradeId: <"A complex type for a two part identifier such as a USI.">

	issuerTradeIdModel IssuerTradeIdModel (1..1)

type IssuerTradeIdModel: <"A model group for a two part identifier such as a USI.">

	issuer IssuerId (1..1)
	tradeId TradeId (1..1)

type VersionHistoryModel:

	version int(min: 0) (1..1) <"The version number">
	effectiveDate IdentifiedDate (0..1) <"Optionally it is possible to specify a version effective date when a versionId is supplied.">

type AdditionalDisruptionEvents: <"A type for defining ISDA 2002 Equity Derivative Additional Disruption Events.">

	changeInLaw boolean (0..1) <"If true, then change in law is applicable.">
	failureToDeliver boolean (0..1) <"Where the underlying is shares and the transaction is physically settled, then, if true, a failure to deliver the shares on the settlement date will not be an event of default for the purposes of the master agreement.">
	insolvencyFiling boolean (0..1) <"If true, then insolvency filing is applicable.">
	hedgingDisruption boolean (0..1) <"If true, then hedging disruption is applicable.">
	stockLoanModel StockLoanModel (1..1)
	increasedCostOfHedging boolean (0..1) <"If true, then increased cost of hedging is applicable.">
	determiningPartyReference PartyReference (0..1) <"A reference to the party which determines additional disruption events.">
	foreignOwnershipEvent boolean (0..1) <"If true, then foreign ownership event is applicable.">

type AdditionalPaymentAmount: <"Specifies the amount of the fee along with, when applicable, the formula that supports its determination.">

	paymentAmount NonNegativeMoney (0..1) <"The currency amount of the payment.">
	formula Formula (0..1) <"Specifies a formula, with its description and components.">

type AdjustableDateOrRelativeDateSequence: <"A type describing a date defined as subject to adjustment or defined in reference to another date through one or several date offsets.">

	adjustableDate AdjustableDate (0..1) <"A date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">
	relativeDateSequence RelativeDateSequence (0..1) <"A date specified in relation to some other date defined in the document (the anchor date), where there is the opportunity to specify a combination of offset rules. This component will typically be used for defining the valuation date in relation to the payment date, as both the currency and the exchange holiday calendars need to be considered.">
	id string (0..1)

	condition Choice:
		required choice adjustableDate, relativeDateSequence

type BoundedCorrelation: <"A type describing correlation bounds, which form a cap and a floor on the realized correlation.">

	minimumBoundaryPercent number (0..1) <"Minimum Boundary as a percentage of the Strike Price.">
	maximumBoundaryPercent number (0..1) <"Maximum Boundary as a percentage of the Strike Price.">

type BoundedVariance: <"A type describing variance bounds, which are used to exclude money price values outside of the specified range In a Up Conditional Swap Underlyer price must be equal to or higher than Lower Barrier In a Down Conditional Swap Underlyer price must be equal to or lower than Upper Barrier In a Corridor Conditional Swap Underlyer price must be equal to or higher than Lower Barrier and must be equal to or lower than Upper Barrier.">

	realisedVarianceMethod RealisedVarianceMethodEnum (1..1) <"The contract specifies whether which price must satisfy the boundary condition.">
	daysInRangeAdjustment boolean (1..1) <"The contract specifies whether the notional should be scaled by the Number of Days in Range divided by the Expected N. The number of Days in Ranges refers to the number of returns that contribute to the realized volatility.">
	upperBarrier NonNegativeDecimal (0..1) <"All observations above this price level will be excluded from the variance calculation.">
	lowerBarrier NonNegativeDecimal (0..1) <"All observations below this price level will be excluded from the variance calculation.">

type CalculatedAmount: <"An abstract base class for all calculated money amounts, which are in the currency of the cash multiplier of the calculation.">

	calculationDates AdjustableRelativeOrPeriodicDates (0..1) <"Specifies the date on which a calculation or an observation will be performed for the purpose of calculating the amount.">
	observationStartDate AdjustableOrRelativeDate (0..1) <"The start of the period over which observations are made which are used in the calculation Used when the observation start date differs from the trade date such as for forward starting swaps. Observation Start Date in accordance with the ISDA 2002 Equity Derivatives Definitions. Observation Period Start Date in accordance with the ISDA 2011 Equity Derivatives Definitions.">
	dividendsModel DividendsModel (1..1)

type CalculationFromObservation: <"Abstract base class for all calculation from observed values.">

	calculationFromObservationChoice CalculationFromObservationChoice (0..1)
	closingLevel boolean (0..1) <"DEPRECATED. If true this contract will strike off the closing level of the default exchange traded contract.">
	expiringLevel boolean (0..1) <"DEPRECATED. If true this contract will strike off the expiring level of the default exchange traded contract.">
	expectedN int(min: 1) (0..1) <"Expected number of trading days.">

	condition Choice:
		required choice calculationFromObservationChoice, closingLevel , expiringLevel

type CalculationFromObservationChoice:

	calculationFromObservationChoiceSequence CalculationFromObservationChoiceSequence (0..1)
	initialLevelSource DeterminationMethod (0..1) <"Specifies whether the Initial Index Level determination method should be the Closing Price Level, the Expiring Contract Level, VWAPPrice, TWAPPrice, NAV or Open Price. Note: the AgreedInitialPrice value is not allowed here.">

	condition Choice:
		one-of

type CalculationFromObservationChoiceSequence:

	initialLevel number (1..1) <"Contract will strike off this initial level. Providing just the initialLevel without initialLevelSource, infers that this is AgreedInitialPrice - a specified Initial Index Level.">
	initialLevelSource DeterminationMethod (0..1) <"In this context, this is AgreedInitialPrice - a specified Initial Index Level. Note: No other values from the DeterminationMethodScheme should not be provided.">

type Compounding: <"Specifies the compounding method and the compounding rate.">

	compoundingMethod CompoundingMethodEnum (0..1) <"If more that one calculation period contributes to a single payment amount this element specifies whether compounding is applicable, and if so, what compounding method is to be used. This element must only be included when more that one calculation period contributes to a single payment amount.">
	compoundingRate CompoundingRate (1..1) <"Defines a compounding rate. The compounding interest can either point back to the interest calculation node on the Interest Leg, or be defined specifically.">
	compoundingSpread number (0..1) <"Defines the spread to be used for compounding. This field should be used in scenarios where the interest payment is based on a compounding formula that uses a compounding spread in addition to the regular spread.">
	compoundingDates AdjustableRelativeOrPeriodicDates2 (0..1) <"Defines the compounding dates.">

type CompoundingRate: <"A type defining a compounding rate. The compounding interest can either point back to the floating rate calculation of interest calculation node on the Interest Leg, or be defined specifically.">

	interestLegRate FloatingRateCalculationReference (0..1) <"Reference to the floating rate calculation of interest calculation node on the Interest Leg.">
	specificRate InterestAccrualsMethod (0..1) <"Defines a specific rate.">

	condition Choice:
		one-of

type Correlation extends CalculationFromObservation: <"A type describing the correlation amount of a correlation swap.">

	notionalAmount NonNegativeMoney (1..1) <"Notional amount, which is a cash multiplier.">
	correlationStrikePrice CorrelationValue (1..1) <"Correlation Strike Price.">
	boundedCorrelation BoundedCorrelation (0..1) <"Bounded Correlation.">
	numberOfDataSeries int(min: 1) (0..1) <"Number of data series, normal market practice is that correlation data sets are drawn from geographic market areas, such as America, Europe and Asia Pacific, each of these geographic areas will have its own data series to avoid contagion.">

type DirectionalLegUnderlyer extends DirectionalLeg: <"An abstract base class for all directional leg types with effective date, termination date, and underlyer where a payer makes a stream of payments of greater than zero value to a receiver.">

	underlyer Underlyer (1..1) <"Specifies the underlyer of the leg.">
	optionSettlementModel OptionSettlementModel (1..1)
	fxFeature FxFeature (0..1) <"Quanto, Composite, or Cross Currency FX features.">

type DirectionalLegUnderlyerValuation extends DirectionalLegUnderlyer: <"An abstract base class for all directional leg types with effective date, termination date, and underlyer, where a payer makes a stream of payments of greater than zero value to a receiver.">

	valuation EquityValuation (1..1) <"Valuation of the underlyer.">

type DividendAdjustment: <"Container for Dividend Adjustment Periods, which are used to calculate the Deviation between Expected Dividend and Actual Dividend in that Period.">

	dividendPeriod DividendPeriodDividend (1..*) <"A single Dividend Adjustment Period.">

type DividendConditions: <"A type describing the conditions governing the payment of dividends to the receiver of the equity return. With the exception of the dividend payout ratio, which is defined for each of the underlying components.">

	dividendReinvestment boolean (0..1) <"Boolean element that defines whether the dividend will be reinvested or not.">
	dividendEntitlement DividendEntitlementEnum (0..1) <"Defines the date on which the receiver on the equity return is entitled to the dividend.">
	dividendAmount DividendAmountTypeEnum (0..1)
	dividendPaymentDate DividendPaymentDate (0..1) <"Specifies when the dividend will be paid to the receiver of the equity return. Has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. Is not applicable in the case of a dividend reinvestment election.">
	dividendConditionsSequence DividendConditionsSequence (0..1)
	dividendPeriod DividendPeriodEnum (0..1) <"Defines the First Period or the Second Period, as defined in the 2002 ISDA Equity Derivatives Definitions.">
	extraOrdinaryDividends PartyReference (0..1) <"Reference to the party which determines if dividends are extraordinary in relation to normal levels.">
	excessDividendAmount DividendAmountTypeEnum (0..1) <"Determination of Gross Cash Dividend per Share.">
	currencyAndDeterminationMethodModel CurrencyAndDeterminationMethodModel (0..1)
	dividendFxTriggerDate DividendPaymentDate (0..1) <"Specifies the date on which the FX rate will be considered in the case of a Composite FX swap.">
	interestAccrualsMethod InterestAccrualsCompoundingMethod (0..1) <"Defines the way in which interests are accrued: the applicable rate (fixed or floating reference) and the compounding method. FpML entity">
	numberOfIndexUnits NonNegativeDecimal (0..1) <"Defines the Number Of Index Units applicable to a Dividend.">
	declaredCashAndCashEquivalentDividendPercentageModel DeclaredCashAndCashEquivalentDividendPercentageModel (1..1)
	nonCashDividendTreatment NonCashDividendTreatmentEnum (0..1) <"Defines treatment of Non-Cash Dividends.">
	dividendComposition DividendCompositionEnum (0..1) <"Defines how the composition of Dividends is to be determined.">
	specialDividends boolean (0..1) <"Specifies the method according to which special dividends are determined.">

	condition Choice:
		required choice dividendConditionsSequence, dividendPeriod

type DividendConditionsSequence:

	dividendPeriodEffectiveDate DateReference (0..1) <"Dividend period has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. This element specifies the date on which the dividend period will commence.">
	dividendPeriodEndDate DateReference (0..1) <"Dividend period has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. This element specifies the date on which the dividend period will end. It includes a boolean attribute for defining whether this end date is included or excluded from the dividend period.">

type DividendPaymentDate: <"A type describing the date on which the dividend will be paid/received. This type is also used to specify the date on which the FX rate will be determined, when applicable.">

	dividendPaymentDateSequence DividendPaymentDateSequence (0..1)
	adjustableDate AdjustableDate (0..1) <"A date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">

	condition Choice:
		one-of

type DividendPaymentDateSequence:

	dividendDateReference DividendDateReferenceEnum (1..1) <"Specification of the dividend date using an enumeration, with values such as the pay date, the ex date or the record date.">
	paymentDateOffset Offset (0..1) <"Only to be used when SharePayment has been specified in the dividendDateReference element. The number of Currency Business Days following the day on which the Issuer of the Shares pays the relevant dividend to holders of record of the Shares.">

type DividendPeriod: <"Abstract base class of all time bounded dividend period types.">

	unadjustedStartDate IdentifiedDate (1..1) <"Unadjusted inclusive dividend period start date.">
	unadjustedEndDate IdentifiedDate (1..1) <"Unadjusted inclusive dividend period end date.">
	dateAdjustments BusinessDayAdjustments (1..1) <"Date adjustments for all unadjusted dates in this dividend period.">
	underlyerReference AssetReference (0..1) <"Reference to the underlyer which is paying dividends. This should be used in all cases, and must be used where there are multiple underlying assets, to avoid any ambiguity about which asset the dividend period relates to.">
	id string (0..1)

type DividendPeriodDividend extends DividendPeriod: <"A time bounded dividend period, with an expected dividend for each period.">

	dividend NonNegativeMoney (1..1) <"Expected dividend in this period.">
	multiplier PositiveDecimal (1..1) <"Multiplier is a percentage value which is used to produce Deviation by multiplying the difference between Expected Dividend and Actual Dividend Deviation = Multiplier * (Expected Dividend — Actual Dividend).">

type EquityCorporateEvents: <"A type for defining the merger events and their treatment.">

	shareForShare ShareExtraordinaryEventEnum (1..1) <"The consideration paid for the original shares following the Merger Event consists wholly of new shares.">
	shareForOther ShareExtraordinaryEventEnum (1..1) <"The consideration paid for the original shares following the Merger Event consists wholly of cash/securities other than new shares.">
	shareForCombined ShareExtraordinaryEventEnum (1..1) <"The consideration paid for the original shares following the Merger Event consists of both cash/securities and new shares.">

type EquityPremium extends PaymentBase: <"A type used to describe the amount paid for an equity option.">

	payerReceiverModel PayerReceiverModel (1..1)
	premiumType PremiumTypeEnum (0..1) <"Forward start Premium type">
	paymentAmount NonNegativeMoney (0..1) <"The currency amount of the payment.">
	paymentDate AdjustableDate (0..1) <"The payment date. This date is subject to adjustment in accordance with any applicable business day convention.">
	swapPremium boolean (0..1) <"Specifies whether or not the premium is to be paid in the style of payments under an interest rate swap contract.">
	pricePerOption NonNegativeMoney (0..1) <"The amount of premium to be paid expressed as a function of the number of options.">
	percentageOfNotional NonNegativeDecimal (0..1) <"The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.">

type EquityStrike: <"A type for defining the strike price for an equity option. The strike price is either: (i) in respect of an index option transaction, the level of the relevant index specified or otherwise determined in the transaction; or (ii) in respect of a share option transaction, the price per share specified or otherwise determined in the transaction. This can be expressed either as a percentage of notional amount or as an absolute value.">

	strikePrice number (0..1) <"The price or level at which the option has been struck.">
	equityStrikeSequence EquityStrikeSequence (0..1)
	currency Currency (0..1) <"The currency in which an amount is denominated.">

	condition Choice:
		required choice strikePrice, equityStrikeSequence

type EquityStrikeSequence:

	strikePercentage number (1..1) <"The price or level expressed as a percentage of the forward starting spot price.">
	strikeDeterminationDate AdjustableOrRelativeDate (0..1) <"The date on which the strike is determined, where this is not the effective date of a forward starting option.">

type EquityValuation: <"A type for defining how and when an equity option is to be valued.">

	valuationDate AdjustableDateOrRelativeDateSequence (0..1) <"The term \"Valuation Date\" is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. Cash Settlement Payment Date in accordance with the ISDA 2002 Equity Derivatives Definitions. SettlementCycle in accordance with the ISDA 2011 Equity Derivatives Definitions.">
	valuationDates AdjustableRelativeOrPeriodicDates (0..1) <"Specifies the interim equity valuation dates of a swap.">
	valuationTimeType TimeTypeEnum (0..1) <"The time of day at which the calculation agent values the underlying, for example the official closing time of the exchange.">
	valuationTime BusinessCenterTime (0..1) <"The specific time of day at which the calculation agent values the underlying. The SpecificTime is the only case when the valuationTime (time + business center location – e.g. 10:00:00 USNY) should be provided. You should be able to provide just the valuationTime without valuationTimeType, which infer that this is a specific time.">
	futuresPriceValuation boolean (0..1) <"The official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions.">
	optionsPriceValuation boolean (0..1) <"The official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions.">
	numberOfValuationDates int(min: 0) (0..1) <"The number of valuation dates between valuation start date and valuation end date.">
	dividendValuationDates AdjustableRelativeOrPeriodicDates (0..1) <"Specifies the dividend valuation dates of the swap.">
	fPVFinalPriceElectionFallback FPVFinalPriceElectionFallbackEnum (0..1) <"Specifies the fallback provisions for Hedging Party in the determination of the Final Price.">
	id string (0..1)

	condition Choice0:
		optional choice valuationDate, valuationDates

	condition Choice1:
		optional choice futuresPriceValuation, optionsPriceValuation

type ExtraordinaryEvents: <"Where the underlying is shares, defines market events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.">

	mergerEvents EquityCorporateEvents (0..1) <"Occurs when the underlying ceases to exist following a merger between the Issuer and another company.">
	tenderOffer boolean (0..1) <"DEPRECATED. If present and true, then tender offer is applicable.">
	tenderOfferEvents EquityCorporateEvents (0..1) <"ISDA 2002 Equity Tender Offer Events.">
	compositionOfCombinedConsideration boolean (0..1) <"If present and true, then composition of combined consideration is applicable.">
	indexAdjustmentEvents IndexAdjustmentEvents (0..1) <"ISDA 2002 Equity Index Adjustment Events.">
	additionalDisruptionEvents AdditionalDisruptionEvents (0..1) <"ISDA 2002 Equity Additional Disruption Events.">
	failureToDeliver boolean (0..1) <"If true, failure to deliver is applicable.">
	representations Representations (0..1) <"ISDA 2002 Equity Derivative Representations.">
	nationalisationOrInsolvency NationalisationOrInsolvencyOrDelistingEventEnum (0..1) <"The terms \"Nationalisation\" and \"Insolvency\" have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.">
	delisting NationalisationOrInsolvencyOrDelistingEventEnum (0..1) <"The term \"Delisting\" has the meaning defined in the ISDA 2002 Equity Derivatives Definitions.">
	exchangeIdentifierModel ExchangeIdentifierModel (0..1)

	condition Choice:
		required choice additionalDisruptionEvents, failureToDeliver

type FloatingRateCalculationReference extends Reference: <"Reference to a floating rate calculation of interest calculation component.">

	href string (1..1)

type IndexAdjustmentEvents: <"Defines the specification of the consequences of Index Events as defined by the 2002 ISDA Equity Derivatives Definitions.">

	indexModification IndexEventConsequenceEnum (1..1) <"Consequence of index modification.">
	indexCancellation IndexEventConsequenceEnum (1..1) <"Consequence of index cancellation.">
	indexDisruption IndexEventConsequenceEnum (1..1) <"Consequence of index disruption.">

type InterestCalculation extends InterestAccrualsMethod: <"Specifies the calculation method of the interest rate leg of the return swap. Includes the floating or fixed rate calculation definitions, along with the determination of the day count fraction.">

	dayCountFraction DayCountFraction (1..1) <"The day count fraction.">
	compounding Compounding (0..1) <"Defines compounding rates on the Interest Leg.">
	interestCalculationSequence InterestCalculationSequence (0..1)
	id string (0..1)

type InterestCalculationSequence:

	interpolationMethod InterpolationMethod (1..1) <"Specifies the type of interpolation used.">
	interpolationPeriod InterpolationPeriodEnum (0..1) <"Defines applicable periods for interpolation.">

type InterestLegCalculationPeriodDates: <"Component that holds the various dates used to specify the interest leg of the return swap. It is used to define the InterestPeriodDates identifyer.">

	effectiveDate AdjustableOrRelativeDate (1..1) <"Specifies the effective date of the return swap. This global element is valid within the return swaps namespace. Within the FpML namespace, another effectiveDate global element has been defined, that is different in the sense that it does not propose the choice of refering to another date in the document.">
	terminationDate AdjustableOrRelativeDate (1..1) <"Specifies the termination date of the return swap. This global element is valid within the return swaps namespace. Within the FpML namespace, another terminationDate global element has been defined, that is different in the sense that it does not propose the choice of refering to another date in the document.">
	interestLegResetDates InterestLegResetDates (1..1) <"Specifies the reset dates of the interest leg of the swap.">
	interestLegPaymentDates AdjustableRelativeOrPeriodicDates2 (1..1) <"Specifies the payment dates of the interest leg of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDates component), this element will typically point to the payment dates of the equity leg of the swap.">
	id string (1..1)

type InterestLegCalculationPeriodDatesReference extends Reference: <"Reference to the calculation period dates of the interest leg.">

	href string (1..1)

type InterestLegResetDates:

	calculationPeriodDatesReference InterestLegCalculationPeriodDatesReference (1..1) <"A pointer style reference to the associated calculation period dates component defined elsewhere in the document.">
	resetRelativeTo ResetRelativeToEnum (0..1) <"Specifies whether the reset dates are determined with respect to each adjusted calculation period start date or adjusted calculation period end date. If the reset frequency is specified as daily this element must not be included.">
	resetFrequency ResetFrequency (0..1) <"The frequency at which reset dates occur. In the case of a weekly reset frequency, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency then this implies that more than one reset date is established for each calculation period and some form of rate averaging is applicable.">
	initialFixingDate RelativeDateOffset (0..1) <"Initial fixing date expressed as an offset to another date defined elsewhere in the document.">
	fixingDates AdjustableDatesOrRelativeDateOffset (0..1) <"Specifies the fixing date relative to the reset date in terms of a business days offset, or by providing a series of adjustable dates.">

	condition Choice:
		required choice resetRelativeTo, resetFrequency

type LegAmount: <"A type describing the amount that will paid or received on each of the payment dates. This type is used to define both the Equity Amount and the Interest Amount.">

	currencyAndDeterminationMethodModel CurrencyAndDeterminationMethodModel (0..1)
	referenceAmount ReferenceAmount (0..1) <"Specifies the reference Amount when this term either corresponds to the standard ISDA Definition (either the 2002 Equity Definition for the Equity Amount, or the 2000 Definition for the Interest Amount), or points to a term defined elsewhere in the swap document.">
	formula Formula (0..1) <"Specifies a formula, with its description and components.">
	encodedDescription string (0..1) <"Description of the leg amount when represented through an encoded image.">
	calculationDates AdjustableRelativeOrPeriodicDates (0..1) <"Specifies the date on which a calculation or an observation will be performed for the purpose of defining the Equity Amount, and in accordance to the definition terms of this latter.">

	condition Choice:
		required choice referenceAmount, formula , encodedDescription

type MakeWholeProvisions: <"A type to hold early exercise provisions.">

	makeWholeDate date (1..1) <"Date through which option can not be exercised without penalty.">
	recallSpread number (1..1) <"Spread used if exercised before make whole date. Early termination penalty. Expressed in bp, e.g. 25 bp.">

type NettedSwapBase extends Product: <"An abstract base class for all swap types which have a single netted leg, such as Variance Swaps, and Correlation Swaps.">

	additionalPayment ClassifiablePayment (0..*) <"Specifies additional payment(s) between the principal parties to the netted swap.">
	extraordinaryEvents ExtraordinaryEvents (0..1) <"Where the underlying is shares, specifies events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.">

type OptionFeatures: <"A type for defining option features.">

	asian Asian (0..1) <"An option where and average price is taken on valuation.">
	barrier Barrier (0..1) <"An option with a barrier feature.">
	knock Knock (0..1) <"A knock feature.">
	passThrough PassThrough (0..1) <"Pass through payments from the underlyer, such as dividends.">
	dividendAdjustment DividendAdjustment (0..1) <"Dividend adjustment of the contract is driven by the difference between the Expected Dividend, and the Actual Dividend, which is multiplied by an agreed Factor to produce a Deviation, which is used as the basis for adjusting the contract. The parties acknowledge that in determining the Call Strike Price of the Transaction the parties have assumed that the Dividend scheduled to be paid by the Issuer to holders of record of the Shares, in the period set out in Column headed Relevant Period will equal per Share the amount stated in respect of such Relevant Period.">

type PrincipalExchangeAmount: <"Specifies the principal exchange amount, either by explicitly defining it, or by point to an amount defined somewhere else in the swap document.">

	amountRelativeTo AmountReference (0..1) <"Reference to an amount defined elsewhere in the document.">
	determinationMethod DeterminationMethod (0..1) <"Specifies the method according to which an amount or a date is determined.">
	principalAmount NonNegativeMoney (0..1) <"Principal exchange amount when explictly stated.">

	condition Choice:
		one-of

type PrincipalExchangeDescriptions: <"Specifies each of the characteristics of the principal exchange cashflows, in terms of paying/receiving counterparties, amounts and dates.">

	payerReceiverModel PayerReceiverModel (1..1)
	principalExchangeAmount PrincipalExchangeAmount (1..1) <"Specifies the principal echange amount, either by explicitly defining it, or by point to an amount defined somewhere else in the swap document.">
	principalExchangeDate AdjustableOrRelativeDate (0..1) <"Date on which each of the principal exchanges will take place. This date is either explictly stated, or is defined by reference to another date in the swap document. In this latter case, it will typically refer to one other date of the equity leg: either the effective date (initial exchange), or the last payment date (final exchange).">

type PrincipalExchangeFeatures: <"A type describing the principal exchange features of the return swap.">

	principalExchanges PrincipalExchanges (0..1) <"The true/false flags indicating whether initial, intermediate or final exchanges of principal should occur.">
	principalExchangeDescriptions PrincipalExchangeDescriptions (1..*) <"Specifies each of the characteristics of the principal exchange cashflows, in terms of paying/receiving counterparties, amounts and dates.">

type Representations: <"A type for defining ISDA 2002 Equity Derivative Representations.">

	nonReliance boolean (1..1) <"If true, then non reliance is applicable.">
	agreementsRegardingHedging boolean (1..1) <"If true, then agreements regarding hedging are applicable.">
	indexDisclaimer boolean (0..1) <"If present and true, then index disclaimer is applicable.">
	additionalAcknowledgements boolean (1..1) <"If true, then additional acknowledgements are applicable.">

type Return: <"A type describing the dividend return conditions applicable to the swap.">

	returnType ReturnTypeEnum (1..1) <"Defines the type of return associated with the return swap.">
	dividendConditions DividendConditions (0..1) <"Specifies the conditions governing the payment of the dividends to the receiver of the equity return. With the exception of the dividend payout ratio, which is defined for each of the underlying components.">

type ReturnLegValuation: <"A type describing the initial and final valuation of the underlyer.">

	initialPrice ReturnLegValuationPrice (1..1) <"Specifies the initial reference price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.">
	notionalReset boolean (0..1) <"For return swaps, this element is equivalent to the term \"Equity Notional Reset\" as defined in the ISDA 2002 Equity Derivatives Definitions. The reference to the ISDA definition is either \"Applicable\" or \'Inapplicable\".">
	valuationPriceInterim ReturnLegValuationPrice (0..1) <"Specifies the final valuation price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.">
	valuationPriceFinal ReturnLegValuationPrice (1..1) <"Specifies the final valuation price of the underlyer. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.">
	paymentDates ReturnSwapPaymentDates (1..1) <"Specifies the payment dates of the swap.">
	exchangeTradedContractNearest ExchangeTradedContract (0..1) <"References a Contract on the Exchange.">

type ReturnLegValuationPrice extends Price:

	valuationRules EquityValuation (0..1) <"Specifies valuation.">

type ReturnSwapAdditionalPayment extends PaymentBase: <"A type describing the additional payment(s) between the principal parties to the trade. This component extends some of the features of the additionalPayment component previously developed in FpML. Appropriate discussions will determine whether it would be appropriate to extend the shared component in order to meet the further requirements of equity swaps.">

	payerReceiverModel PayerReceiverModel (1..1)
	additionalPaymentAmount AdditionalPaymentAmount (1..1) <"Specifies the amount of the fee along with, when applicable, the formula that supports its determination.">
	additionalPaymentDate AdjustableOrRelativeDate (1..1) <"Specifies the value date of the fee payment/receipt.">
	paymentType PaymentType (0..1) <"Classification of the payment.">

type ReturnSwapAmount extends LegAmount: <"Specifies, in relation to each Payment Date, the amount to which the Payment Date relates. For Equity Swaps this element is equivalent to the Equity Amount term as defined in the ISDA 2002 Equity Derivatives Definitions.">

	cashSettlement boolean (1..1) <"If true, then cash settlement is applicable.">
	dividendsModel DividendsModel (1..1)

type ReturnSwapBase extends Product: <"A type describing the components that are common for return type swaps, including short and long form return swaps representations.">

	buyerSellerModel BuyerSellerModel (0..1)
	returnSwapLeg DirectionalLeg (1..*)
	principalExchangeFeatures PrincipalExchangeFeatures (0..1) <"This is used to document a Fully Funded Return Swap.">
	additionalPayment ReturnSwapAdditionalPayment (0..*) <"Specifies additional payment(s) between the principal parties to the trade.">

type ReturnSwapEarlyTermination: <"A type describing the date from which each of the party may be allowed to terminate the trade.">

	partyReference PartyReference (1..1) <"Reference to a party defined elsewhere in this document which may be allowed to terminate the trade.">
	startingDate StartingDate (1..1) <"Specifies the date from which the early termination clause can be exercised.">

type ReturnSwapLegUnderlyer extends DirectionalLeg: <"A base class for all return leg types with an underlyer.">

	strikeDate AdjustableOrRelativeDate (0..1) <"Specifies the strike date of this leg of the swap, used for forward starting swaps. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically by relative to the trade date of the swap.">
	underlyer Underlyer (1..1) <"Specifies the underlying component of the leg, which can be either one or many and consists in either equity, index or convertible bond component, or a combination of these.">
	optionSettlementModel OptionSettlementModel (1..1)

type ReturnSwapNotional: <"Specifies the notional of return type swap. When used in the equity leg, the definition will typically combine the actual amount (using the notional component defined by the FpML industry group) and the determination method. When used in the interest leg, the definition will typically point to the definition of the equity leg.">

	relativeNotionalAmount ReturnSwapNotionalAmountReference (0..1) <"A reference to the return swap notional amount defined elsewhere in this document.">
	relativeDeterminationMethod DeterminationMethodReference (0..1) <"A reference to the return swap notional determination method defined elsewhere in this document.">
	determinationMethod DeterminationMethod (0..1) <"Specifies the method according to which an amount or a date is determined.">
	notionalAmount NotionalAmount (0..1) <"The notional amount.">
	id string (0..1)

	condition Choice:
		required choice relativeNotionalAmount, relativeDeterminationMethod , determinationMethod , notionalAmount

type ReturnSwapPaymentDates: <"A type describing the return payment dates of the swap.">

	paymentDatesInterim AdjustableOrRelativeDates (0..1) <"Specifies the interim payment dates of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDates component), this element will typically refer to the valuation dates and add a lag corresponding to the settlement cycle of the underlyer.">
	paymentDateFinal AdjustableOrRelativeDate (1..1) <"Specifies the final payment date of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically refer to the final valuation date and add a lag corresponding to the settlement cycle of the underlyer.">
	id string (0..1)

type StartingDate: <"A type specifying the date from which the early termination clause can be exercised.">

	dateRelativeTo DateReference (0..1) <"Reference to a date defined elswhere in the document.">
	adjustableDate AdjustableDate (0..1) <"Date from which early termination clause can be exercised.">

	condition Choice:
		one-of

type StubCalculationPeriod: <"A type describing the Stub Calculation Period.">

	stubCalculationPeriodSequence StubCalculationPeriodSequence (0..1)
	finalStub Stub (0..1)

	condition Choice:
		one-of

type StubCalculationPeriodSequence:

	initialStub Stub (1..1)
	finalStub Stub (0..1)

type Variance extends CalculationFromObservation: <"A type describing the variance amount of a variance swap.">

	varianceAmount NonNegativeMoney (1..1) <"Variance amount, which is a cash multiplier.">
	volatilityStrikePrice NonNegativeDecimal (0..1)
	varianceStrikePrice NonNegativeDecimal (0..1)
	varianceCap boolean (0..1) <"If present and true, then variance cap is applicable.">
	unadjustedVarianceCap PositiveDecimal (0..1) <"For use when varianceCap is applicable. Contains the scaling factor of the Variance Cap that can differ on a trade-by-trade basis in the European market. For example, a Variance Cap of 2.5^2 x Variance Strike Price has an unadjustedVarianceCap of 2.5.">
	boundedVariance BoundedVariance (0..1) <"Conditions which bound variance. The contract specifies one or more boundary levels. These levels are expressed as prices for confirmation purposes Underlyer price must be equal to or higher than Lower Barrier is known as Up Conditional Swap Underlyer price must be equal to or lower than Upper Barrier is known as Down Conditional Swap Underlyer price must be equal to or higher than Lower Barrier and must be equal to or lower than Upper Barrier is known as Barrier Conditional Swap.">
	exchangeTradedContractNearest ExchangeTradedContract (0..1) <"Specification of the exchange traded contract nearest.">
	vegaNotionalAmount number (0..1) <"Vega Notional represents the approximate gain/loss at maturity for a 1% difference between RVol (realised vol) and KVol (strike vol). It does not necessarily represent the Vega Risk of the trade.">

	condition Choice:
		required choice volatilityStrikePrice, varianceStrikePrice

type CurrencyAndDeterminationMethodModel: <"A group containing return swap amount currency definition methods">

	currency IdentifiedCurrency (0..1) <"The currency in which an amount is denominated.">
	determinationMethod DeterminationMethod (0..1) <"Specifies the method according to which an amount or a date is determined.">
	currencyReference IdentifiedCurrencyReference (0..1) <"Reference to a currency defined elsewhere in the document">

	condition Choice:
		one-of

type DeclaredCashAndCashEquivalentDividendPercentageModel:

	declaredCashDividendPercentage NonNegativeDecimal (0..1) <"Declared Cash Dividend Percentage.">
	declaredCashEquivalentDividendPercentage NonNegativeDecimal (0..1) <"Declared Cash Equivalent Dividend Percentage.">

type DividendsModel: <"A group containing Dividend content">

	optionsExchangeDividends boolean (0..1) <"If present and true, then options exchange dividends are applicable.">
	additionalDividends boolean (0..1) <"If present and true, then additional dividends are applicable.">
	allDividends boolean (0..1) <"Represents the European Master Confirmation value of \'All Dividends\' which, when applicable, signifies that, for a given Ex-Date, the daily observed Share Price for that day is adjusted (reduced) by the cash dividend and/or the cash value of any non cash dividend per Share (including Extraordinary Dividends) declared by the Issuer. All Dividends in accordance with the ISDA 2002 Equity Derivatives Definitions.">

type EquityUnderlyerProvisionsModel: <"A group containing Equity Underlyer provisions.">

	indexAnnexFallbackModel IndexAnnexFallbackModel (0..1)
	localJurisdiction CountryCode (0..1) <"Local Jurisdiction is a term used in the AEJ Master Confirmation, which is used to determine local taxes, which shall mean taxes, duties, and similar charges imposed by the taxing authority of the Local Jurisdiction If this element is not present Local Jurisdiction is Not Applicable.">
	relevantJurisdiction CountryCode (0..1) <"Relevent Jurisdiction is a term used in the AEJ Master Confirmation, which is used to determine local taxes, which shall mean taxes, duties and similar charges that would be imposed by the taxing authority of the Country of Underlyer on a Hypothetical Broker Dealer assuming the Applicable Hedge Positions are held by its office in the Relevant Jurisdiction. If this element is not present Relevant Jurisdiction is Not Applicable.">

type FeatureModel: <"A group containing Swap and Derivative features.">

	feature OptionFeatures (0..1) <"Asian, Barrier, Knock and Pass Through features.">
	fxFeature FxFeature (0..1) <"Quanto, Composite, or Cross Currency FX features.">

type IndexAnnexFallbackModel:

	multipleExchangeIndexAnnexFallback boolean (0..1) <"For an index option transaction, a flag to indicate whether a relevant Multiple Exchange Index Annex is applicable to the transaction. This annex defines additional provisions which are applicable where an index is comprised of component securities that are traded on multiple exchanges.">
	componentSecurityIndexAnnexFallback boolean (0..1) <"For an index option transaction, a flag to indicate whether a relevant Component Security Index Annex is applicable to the transaction.">

	condition Choice:
		one-of

type MutualOrOptionalEarlyTerminationModel:

	mutualEarlyTermination boolean (0..1) <"Used for specifying whether the Mutual Early Termination Right that is detailed in the Master Confirmation will apply.">
	mutualOrOptionalEarlyTerminationModelSequence MutualOrOptionalEarlyTerminationModelSequence (0..1)

	condition Choice:
		one-of

type MutualOrOptionalEarlyTerminationModelSequence:

	optionalEarlyTermination boolean (1..1) <"A Boolean element used for specifying whether the Optional Early Termination clause detailed in the agreement will apply.">
	optionalEarlyTerminationDate EarlyTerminationDateEnum (0..1) <"Optional Early Termination Date">
	optionalEarlyTerminationElectingPartyReference PartyReference (0..1) <"Optional Early Termination Electing Party Reference">
	breakFundingRecovery boolean (0..1) <"A Boolean element used for specifying whether the Break Funding Recovery detailed in the agreement will apply.">
	mutualOrOptionalEarlyTerminationModelSequenceSequence MutualOrOptionalEarlyTerminationModelSequenceSequence (0..1)

type MutualOrOptionalEarlyTerminationModelSequenceSequence:

	breakFeeElection FeeElectionEnum (1..1) <"Defines the fee type.">
	breakFeeRate NonNegativeDecimal (0..1)

type ActualPrice:

	currency Currency (0..1) <"Specifies the currency associated with the net price. This element is not present if the price is expressed in percentage terms (as specified through the priceExpression element).">
	amount number (1..1) <"Specifies the net price amount. In the case of a fixed income security or a convertible bond, this price includes the accrued interests.">
	priceExpression PriceExpressionEnum (1..1) <"Specifies whether the price is expressed in absolute or relative terms.">
	id string (0..1)

type AnyAssetReference extends Reference: <"A reference to an asset, e.g. a portfolio, trade, or reference instrument..">

	href string (1..1)

type Asset: <"Abstract base class for all underlying assets.">

	id string (0..1)

type AssetMeasureType: <"A scheme identifying the types of measures that can be used to describe an asset.">

	value Scheme (1..1)
	assetMeasureScheme NonEmptyURI (0..1)

type AssetPool: <"Characterise the asset pool behind an asset backed bond.">

	versionHistoryModel VersionHistoryModel (0..1)
	initialFactor number (1..1) <"The part of the mortgage that is outstanding on trade inception, i.e. has not been repaid yet as principal. It is expressed as a multiplier factor to the morgage: 1 means that the whole mortage amount is outstanding, 0.8 means that 20% has been repaid.">
	currentFactor number (0..1) <"The part of the mortgage that is currently outstanding. It is expressed similarly to the initial factor, as factor multiplier to the mortgage. This term is formally defined as part of the \"ISDA Standard Terms Supplement for use with credit derivatives transactions on mortgage-backed security with pas-as-you-go or physical settlement\".">

type AssetReference extends Reference: <"Reference to an underlying asset.">

	href string (1..1)

type BasicQuotation: <"Some kind of numerical measure about an asset, eg. its NPV, together with characteristics of that measure.">

	quotationModel QuotationModel (1..1)
	id string (0..1)

type BasketConstituent: <"A type describing each of the constituents of a basket.">

	payerReceiverModel PayerReceiverModel (0..1)
	underlyingAsset Asset (1..1)
	constituentWeight ConstituentWeight (0..1) <"Specifies the weight of each of the underlyer constituent within the basket, either in absolute or relative terms. This is an optional component, as certain swaps do not specify a specific weight for each of their basket constituents.">
	dividendPayout DividendPayout (0..1) <"Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.">
	underlyerPrice Price (0..1) <"Specifies the price that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the price that characterizes the equity swap is associated to the leg of the trade.">
	underlyerNotional Money (0..1) <"Specifies the notional (i.e. price * quantity) that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the notional that characterizes the equity swap is associated to the leg of the trade.">
	underlyerSpread SpreadScheduleReference (0..1) <"Provides a link to the spread schedule used for this underlyer.">
	couponPayment PendingPayment (0..1) <"The next upcoming coupon payment.">
	underlyerFinancing UnderlyerInterestLeg (0..1) <"Financing terms associated with this underlyer">
	underlyerLoanRate UnderlyerLoanRate (0..1) <"Loan rate terms associated with this underlyer. Commonly used for stock loan. You must not duplicate data elements already contained within dividend conditions at transaction level">
	underlyerCollateral Collateral (0..1) <"Collateral associated with this underlyer. Note that this is not typical usage, collateral is more often at transaction level">
	id string (0..1)

type BasketId:

	value NonEmptyScheme (1..1)
	basketIdScheme NonEmptyURI (0..1)

type BasketName:

	value NonEmptyScheme (1..1)
	basketNameScheme NonEmptyURI (0..1)

type Commission: <"A type describing the commission that will be charged for each of the hedge transactions.">

	commissionDenomination CommissionDenominationEnum (1..1) <"The type of units used to express a commission.">
	commissionAmount number (1..1) <"The commission amount, expressed in the way indicated by the commissionType element.">
	currency Currency (0..1) <"The currency in which an amount is denominated.">
	commissionPerTrade number (0..1) <"The total commission per trade.">
	fxRate FxRate (0..*) <"FX Rates that have been used to convert commissions to a single currency.">

type CommodityBase:

	value Scheme (1..1)
	commodityBaseScheme NonEmptyURI (0..1)

type CommodityBusinessCalendar: <"Defines a commodity business day calendar.">

	value Scheme (1..1)
	commodityBusinessCalendarScheme NonEmptyURI (0..1)

type CommodityDetails:

	value Scheme (1..1)
	commodityDetailsScheme NonEmptyURI (0..1)

type CommodityInformationProvider: <"The publication in which the rate, price, index or factor is to be found. (e.g Gas Daily, Platts Bloomberg.)">

	value Scheme (1..1)
	informationProviderScheme NonEmptyURI (0..1)

type CommodityInformationSource: <"A type defining the source of a commodity rate, price or index or of a market rate or of a conversion factor (e.g. a fx conversion factor).">

	rateSource CommodityInformationProvider (1..1) <"The publication in which the rate, price, index or factor is to be found. (e.g Gas Daily, Platts Bloomberg.)">
	rateSourcePage RateSourcePage (0..1) <"A specific page or screen (in the case of electronically published information) on which the rate source is to be found.">
	rateSourcePageHeading String (0..1) <"The heading for the rate source on a given rate source page or screen.">

type ConstituentWeight: <"A type describing the weight of each of the underlyer constituent within the basket, either in absolute or relative terms.">

	openUnits number (0..1) <"The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.">
	basketPercentage RestrictedPercentage (0..1) <"The relative weight of each respective basket constituent, expressed in percentage. A basket percentage of 5% would be represented as 0.05.">
	basketAmount Money (0..1) <"DEPRECATED. The relative weight of each respective basket constituent, expressed as a monetary amount.">

type CouponType: <"Defines a scheme of values for specifiying if the bond has a variable coupon, step-up/down coupon or a zero-coupon.">

	value Scheme (1..1)
	couponTypeScheme NonEmptyURI (0..1)

type DeliveryNearby: <"A type defines nearest Delivery Date of the underlying Commodity of expiration of the futures contract.">

	deliveryNearbyMultiplier int(min: 1) (1..1) <"A time multiplier, e.g. 1, 2 or 3 etc. used in defining Delivery Nearby date.">
	deliveryNearbyType DeliveryNearbyTypeEnum (1..1) <"Defines a type of the delivery nearby qualifier, expect to be used in conjunction with a delivery nearby multiplier, e.g. 1NearByMonth, 1NearbyWeek, etc. If \'CalculationPeriod\' is used, the delivery nearby multiplier is expected to be \'0\'. To represent \'Spot\', the value of the delivery nearby type should be \'NearbyMonth\' and the delivery period multiplier should be set to \'0\' (zero).">
	id string (0..1)

type DividendPayout: <"A type describing the dividend payout ratio associated with an equity underlyer. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified.">

	dividendPayoutSequence DividendPayoutSequence (0..1)
	dividendPayoutConditions String (0..1) <"Specifies the dividend payout conditions that will be applied in the case where the actual ratio is not known, typically because of regulatory or legal uncertainties.">
	dividendPayment PendingPayment (0..*) <"The next upcoming dividend payment or payments.">

	condition Choice:
		required choice dividendPayoutSequence, dividendPayoutConditions

type DividendPayoutSequence:

	dividendPayoutRatio number (1..1) <"Specifies the total actual dividend payout ratio associated with the equity underlyer.">
	dividendPayoutRatioCash number (0..1) <"Specifies the cash actual dividend payout ratio associated with the equity underlyer.">
	dividendPayoutRatioNonCash number (0..1) <"Specifies the non cash actual dividend payout ratio associated with the equity underlyer.">

type EquityAsset extends ExchangeTraded: <"An exchange traded equity asset.">

type ExchangeTraded extends UnderlyingAsset: <"An abstract base class for all exchange traded financial products.">

	exchangeIdentifierModel ExchangeIdentifierModel (1..1)

type ExchangeTradedCalculatedPrice extends ExchangeTraded: <"Abstract base class for all exchange traded financial products with a price which is calculated from exchange traded constituents.">

	constituentExchangeId ExchangeId (0..*) <"Identification of all the exchanges where constituents are traded. The term \"Exchange\" is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.">

type ExchangeTradedContract extends ExchangeTraded: <"An exchange traded derivative contract.">

	multiplier PositiveDecimal (0..1) <"Specifies the contract multiplier that can be associated with the number of units.">
	contractReference String (0..1) <"Specifies the contract that can be referenced, besides the undelyer type.">
	expirationDate AdjustableOrRelativeDate (0..1) <"The date when the contract expires.">

type ExchangeTradedContractUnderlyer: <"A type describing a single underlyer">

	floatingRateIndexModel FloatingRateIndexModel (0..1)
	quotedCurrencyPair QuotedCurrencyPair (0..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	underlyingAsset Asset (0..*)

	condition Choice:
		one-of

type ExchangeTradedOption extends ExchangeTradedContract: <"An exchange traded option.">

	exchangeTradedOptionSequence ExchangeTradedOptionSequence (0..1)
	optionType PutCallEnum (0..1) <"Specifies whether the option allows the holder to buy or sell tne underlying asset.">
	exerciseStyle ExerciseStyleEnum (0..1) <"Specifies the exercise style of the option {American, Bermuda, European}">
	underlyer ExchangeTradedContractUnderlyer (0..1) <"Underlyer of the option e.g. a listed future.">
	settlementType SettlementTypeEnum (0..1) <"Settlement method for the contract (Cash, Physical). This value is used to populate the \"Delivery Type\" field for regulatory reporting (CFTC, ESMA).">

type ExchangeTradedOptionSequence:

	strike number (1..1) <"Specifies the price at which the option can be exercised.">
	strikeCurrency Currency (0..1) <"The currency in which the strike of the option is expressed.">
	strikeUnits PriceQuoteUnits (0..1) <"Units in which the option strike is expressed e.g. currency Amount, BasisPoints, Percentage, Rate. Reportable reference data under MiFID RTS 22">

type FacilityType: <"A type describing the type of loan facility.">

	value Scheme (1..1)
	facilityTypeScheme NonEmptyURI (0..1)

type FutureId: <"A type defining a short form unique identifier for a future contract.">

	value NonEmptyScheme (1..1)
	futureIdScheme NonEmptyURI (0..1)

type FxConversion:

	amountRelativeTo AmountReference (0..1)
	fxRate FxRate (0..*) <"Specifies a currency conversion rate.">

	condition Choice:
		one-of

type FxRateAsset extends UnderlyingAsset:

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	rateSource FxSpotRateSource (0..1) <"Defines the source of the FX rate.">

type IdentifiedAsset extends Asset: <"A generic type describing an identified asset.">

	instrumentId InstrumentId (1..*) <"Identification of the underlying asset, using public and/or private identifiers.">
	description String (0..1) <"Long name of the underlying asset.">

type Lien: <"A type describing the liens associated with a loan facility.">

	value Scheme (1..1)
	lienScheme NonEmptyURI (0..1)

type LoanChoice:

	borrower LegalEntity (0..1)
	borrowerReference LegalEntityReference (0..1)

	condition Choice:
		optional choice borrower, borrowerReference

type MortgageSector: <"A type describing the typology of mortgage obligations.">

	value Scheme (1..1)
	mortgageSectorScheme NonEmptyURI (0..1)

type PendingPayment extends PaymentBase: <"A structure representing a pending dividend or coupon payment.">

	paymentDate date (1..1) <"The date that the dividend or coupon is due.">
	amount Money (1..1) <"The amount of the dividend or coupon payment. Value of dividends or coupon between ex and pay date. Stock: if we are between ex-date and pay-date and the dividend is payable under the swap, then this should be the ex-div amount * # of securities. Bond: regardless of where we are vis-a-vis resets: (coupon % * face of bonds on swap * (bond day count fraction using days last coupon pay date of the bond through today).">
	accruedInterest Money (0..1) <"Accrued interest on the dividend or coupon payment. When the TRS is structured to pay a dividend or coupon on reset after payable date, you may earn interest on these amounts. This field indicates the interest accrued on dividend/coupon from pay date to statement date. This will only apply to a handful of agreements where dividendss are held to the next reset AND you receive/pay interest on unpaid amounts.">

type Price: <"A type describing the strike price.">

	commission Commission (0..1) <"This optional component specifies the commission to be charged for executing the hedge transactions.">
	priceSequence PriceSequence (0..1)
	amountRelativeTo AmountReference (0..1) <"The href attribute value will be a pointer style reference to the element or component elsewhere in the document where the anchor amount is defined.">
	equityPriceModel EquityPriceModel (0..1)
	cleanNetPrice number (0..1) <"The net price excluding accrued interest. The \"Dirty Price\" for bonds is put in the \"netPrice\" element, which includes accrued interest. Thus netPrice - cleanNetPrice = accruedInterest. The currency and price expression for this field are the same as those for the (dirty) netPrice.">
	quotationCharacteristics QuotationCharacteristics (0..1) <"Allows information about how the price was quoted to be provided.">

	condition Choice:
		required choice priceSequence, amountRelativeTo , equityPriceModel

type PriceSequence:

	determinationMethod DeterminationMethod (1..1) <"Specifies the method according to which an amount or a date is determined.">
	equityPriceModel EquityPriceModel (0..1)

type PriceQuoteUnits:

	value Scheme (1..1)
	priceQuoteUnitsScheme NonEmptyURI (0..1)

type PricingModel: <"A scheme identifying the types of pricing model used to evaluate the price of an asset. Examples include Intrinsic, ClosedForm, MonteCarlo, BackwardInduction.">

	value Scheme (1..1)
	pricingModelScheme NonEmptyURI (0..1)

type QuantityUnit:

	value Scheme (1..1)
	quantityUnitScheme NonEmptyURI (0..1)

type QuotationCharacteristics: <"A type representing a set of characteristics that describe a quotation.">

	quotationCharacteristicsModel QuotationCharacteristicsModel (1..1)

type QuoteTiming:

	value Scheme (1..1)
	quoteTimingScheme NonEmptyURI (0..1)

type ReportingCurrencyType: <"A scheme identifying the type of currency that was used to report the value of an asset. For example, this could contain values like SettlementCurrency, QuoteCurrency, UnitCurrency, etc.">

	value Scheme (1..1)
	reportingCurrencyTypeScheme NonEmptyURI (0..1)

type SingleUnderlyer: <"A type describing a single underlyer">

	underlyingAsset Asset (1..1)
	openUnits number (0..1) <"The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.">
	dividendPayout DividendPayout (0..1) <"Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.">
	couponPayment PendingPayment (0..1) <"The next upcoming coupon payment.">
	averageDailyTradingVolume AverageDailyTradingVolumeLimit (0..1) <"The average amount of individual securities traded in a day or over a specified amount of time.">
	depositoryReceipt boolean (0..1) <"A Depository Receipt is a negotiable certificate issued by a trust company or security depository. This element is used to represent whether a Depository Receipt is applicable or not to the underlyer.">

type Underlyer: <"A type describing the whole set of possible underlyers: single underlyers or multiple underlyers, each of these having either security or index components.">

	singleUnderlyer SingleUnderlyer (0..1) <"Describes the swap\'s underlyer when it has only one asset component.">
	basket Basket (0..1) <"Describes the swap\'s underlyer when it has multiple asset components.">

	condition Choice:
		one-of

type UnderlyingAsset extends IdentifiedAsset: <"Abstract base class for all underlying assets.">

	currency IdentifiedCurrency (0..1) <"Trading currency of the underlyer when transacted as a cash instrument.">
	exchangeId ExchangeId (0..1) <"Identification of the exchange on which this asset is transacted for the purposes of calculating a contractural payoff. The term \"Exchange\" is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.">
	clearanceSystem ClearanceSystem (0..1) <"Identification of the clearance system associated with the transaction exchange.">
	^definition ProductReference (0..1) <"An optional reference to a full FpML product that defines the simple product in greater detail. In case of inconsistency between the terms of the simple product and those of the detailed definition, the values in the simple product override those in the detailed definition.">

type UnderlyingAssetTranche:

	value Scheme (1..1)
	loanTrancheScheme NonEmptyURI (0..1)

type UnderlyerLoanRate: <"Defines stock loan information where this is required per underlyer. You must not duplicate infromation within dividend conditions at transaction level">

	stockLoanModel StockLoanModel (1..1)

type BasketIdentifierModel: <"A group that specifies a name and an identifier for a given basket.">

	basketIdentifierModelSequence BasketIdentifierModelSequence (0..1)
	basketId BasketId (0..*) <"A CDS basket identifier">

	condition Choice:
		one-of

type BasketIdentifierModelSequence:

	basketName BasketName (1..1) <"The name of the basket expressed as a free format string. FpML does not define usage rules for this element.">
	basketId BasketId (0..*) <"A CDS basket identifier">

type BondCalculationModel: <"A group that specifies Bond Calculation elements.">

	paymentFrequency Period (0..1) <"Specifies the frequency at which the bond pays, e.g. 6M.">
	dayCountFraction DayCountFraction (0..1) <"The day count basis for the bond.">

type BondChoiceModel: <"A model group which provides choices between all bond underlyers.">

	bond Bond (0..1)
	convertibleBond ConvertibleBond (0..1)

	condition Choice:
		one-of

type CommodityProductModel: <"A group used to specify details of a commodity underlyer.">

	commodityReferencePriceFrameworkModel CommodityReferencePriceFrameworkModel (0..1)
	specifiedPrice SpecifiedPriceEnum (1..1) <"The \'specified Price\' describes the nature of the underlying price that is observed. It must be be stated in the underlyer definition as it is not defined in the Commodity Reference Price. Example values of \'specifiedPrice\' are \'Settlement\' (for a futures contract) and \'WeightedAverage\' (for some published prices and indices).">
	commodityProductModelSequence CommodityProductModelSequence (0..1)
	multiplier PositiveDecimal (0..1) <"The \'multiplier\' specifies the multiplier associated with the Transaction. The \'multiplier\' element has two uses: (1) for Freight Transactions or any Calculation Period specified for a Freight Transaction, if an amount is specified as the Multiplier then it is captured by this element and (2) if the Transaction is a heat rate option, the heat rate multiplier is represented in this element. If multiplier is not provided, multiplier is assumed to be 1. (i.e. rate source states 1 BBL of Oil as 90 Dollars. Multiplier of 10 will change the value to 900 dollars.)">

type CommodityProductModelSequence:

	commodityProductModelSequenceChoice CommodityProductModelSequenceChoice (0..1)
	deliveryDate AdjustableDate (0..1) <"The Delivery Date is a fixed, single day.">
	deliveryDateYearMonth int (0..1) <"The Delivery Date is a fixed, single month.">
	deliveryDateRollConvention Offset (0..1) <"The \'deliveryDateRollConvention\' specifies, for a Commodity Transaction that references a listed future via the \'deliveryDates\' element, the day on which the specified future will roll to the next nearby month prior to the expiration of the referenced future. If the future will not roll at all - i.e. the price will be taken from the expiring contract, 0 should be specified here. If the future will roll to the next nearby on the last trading day - i.e. the price will be taken from the next nearby on the last trading day, then 1 should be specified and so on.">
	deliveryDateExpirationConvention Offset (0..1) <"The \'deliveryDateExpirationConvention\' specifies, for a Commodity Transaction that references a listed future via the \'deliveryDates\' element, the day on which the specified future will expire ahead of the actual expiration of the referenced future. For example: Z21 Contract expires on 19Nov21, with an adjust of 2D the \"expire\" will be 16Nov21. DeliveryDateRollConvention takes precedence. Example: Pricing on the Z21 Contract with NearbyContractDay and a deliveryDateRoll of 10D, Sampling of the F22 Contract will occur on 8Nov21 through the last Date of the Z21 Contract. With an ExpConvention of 5D, the last sampling date on the F22 contract will be 12Nov21.">

	condition Choice:
		required choice commodityProductModelSequenceChoice, deliveryDate , deliveryDateYearMonth

type CommodityProductModelSequenceChoice:

	deliveryDates DeliveryDatesEnum (0..1) <"Deprecated: The \'deliveryDates\' element is applicable for a Commodity Reference Price that references a listed future contract (e.g. The Delivery Date is a NearbyMonth).">
	deliveryNearby DeliveryNearby (0..1) <"A container for the parametric representation of nearby contracts.">

	condition Choice:
		one-of

type CommodityReferencePriceFrameworkModel: <"A group used to specify the commodity underlyer in the event that no ISDA Commofity Reference Price exists.">

	commodityBase CommodityBase (1..1) <"A coding scheme value to identify the base type of the commodity being traded. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions. For example, \'Oil\'.">
	commodityDetails CommodityDetails (1..1) <"A coding scheme value to identify the commodity being traded more specifically. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions. For example, \'Brent\'.">
	unit QuantityUnit (1..1) <"A coding scheme value to identify the unit of measure (e.g. Therms) in which the undelryer is denominated. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions.">
	currency Currency (1..1) <"The currency in which the Commodity Reference Price is published (e.g. GBP).">
	exchangeId ExchangeId (0..1) <"For those commodities being traded with reference to the price of a listed instrument, the exchange where that instrument is listed should be specified in the \'exchange\' element.">
	publication CommodityInformationSource (0..1) <"For those commodities being traded with reference to a price distributed by a publication, that publication should be specified in the \'publication\' element.">

	condition Choice:
		required choice exchangeId, publication

type CreditEntityModel: <"An item which has credit characteristics that can be modeled, e.g. a firm, index, or region.">

	referenceEntity LegalEntity (0..1) <"The entity for which this is defined.">
	creditEntityReference LegalEntityReference (0..1) <"An XML reference a credit entity defined elsewhere in the document.">

	condition Choice:
		one-of

type EquityPriceModel:

	grossPrice ActualPrice (0..1) <"Specifies the price of the underlyer, before commissions.">
	netPrice ActualPrice (1..1) <"Specifies the price of the underlyer, net of commissions.">
	accruedInterestPrice number (0..1) <"Specifies the accrued interest that are part of the dirty price in the case of a fixed income security or a convertible bond. Expressed in percentage of the notional.">
	fxConversion FxConversion (0..1) <"Specifies the currency conversion rate that applies to an amount. This rate can either be defined elsewhere in the document (case of a quanto swap), or explicitly described through this component.">

type ExchangeIdentifierModel:

	relatedExchangeId ExchangeId (0..*) <"A short form unique identifier for a related exchange. If the element is not present then the exchange shall be the primary exchange on which listed futures and options on the underlying are listed. The term \"Exchange\" is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.">
	optionsExchangeId ExchangeId (0..*) <"A short form unique identifier for an exchange on which the reference option contract is listed. This is to address the case where the reference exchange for the future is different than the one for the option. The options Exchange is referenced on share options when Merger Elections are selected as Options Exchange Adjustment.">
	specifiedExchangeId ExchangeId (0..*) <"A short form unique identifier for a specified exchange. If the element is not present then the exchange shall be default terms as defined in the MCA; unless otherwise specified in the Transaction Supplement.">

type FixedIncomeSecurityContentModel: <"A group that specifies Bond Content elements.">

	issuerName String (0..1)
	issuerPartyReference PartyReference (0..1)
	seniority CreditSeniority (0..1) <"The repayment precedence of a debt instrument.">
	couponType CouponType (0..1) <"Specifies if the bond has a variable coupon, step-up/down coupon or a zero-coupon.">
	couponRate number (0..1) <"Specifies the coupon rate (expressed in percentage) of a fixed income security or convertible bond.">
	maturity date (0..1) <"The date when the principal amount of a security becomes due and payable.">

	condition Choice:
		optional choice issuerName, issuerPartyReference

type QuotationModel: <"Some kind of numerical measure about an asset, eg. its price or NPV, together with characteristics of that measure.">

	value number (0..1) <"The value of the the quotation.">
	quotationCharacteristicsModel QuotationCharacteristicsModel (1..1)

type QuotationCharacteristicsModel: <"A group collecting a set of characteristics that can be used to describe a quotation.">

	measureType AssetMeasureType (0..1) <"The type of the value that is measured. This could be an NPV, a cash flow, a clean price, etc.">
	quoteUnits PriceQuoteUnits (0..1) <"The optional units that the measure is expressed in. If not supplied, this is assumed to be a price/value in currency units.">
	side QuotationSideEnum (0..1) <"The side (bid/mid/ask) of the measure.">
	currency Currency (0..1) <"The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.">
	currencyType ReportingCurrencyType (0..1) <"The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.">
	timing QuoteTiming (0..1) <"When during a day the quote is for. Typically, if this element is supplied, the QuoteLocation needs also to be supplied.">
	quoteLocationModel QuoteLocationModel (0..1)
	informationSource InformationSource (0..*) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">
	pricingModel PricingModel (0..1) <".">
	time zonedDateTime (0..1) <"When the quote was observed or when a calculated value was generated.">
	valuationDate date (0..1) <"When the quote was computed.">
	expiryTime zonedDateTime (0..1) <"When does the quote cease to be valid.">
	cashflowType CashflowType (0..1) <"For cash flows, the type of the cash flows. Examples include: Coupon payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.">

type QuoteLocationModel: <"A group describing where a quote was or will be obtained, e.g. observed or calculated.">

	businessCenter BusinessCenter (0..1) <"A city or other business center.">
	exchangeId ExchangeId (0..1) <"The exchange (e.g. stock or futures exchange) from which the quote is obtained.">

	condition Choice:
		one-of

type Asian: <"As per ISDA 2002 Definitions.">

	averagingInOut AveragingInOutEnum (1..1)
	strikeFactor number (0..1) <"The factor of strike.">
	averagingPeriodIn AveragingPeriod (0..1) <"The averaging in period.">
	averagingPeriodOut AveragingPeriod (0..1) <"The averaging out period.">

type AveragingObservationList: <"An un ordered list of weighted averaging observations.">

	averagingObservation WeightedAveragingObservation (1..*) <"A single weighted averaging observation.">

type AveragingPeriod: <"Period over which an average value is taken.">

	schedule AveragingSchedule (0..*) <"A schedule for generating averaging observation dates.">
	averagingDateTimes DateTimeList (0..1) <"An unweighted list of averaging observation date and times.">
	averagingObservations AveragingObservationList (0..1) <"A weighted list of averaging observation date and times.">
	marketDisruption MarketDisruption (0..1) <"The market disruption event as defined by ISDA 2002 Definitions.">

	condition Choice:
		optional choice averagingDateTimes, averagingObservations

type AveragingSchedule: <"Method of generating a series of dates.">

	periodModel PeriodModel (1..1)
	averagingPeriodFrequency CalculationPeriodFrequency (1..1) <"The frequency at which averaging period occurs with the regular part of the valuation schedule and their roll date convention.">

type Barrier: <"As per ISDA 2002 Definitions.">

	barrierCap TriggerEvent (0..1) <"A trigger level approached from beneath.">
	barrierFloor TriggerEvent (0..1) <"A trigger level approached from above.">

type CalendarSpread: <"A type for defining a calendar spread feature.">

	expirationDateTwo AdjustableOrRelativeDate (1..1)

type ClassifiablePayment extends NonNegativePayment: <"A classified non negative payment.">

	paymentType PaymentType (0..*) <"Payment classification.">

type Composite: <"Specifies the conditions to be applied for converting into a reference currency when the actual currency rate is not determined upfront.">

	determinationMethod DeterminationMethod (0..1) <"Specifies the method according to which an amount or a date is determined.">
	relativeDate RelativeDateOffset (0..1) <"A date specified as some offset to another date (the anchor date).">
	fxSpotRateSource FxSpotRateSource (0..1) <"Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.">

type CreditEventNoticeType:

	notifyingParty NotifyingParty (1..1) <"Pointer style references to a party identifier defined elsewhere in the document. The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. ISDA 2003 Term: Notifying Party.">
	businessCenter BusinessCenter (0..1) <"Inclusion of this business center element implies that Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions is replaced by the local time of the city indicated by the businessCenter element value.">
	publiclyAvailableInformation PubliclyAvailableInformation (0..1) <"A specified condition to settlement. Publicly available information means information that reasonably confirms any of the facts relevant to determining that a credit event or potential repudiation/moratorium, as applicable, has occurred. The ISDA defined list (2003) is the market standard and is considered comprehensive, and a minimum of two differing public sources must have published the relevant information, to declare a Credit Event. ISDA 2003 Term: Notice of Publicly Available Information Applicable.">

type CreditEvents:

	bankruptcy boolean (0..1) <"A credit event. The reference entity has been dissolved or has become insolvent. It also covers events that may be a precursor to insolvency such as instigation of bankruptcy or insolvency proceedings. Sovereign trades are not subject to Bankruptcy as \"technically\" a Sovereign cannot become bankrupt. ISDA 2003 Term: Bankruptcy.">
	failureToPay FailureToPayType (0..1) <"A credit event. This credit event triggers, after the expiration of any applicable grace period, if the reference entity fails to make due payments in an aggregrate amount of not less than the payment requirement on one or more obligations (e.g. a missed coupon payment). ISDA 2003 Term: Failure to Pay.">
	failureToPayPrincipal boolean (0..1) <"A credit event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.">
	failureToPayInterest boolean (0..1) <"A credit event. Corresponds to the failure by the Reference Entity to pay an expected interest amount or the payment of an actual interest amount that is less than the expected interest amount. ISDA 2003 Term: Failure to Pay Interest.">
	obligationDefault boolean (0..1) <"A credit event. One or more of the obligations have become capable of being declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay. ISDA 2003 Term: Obligation Default.">
	obligationAcceleration boolean (0..1) <"A credit event. One or more of the obligations have been declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay (preferred by the market over Obligation Default, because more definitive and encompasses the definition of Obligation Default - this is more favorable to the Seller). Subject to the default requirement amount. ISDA 2003 Term: Obligation Acceleration.">
	repudiationMoratorium boolean (0..1) <"A credit event. The reference entity, or a governmental authority, either refuses to recognise or challenges the validity of one or more obligations of the reference entity, or imposes a moratorium thereby postponing payments on one or more of the obligations of the reference entity. Subject to the default requirement amount. ISDA 2003 Term: Repudiation/Moratorium.">
	restructuring Restructuring (0..1) <"A credit event. A restructuring is an event that materially impacts the reference entity\'s obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2003 Term: Restructuring.">
	governmentalIntervention boolean (0..1) <"A credit event. A governmental intervention is an event resulting from an action by a governmental authority that materially impacts the reference entity\'s obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2014 Term: Governmental Intervention.">
	distressedRatingsDowngrade boolean (0..1) <"A credit event. Results from the fact that the rating of the reference obligation is downgraded to a distressed rating level. From a usage standpoint, this credit event is typically not applicable in case of RMBS trades.">
	maturityExtension boolean (0..1) <"A credit event. Results from the fact that the underlier fails to make principal payments as expected.">
	writedown boolean (0..1) <"A credit event. Results from the fact that the underlier writes down its outstanding principal amount.">
	impliedWritedown boolean (0..1) <"A credit event. Results from the fact that losses occur to the underlying instruments that do not result in reductions of the outstanding principal of the reference obligation.">
	defaultRequirement Money (0..1) <"In relation to certain credit events, serves as a threshold for Obligation Acceleration, Obligation Default, Repudiation/Moratorium and Restructuring. Market standard is USD 10,000,000 (JPY 1,000,000,000 for all Japanese Yen trades). This is applied on an aggregate or total basis across all Obligations of the Reference Entity. Used to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Default Requirement.">
	creditEventNotice CreditEventNoticeType (0..1) <"A specified condition to settlement. An irrevocable written or verbal notice that describes a credit event that has occurred. The notice is sent from the notifying party (either the buyer or the seller) to the counterparty. It provides information relevant to determining that a credit event has occurred. This is typically accompanied by Publicly Available Information. ISDA 2003 Term: Credit Event Notice.">
	id string (0..1)

type CreditEventsReference extends Reference: <"Reference to credit events.">

	href string (1..1)

type FailureToPayType:

	applicable boolean (1..1) <"Indicates whether the failure to pay provision is applicable.">
	gracePeriodExtension GracePeriodExtension (0..1) <"If this element is specified, indicates whether or not a grace period extension is applicable. ISDA 2003 Term: Grace Period Extension Applicable.">
	paymentRequirement Money (0..1) <"Specifies a threshold for the failure to pay credit event. Market standard is USD 1,000,000 (JPY 100,000,000 for Japanese Yen trades) or its equivalent in the relevant obligation currency. This is applied on an aggregate basis across all Obligations of the Reference Entity. Intended to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Payment Requirement.">

type FeaturePayment extends PaymentBase: <"Payment made following trigger occurence.">

	payerReceiverModel PayerReceiverModel (1..1)
	levelPercentage number (0..1) <"The trigger level percentage.">
	amount NonNegativeDecimal (0..1) <"The monetary quantity in currency units.">
	time TimeTypeEnum (0..1) <"The feature payment time.">
	currency Currency (0..1) <"The currency in which an amount is denominated.">
	featurePaymentDate AdjustableOrRelativeDate (0..1) <"The feature payment date.">

	condition Choice:
		required choice levelPercentage, amount

type FxFeature: <"A type for defining Fx Features.">

	referenceCurrency IdentifiedCurrency (1..1) <"Specifies the reference currency of the trade.">
	composite Composite (0..1) <"If “Composite” is specified as the Settlement Type in the relevant Transaction Supplement, an amount in the Settlement Currency, determined by the Calculation Agent as being equal to the number of Options exercised or deemed exercised, multiplied by: (Settlement Price – Strike Price) / (Strike Price – Settlement Price) x Multiplier provided that if the above is equal to a negative amount the Option Cash Settlement Amount shall be deemed to be zero.">
	quanto Quanto (0..1) <"If “Quanto” is specified as the Settlement Type in the relevant Transaction Supplement, an amount, as determined by the Calculation Agent in accordance with the Section 8.2 of the Equity Definitions.">
	crossCurrency Composite (0..1) <"If “Cross-Currency” is specified as the Settlement Type in the relevant Transaction Supplement, an amount in the Settlement Currency, determined by the Calculation Agent as being equal to the number of Options exercised or deemed exercised, multiplied by: (Settlement Price – Strike Price) / (Strike Price – Settlement Price) x Multiplier x one unit of the Reference Currency converted into an amount in the Settlement Currency using the rate of exchange of the Settlement Currency as quoted on the Reference Price Source on the Valuation Date, provided that if the above is equal to a negative amount the Option Cash Settlement Amount shall be deemed to be zero.">

	condition Choice:
		required choice composite, quanto , crossCurrency

type GracePeriodExtension:

	applicable boolean (1..1) <"Indicates whether the grace period extension provision is applicable.">
	gracePeriod Offset (0..1) <"The number of calendar or business days after any due date that the reference entity has to fulfil its obligations before a failure to pay credit event is deemed to have occurred. ISDA 2003 Term: Grace Period.">

type Knock: <"Knock In means option to exercise comes into existence. Knock Out means option to exercise goes out of existence.">

	knockIn TriggerEvent (0..1) <"The knock in.">
	knockOut TriggerEvent (0..1) <"The knock out.">

type MarketDisruption: <"Defines the handling of an averaging date market disruption for an equity derivative transaction.">

	value Scheme (1..1)
	marketDisruptionScheme NonEmptyURI (0..1)

type NotifyingParty:

	buyerPartyReference PartyReference (1..1)
	sellerPartyReference PartyReference (0..1)

type Option extends Product: <"A type for defining the common features of options. Buyer/seller information is not normally used in Transparency view but is optional in case the information is needed for administrative purposes such as Reporting Party determination.">

	buyerSellerModel BuyerSellerModel (1..1)

type OptionBase extends Option: <"A type for defining the common features of options.">

	optionType OptionTypeEnum (1..1) <"The type of option transaction. From a usage standpoint, put/call is the default option type, while payer/receiver indicator is used for options index credit default swaps, consistently with the industry practice. Straddle is used for the case of straddle strategy, that combine a call and a put with the same strike.">

type OptionBaseExtended extends OptionBase: <"Base type for options starting with the 4-3 release, until we refactor the schema as part of the 5-0 release series.">

	premium Premium (0..1) <"The option premium payable by the buyer to the seller.">
	exercise Exercise (1..1)
	exerciseProcedure ExerciseProcedure (1..1) <"A set of parameters defining procedures associated with the exercise.">
	feature OptionFeature (0..1) <"An Option feature such as quanto, asian, barrier, knock.">
	notionalReference NotionalAmountReference (0..1)
	notionalAmount Money (0..1)
	optionDenominationModel OptionDenominationModel (0..1)
	optionSettlementModel OptionSettlementModel (1..1)

	condition Choice:
		optional choice notionalReference, notionalAmount

type OptionFeature: <"A type for defining option features.">

	optionBaseFeatureModel OptionBaseFeatureModel (1..1)
	optionFeatureModel OptionFeatureModel (1..1)

type OptionNumericStrike: <"A type for defining the strike price for an option as a numeric value without currency.">

	strikePrice number (0..1) <"The price or level at which the option has been struck.">
	strikePercentage number (0..1) <"The price or level expressed as a percentage of the forward starting spot price.">

	condition Choice:
		one-of

type OptionStrike extends OptionNumericStrike: <"A type for defining the strike price for an equity option. The strike price is either: (i) in respect of an index option transaction, the level of the relevant index specified or otherwise determined in the transaction; or (ii) in respect of a share option transaction, the price per share specified or otherwise determined in the transaction. This can be expressed either as a percentage of notional amount or as an absolute value.">

	currency Currency (0..1) <"The currency in which an amount is denominated.">

type PassThrough: <"Type which contains pass through payments.">

	passThroughItem PassThroughItem (1..*) <"One to many pass through payment items.">

type PassThroughItem: <"Type to represent a single pass through payment.">

	payerReceiverModel PayerReceiverModel (1..1)
	underlyerReference AssetReference (1..1) <"Reference to the underlyer whose payments are being passed through.">
	passThroughPercentage number (1..1) <"Percentage of payments from the underlyer which are passed through.">

type Premium extends SimplePayment: <"A type for defining a premium.">

	premiumModel PremiumModel (0..1)
	paymentDiscountingModel PaymentDiscountingModel (0..1)

type PubliclyAvailableInformation:

	standardPublicSources boolean (0..1) <"If this element is specified and set to \'true\', indicates that ISDA defined Standard Public Sources are applicable.">
	publicSource String (0..*) <"A public information source, e.g. a particular newspaper or electronic news service, that may publish relevant information used in the determination of whether or not a credit event has occurred. ISDA 2003 Term: Public Source.">
	specifiedNumber int(min: 1) (0..1) <"The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two. ISDA 2003 Term: Specified Number.">

type Quanto: <"Determines the currency rate that the seller of the equity amounts will apply at each valuation date for converting the respective amounts into a currency that is different from the currency denomination of the underlyer.">

	fxRate FxRate (0..*) <"Specifies a currency conversion rate.">
	fxSpotRateSource FxSpotRateSource (0..1) <"Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.">

type Restructuring:

	applicable boolean (1..1) <"Indicates whether the restructuring provision is applicable.">
	restructuringType RestructuringType (0..1) <"Specifies the type of restructuring that is applicable.">
	multipleHolderObligation boolean (0..1) <"In relation to a restructuring credit event, unless multiple holder obligation is not specified restructurings are limited to multiple holder obligations. A multiple holder obligation means an obligation that is held by more than three holders that are not affiliates of each other and where at least two thirds of the holders must agree to the event that constitutes the restructuring credit event. ISDA 2003 Term: Multiple Holder Obligation.">
	multipleCreditEventNotices boolean (0..1) <"Presence of this element and value set to \'true\' indicates that Section 3.9 of the 2003 Credit Derivatives Definitions shall apply. Absence of this element indicates that Section 3.9 shall not apply. NOTE: Not allowed under ISDA Credit 1999.">

type RestructuringType:

	value Scheme (1..1)
	restructuringScheme NonEmptyURI (0..1)

type SettlementTerms:

	settlementCurrency Currency (0..1) <"ISDA 2003 Term: Settlement Currency">
	id string (0..1)

type StrategyFeature: <"A type for definining equity option simple strike or calendar spread strategy features.">

	strikeSpread StrikeSpread (0..1) <"Definition of the upper strike in a strike spread.">
	calendarSpread CalendarSpread (0..1) <"Definition of the later expiration date in a calendar spread.">

	condition Choice:
		one-of

type StrikeSpread: <"A type for defining a strike spread feature.">

	upperStrike OptionStrike (1..1) <"Upper strike in a strike spread.">
	upperStrikeNumberOfOptions PositiveDecimal (1..1) <"Number of options at the upper strike price in a strike spread.">

type Trigger: <"Trigger point at which feature is effective.">

	level number (0..1) <"The trigger level.">
	levelPercentage number (0..1) <"The trigger level percentage.">
	triggerChoice TriggerChoice (0..1)
	triggerType TriggerTypeEnum (0..1) <"The Triggering condition.">
	triggerTimeType TriggerTimeTypeEnum (0..1) <"The valuation time type of knock condition.">

	condition Choice:
		required choice level, levelPercentage , triggerChoice

type TriggerChoice:

	creditEvents CreditEvents (0..1)
	creditEventsReference CreditEventsReference (0..1)

	condition Choice:
		one-of

type TriggerEvent: <"Observation point for trigger.">

	schedule AveragingSchedule (0..*) <"A Equity Derivative schedule.">
	triggerDates DateList (0..1) <"The trigger Dates.">
	trigger Trigger (1..1) <"The trigger level.">
	featurePayment FeaturePayment (0..1) <"The feature payment.">

type WeightedAveragingObservation: <"A single weighted averaging observation.">

	dateTime zonedDateTime (0..1) <"Observation date time, which should be used when literal observation dates are required.">
	observationNumber int(min: 1) (0..1) <"Observation number, which should be unique, within a series generated by a date schedule.">
	weight NonNegativeDecimal (1..1) <"Observation weight, which is used as a multiplier for the observation value.">

	condition Choice:
		required choice dateTime, observationNumber

type OptionBaseFeatureModel: <"A model group containing Option Base Feature Elements.">

	fxFeature FxFeature (0..1) <"A quanto or composite FX feature.">
	strategyFeature StrategyFeature (0..1) <"A simple strategy feature.">

type OptionDenominationModel: <"A model group containing the option denomination components.">

	optionEntitlement PositiveDecimal (1..1) <"The number of units of underlyer per option comprised in the option transaction.">
	entitlementCurrency Currency (0..1) <"TODO">
	numberOfOptions PositiveDecimal (0..1) <"The number of options comprised in the option transaction.">

type OptionFeatureModel: <"A model group containing Option Base Feature Elements.">

	asian Asian (0..1) <"An option where and average price is taken on valuation.">
	barrier Barrier (0..1) <"An option with a barrier feature.">
	knock Knock (0..1) <"A knock feature.">
	passThrough PassThrough (0..1) <"Pass through payments from the underlyer, such as dividends.">

type OptionSettlementModel: <"A group which has Option Settlement elements.">

	settlementType SettlementTypeEnum (0..1)
	settlementDate AdjustableOrRelativeDate (0..1)
	settlementAmountOrCurrencyModel SettlementAmountOrCurrencyModel (0..1)

type AbstractEvent: <"Abstract base type for all events.">

	eventIdentifier BusinessEventIdentifier (0..*)

type ActionOnExpiration:

	optionExerciseAmountModel OptionExerciseAmountModel (1..1)

type AdditionalEvent extends AbstractEvent: <"Abstract base type for an extension/substitution point to customize FpML and add additional events.">

type AmountRef: <"A type defining a nominal amount with a reference.">

	amount PositiveDecimal (1..1)
	amountReference AmountReference (0..1)

type BasketChangeEvent extends ChangeEvent: <"A structure indicating that the basket underlyer of the trade has changed due to client trading activity">

type BusinessEventIdentifier: <"A type defining an event identifier issued by the indicated party.">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	eventId EventId (1..1)
	id string (0..1)

type ClearingStatusItem: <"A component of a clearing status report. This provides the clearing status for a single trade.">

	tradeIdentifier TradeIdentifier (0..*) <"Identifier(s) for the trade which is the subject of the clearing request to which this status relates.">
	tradeReferenceInformationModel TradeReferenceInformationModel (0..1)
	trade Trade (0..1) <"Complete economics of the trade">
	tradePackage TradePackage (0..1)
	clearingStatusValue ClearingStatusValue (1..1) <"The status of the clearing process for the identified trade. For example, Received, Pending (Approval), Registered (i.e. cleared), Rejected, etc.">
	updatedDateTime zonedDateTime (0..1) <"When the clearing status changed to the current value. This is mostly useful if the clearing status messages could be delayed from when the status actually changes; this could be important if the status date is used as the basis of any settlement calculations.">
	reason Reason (0..*) <"Supporting information which may be produced to explain the clearing process status. This may be a business reason e.g. failed eligibility criteria for a trade in Rejected status.">
	statusAppliesTo PartyReference (0..2) <"Reference to parties currently in this status, e.g. parties for which we are awaiting approval. For example, if a trade is in \"Pending\" status, this would identify which parties\' approval the trade was pending.">

	condition Choice:
		required choice tradeIdentifier, tradeReferenceInformationModel , trade , tradePackage

type ClearingInstructions:

	requestedClearingAction RequestedClearingAction (0..1)
	requestedClearingOrganizationPartyReference PartyReference (0..1)

type CompressionActivity: <"A type that shows how multiple trades have been combined into a result.">

	compressionType CompressionType (0..1)
	compressionActivitySequence0 CompressionActivitySequence0 (0..1)
	compressionActivitySequence1 CompressionActivitySequence1 (0..1)

	condition Choice:
		required choice compressionActivitySequence0, compressionActivitySequence1

type CompressionActivitySequence0:

	replacementTradeIdentifier TradeIdentifier (0..1)
	originatingTradeIdentifier TradeIdentifier (0..*)

type CompressionActivitySequence1:

	replacementTradeId TradeId (0..1)
	originatingTradeId TradeId (0..*)

type CompressionType: <"A type that identifies the type of trade amalgamation, for example netting or portfolio compression.">

	value Scheme (1..1)
	compressionTypeScheme NonEmptyURI (0..1)

type CorporateActionEvent extends ChangeEvent: <"A structure indicating that a trade has changed due to a corporate action">

	_type CorporateActionType (0..1)

type CorporateActionType: <"A type that describes what type of corporate action occurred.">

	value Scheme (1..1)
	corporateActionScheme NonEmptyURI (0..1)

type CreditLimitBase: <"A structure describing a basic credit limit.">

	limitId LimitId (1..1)
	productModel ProductModel (1..1)
	currency Currency (1..1)
	tenor Period (1..1) <"The maximum allowed tenor for a trade under this limit. When this structure is used as part of a suspendCredit message, this tenor imposes a temporary tenor limit on allowed trade types.">

type CreditLimit extends CreditLimitBase: <"A structure describing a credit limit with applicability constraints.">

	limitApplicable LimitApplicable (1..*)
	expirationDate zonedDateTime (0..1)

type CreditLimitInformation:

	partyInformation PartyTradeInformation (1..1)
	limitModel LimitModelEnum (1..1)
	creditLimit CreditLimit (1..*)

type CreditLimitUtilization:

	executed CreditLimitUtilizationPosition (1..1) <"Credit limit utilization attributable to executed trades.">
	pending CreditLimitUtilizationPosition (1..1) <"Credit limit utilization attributable to pending unexecuted orders.">

type CreditLimitUtilizationPosition:

	creditLimitUtilizationPositionSequence CreditLimitUtilizationPositionSequence (0..1)
	global NonNegativeDecimal (0..1) <"Global credit limit utilization amount, agnostic of long/short position direction.">

	condition Choice:
		one-of

type CreditLimitUtilizationPositionSequence:

	short NonNegativeDecimal (1..1) <"Credit limit utilization attributable to short positions.">
	long NonNegativeDecimal (1..1) <"Credit limit utilization attributable to long positions.">
	global NonNegativeDecimal (0..1) <"Global credit limit utilization amount, agnostic of long/short position direction.">

type DeClear: <"A structure describing a declear event. The deClear event allows a firm to request that a trade be removed from clearing, or a clearing service to request consent for this, or to report that is has been done.">

	tradeIdentifier PartyTradeIdentifier (1..*)
	effectiveDate date (1..1)
	reason DeclearReason (0..1)

type DeclearReason: <"A type that describes why a trade was removed from clearing.">

	value Scheme (1..1)
	declearReasonScheme NonEmptyURI (0..1)

type EventId: <"A post-trade event reference identifier allocated by a party. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">

	value NonEmptyScheme (1..1)
	eventIdScheme NonEmptyURI (0..1)
	id string (0..1)

type EventProposedMatch: <"A structure that describes a proposed match between trades or post-trade event reports.">

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	postTradeEventsBaseModel PostTradeEventsBaseModel (0..1)
	changeEventsBaseModel ChangeEventsBaseModel (0..1)
	optionsEventsBaseModel OptionsEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)
	proposedMatchModel ProposedMatchModel (1..1)

	condition Choice:
		required choice tradingEventsBaseModel, postTradeEventsBaseModel , changeEventsBaseModel , optionsEventsBaseModel , additionalEvent

type EventsChoice:

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	postTradeEventsBaseModel PostTradeEventsBaseModel (0..1)
	changeEventsBaseModel ChangeEventsBaseModel (0..1)
	optionsEventsBaseModel OptionsEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)

	condition Choice:
		one-of

type KnockOutRateObservation extends TriggerRateObservation: <"Describes an observation that caused a barrier knock out to trigger">

	rebatePayment NonNegativePayment (0..1) <"Any rebate payable as a result of the knock out">

type MoneyRef extends PositiveMoney: <"A type defining a currency amount with a reference.">

	notionalReference NotionalReference (1..1) <"A pointer style reference to the associated notional schedule defined elsewhere in the document.">

type NoTouchLowerBarrierObservation:

	noTouchLowerBarrierObservationSequence0 NoTouchLowerBarrierObservationSequence0 (0..1)
	noTouchLowerBarrierObservationSequence1 NoTouchLowerBarrierObservationSequence1 (0..1)

	condition Choice:
		one-of

type NoTouchLowerBarrierObservationSequence0:

	triggerRate number (1..1) <"The rate value (level) which was attained/breached, in order to trigger the barrier event.">
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the currency pair and quote basis for an FX rate.">
	minimumObservedRate ObservedRate (0..1) <"The minimum value observed during the condition period.">

type NoTouchLowerBarrierObservationSequence1:

	triggerPrice PositiveMoney (1..1) <"The price value (level) which was attained/breached, in order to trigger the barrier event.">
	minimumObservedPrice ObservedPrice (0..1) <"The minimum value observed during the condition period">

type NoTouchRateObservation:

	observationStartDate date (1..1)
	observationEndDate date (1..1)
	noTouchRateObservationSequence0 NoTouchRateObservationSequence0 (0..1)
	upperBarrier NoTouchUpperBarrierObservation (0..1)
	noTouchRateObservationSequence1 NoTouchRateObservationSequence1 (0..1)
	isExercisable boolean (0..1) <"If the touch or no touch event hasn\'t generated an exercise, then we specify whether the option is exercisable or not.">

	condition Choice0:
		required choice noTouchRateObservationSequence0, upperBarrier

	condition Choice1:
		required choice noTouchRateObservationSequence1, isExercisable

type NoTouchRateObservationSequence0:

	lowerBarrier NoTouchLowerBarrierObservation (1..1)
	upperBarrier NoTouchUpperBarrierObservation (0..1)

type NoTouchRateObservationSequence1:

	exerciseSide ExerciseSideEnum (0..1)
	settlementType SettlementTypeEnum (0..1)
	cashSettlement SimplePayment (0..1)
	physicalSettlement PhysicalSettlement (0..1)
	payment NonNegativePayment (0..1)
	clearingInstructions ClearingInstructions (0..1)

	condition Choice:
		required choice settlementType, cashSettlement , physicalSettlement

type NoTouchUpperBarrierObservation:

	noTouchUpperBarrierObservationSequence0 NoTouchUpperBarrierObservationSequence0 (0..1)
	noTouchUpperBarrierObservationSequence1 NoTouchUpperBarrierObservationSequence1 (0..1)

	condition Choice:
		one-of

type NoTouchUpperBarrierObservationSequence0:

	triggerRate number (1..1) <"The rate value (level) which was attained/breached, in order to trigger the barrier event.">
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the currency pair and quote basis for an FX rate.">
	maximumObservedRate ObservedRate (0..1) <"The maximum value observed during the condition period">

type NoTouchUpperBarrierObservationSequence1:

	triggerPrice PositiveMoney (1..1) <"The price value (level) which was attained/breached, in order to trigger the barrier event.">
	maximumObservedPrice ObservedPrice (0..1) <"The maximum value observed during the condition period">

type LimitApplicable:

	limitType LimitType (1..1) <"Standard code to indicate which type of credit line is being referred to - i.e. IM, DV01, PV01, CS01, Notional, Clip Size, Notional, maximumOrderQuantity">
	clipSize int (1..1)
	amountUtilized int (0..1)
	utilization CreditLimitUtilization (0..1) <"Credit limit utilization breakdown by executed trades and pending orders.">
	amountRemaining int (0..1)
	currency Currency (0..1)
	velocity Velocity (0..1)

	condition Choice:
		optional choice amountUtilized, utilization

type LimitId:

	value NonEmptyScheme (1..1)
	creditLimitIdScheme NonEmptyURI (0..1)

type LimitType:

	value Scheme (1..1)
	creditLimitTypeScheme NonEmptyURI (0..1)

type ObservedPrice:

	price NonNegativeMoney (1..1) <"The observed rate value which triggered the barrier event.">
	date date (0..1) <"The date when the rate was observed.">
	time time (0..1) <"The time when the rate ws observed.">
	informationSource InformationSource (0..1) <"The source of the observation.">

type ObservedRate:

	rate number (1..1) <"The observed rate value which triggered the barrier event.">
	date date (0..1) <"The date when the rate was observed.">
	time time (0..1) <"The time when the rate ws observed.">
	informationSource InformationSource (0..1) <"The source of the observation.">

type OptionEvent extends AbstractEvent:

	originalTrade Trade (0..1) <"Fully describes the original trade (prior to the exercise).">
	tradeIdentifier PartyTradeIdentifier (0..*) <"Identified the trade to which the option event applies.">
	knockIn TriggerRateObservation (0..1) <"A structure describing a barrier knock in event">
	knockOut KnockOutRateObservation (0..1) <"A structure describing a barrier knock out event">
	touch TouchRateObservation (0..2) <"A structure describing a touch event">
	noTouch NoTouchRateObservation (0..1) <"A structure describing the outcome of an option having no touch events">

	condition Choice0:
		required choice originalTrade, tradeIdentifier

	condition Choice1:
		required choice knockIn, knockOut , touch , noTouch

type OptionExercise extends AbstractEvent: <"A structure describing an option exercise. The OptionExercise type supports partial exercise (specify the number of options or amount to exercise), full exercise (use fullExercise flag), as well as the option to request options not to be exercised.">

	optionSeller PartyReference (0..1)
	optionBuyer PartyReference (0..1)
	originalTrade Trade (0..1) <"Fully describes the original trade (prior to the exercise).">
	tradeIdentifier PartyTradeIdentifier (0..*)
	optionExerciseSequence OptionExerciseSequence (0..1)
	exerciseTiming ExerciseTimingEnum (0..1)
	optionExerciseAmountModel OptionExerciseAmountModel (1..1)
	exerciseSide ExerciseSideEnum (0..1)
	settlementType SettlementTypeEnum (0..1)
	cashSettlement SimplePayment (0..1)
	physicalSettlement PhysicalSettlement (0..1)
	payment NonNegativePayment (0..1)
	clearingInstructions ClearingInstructions (0..1)

	condition Choice0:
		required choice originalTrade, tradeIdentifier

	condition Choice1:
		required choice optionExerciseSequence, exerciseTiming

	condition Choice2:
		optional choice settlementType, cashSettlement , physicalSettlement

type OptionExerciseSequence:

	exerciseDate date (0..1)
	exerciseTime time (0..1)

type OptionExerciseAmounts:

	optionExerciseAmountsSequence0 OptionExerciseAmountsSequence0 (0..1)
	optionExerciseAmountsSequence1 OptionExerciseAmountsSequence1 (0..1)
	optionExerciseAmountsSequence2 OptionExerciseAmountsSequence2 (0..1)
	optionExerciseAmountsSequence3 OptionExerciseAmountsSequence3 (0..1)

	condition Choice:
		one-of

type OptionExerciseAmountsSequence0:

	notionalReference NotionalReference (0..1)
	exerciseInNotionalAmount Money (1..1) <"Specifies the fixed amount by which the option should be exercised expressed as notional amount.">
	outstandingNotionalAmount Money (0..1) <"Specifies the Notional amount after the Change">

type OptionExerciseAmountsSequence1:

	notionalScheduleReference NotionalReference (0..1)
	exerciseInNotionalSchedule NonNegativeAmountSchedule (1..1) <"Specifies the amount by which the option should be exercised expressed as notional schedule.">
	outstandingNotionalSchedule NonNegativeAmountSchedule (0..1) <"Specifies the Notional schedule after the Change">

type OptionExerciseAmountsSequence2:

	numberOfOptionsReference NumberOfOptionsReference (0..1)
	exerciseInNumberOfOptions number (1..1) <"Specifies the fixed amount by which the option should be exercised expressed as number of options.">
	outstandingNumberOfOptions number (0..1) <"Specifies the Number of Options after the Change.">

type OptionExerciseAmountsSequence3:

	numberOfUnitsReference NumberOfUnitsReference (0..1)
	exerciseInNumberOfUnits number (1..1) <"Specifies the fixed amount by which the option should be exercised express as number of units.">
	outstandingNumberOfUnits number (0..1) <"Specifies the Number of Units">

type OptionExpiry extends AbstractEvent: <"A structure describing an option expiring (i.e. passing its last exercise time and becoming worthless.)">

	originalTrade Trade (0..1) <"Fully describes the original trade (prior to the exercise).">
	tradeIdentifier PartyTradeIdentifier (0..*)
	date date (1..1)
	time time (1..1)
	exerciseProcedure ExerciseProcedureOption (0..1)
	actionOnExpiration ActionOnExpiration (0..1)

	condition Choice:
		required choice originalTrade, tradeIdentifier

type OptionExpiryBase: <"A structure describing an option expiring.">

	tradeIdentifier PartyTradeIdentifier (1..*)
	date date (1..1)
	time time (1..1)

type PackageHeader: <"Identifying information for a tradePackage (a bundle of trades).">

	packageIdentifier IssuerTradeId (0..1)
	orderIdentifier OrderIdentifier (0..1)
	packageType PackageType (0..*) <"Classification of the package. FpML has defined a list of coding scheme values. Different organizations might have different naming schemes for the packages so the multiplicity of unbounded is meant to support synonyms but it does not mean that a trade has multiple package types.">
	size PositiveDecimal (0..1)
	originatingEvent OriginatingEvent (0..1) <"This may be used to describe why a package was created. This can be used to provide context for a newly created package that is not part of a post-trade event. For example, it can report that the package was created as a result of netting activity, or due to a transfer, an allocation process, etc.">
	packageInformation PackageInformation (0..1)

type PhysicalSettlement: <"A structure that describes how an option settles into a physical trade.">

	resultingTradeIdentifier PartyTradeIdentifier (0..1) <"The ID of the trade that resulted from the physical settlement.">
	resultingTrade Trade (0..1) <"The trade that resulted from the physical settlement.">
	product Product (0..1)

	condition Choice:
		one-of

type ReportingRegimeIdentifier: <"A type that provides identification for reporting regimes.">

	reportingRegimeIdentifierSequence ReportingRegimeIdentifierSequence (0..1)
	supervisorRegistration SupervisorRegistration (0..*) <"Identifies the specific regulator or other supervisory body for which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC, ESMA.">
	reportingRole ReportingRole (0..1) <"Identifies the role of this party in reporting this trade for this regulator; roles could include ReportingParty and Voluntary reporting.">
	actionType ActionType (0..1) <"Reports a regulator-specific code for the action associated with this submission. Used, for example, to report the ESMA action type.">

	condition Choice:
		required choice reportingRegimeIdentifierSequence, supervisorRegistration

type ReportingRegimeIdentifierSequence:

	name ReportingRegimeName (1..1) <"Identifies the reporting regime under which this data is reported. For example, Dodd-Frank, MiFID, HongKongOTCDRepository, ODRF">
	supervisorRegistration SupervisorRegistration (0..*) <"Identifies the specific regulator or other supervisory body for which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC, ESMA.">

type RequestedClearingAction: <"A type that describes whether a trade is to be cleared.">

	value Scheme (1..1)
	requestedClearingActionScheme NonEmptyURI (0..1)

type RequestedWithdrawalAction: <"A type that describes what the requester would like to see done to implement the withdrawal, e.g. ExpungeRecords, RetainRecords.">

	value Scheme (1..1)
	requestedWithdrawalActionScheme NonEmptyURI (0..1)

type TerminatingEvent: <"A type that describes why a trade terminated.">

	value Scheme (1..1)
	terminatingEventScheme NonEmptyURI (0..1)

type TradeAmendmentContent extends AbstractEvent: <"A structure describing a negotiated amendment.">

	trade Trade (1..1) <"A full description of the amended trade (i.e. the trade after the amendment).">
	agreementAndEffectiveDatesModel AgreementAndEffectiveDatesModel (1..1)
	reportingNotionalChangeModel ReportingNotionalChangeModel (0..1)
	tradeAlterationPaymentModel TradeAlterationPaymentModel (1..1)

type TradeChangeBase extends AbstractEvent: <"A structure describing a trade change.">

	tradeIdentifier PartyTradeIdentifier (0..*)
	originalTrade Trade (0..1)
	resultingTrade Trade (0..1)
	agreementAndEffectiveDatesModel AgreementAndEffectiveDatesModel (1..1)
	tradeAlterationPaymentModel TradeAlterationPaymentModel (1..1)

	condition Choice:
		required choice tradeIdentifier, originalTrade

type TradeChangeContent: <"A structure describing a non-negotiated trade resulting from a market event.">

	oldTradeIdentifier PartyTradeIdentifier (0..1) <"The original qualified trade identifier.">
	oldTrade Trade (0..1) <"The original trade details.">
	trade Trade (1..1) <"A full description of the amended trade.">
	effectiveDate date (1..1) <"The date on which the change become effective">
	changeEvent ChangeEvent (1..1)
	payment Payment (0..1) <"Describes a payment made in settlement of the change.">

	condition Choice:
		optional choice oldTradeIdentifier, oldTrade

type TradeLegPriceChange: <"A structure describing a change to the size of a single leg or stream of a trade.">

	priceReference Reference (0..1)
	instrumentId InstrumentId (0..*) <"Identification of the underlying asset, using public and/or private identifiers.">
	priceChangeAmount number (1..1)
	newPrice number (1..1)

	condition Choice:
		required choice priceReference, instrumentId

type TradeLegSizeChange: <"A structure describing a change to the size of a single leg or stream of a trade.">

	tradeLegNotionalChangeModel TradeLegNotionalChangeModel (0..1)
	tradeLegNumberOfOptionsChangeModel TradeLegNumberOfOptionsChangeModel (0..1)
	tradeLegNumberOfUnitsChangeModel TradeLegNumberOfUnitsChangeModel (0..1)
	tradeLegNotionalScheduleChangeModel TradeLegNotionalScheduleChangeModel (0..1)
	tradeLegFixedAmountChangeModel TradeLegFixedAmountChangeModel (0..1)

	condition Choice:
		one-of

type TradeMaturity: <"A structure describing a trade maturing.">

	tradeIdentifier PartyTradeIdentifier (1..*)
	date date (1..1)

type TradeNotionalChange extends TradeChangeBase: <"A structure describing a change to the size of a trade.">

	tradeNotionalChangeModel TradeNotionalChangeModel (0..1)
	sizeChange TradeLegSizeChange (0..*)
	priceChange TradeLegPriceChange (0..*)

	condition Choice:
		required choice tradeNotionalChangeModel, sizeChange

type TradeNovationContent extends AbstractEvent: <"A structure describing a novation.">

	newTradeModel NewTradeModel (0..1)
	tradeNovationContentSequence0 TradeNovationContentSequence0 (0..1)
	tradeNovationContentSequence1 TradeNovationContentSequence1 (0..1)
	novationRolesModel NovationRolesModel (1..1)
	novationDatesModel NovationDatesModel (1..1)
	novationAmountsModel NovationAmountsModel (1..1)
	novationTermsModel NovationTermsModel (1..1)
	payment Payment (0..1) <"Describes a payment made in settlement of the novation.">

	condition Choice:
		required choice newTradeModel, tradeNovationContentSequence0 , tradeNovationContentSequence1

type TradeNovationContentSequence0:

	oldTradeModel OldTradeModel (1..1)
	feeTradeModel FeeTradeModel (0..1)
	newTradeModel NewTradeModel (0..1)

type TradeNovationContentSequence1:

	feeTradeModel FeeTradeModel (1..1)
	newTradeModel NewTradeModel (0..1)

type TradePackage: <"A bundle of trades collected together into a single unit for reporting.">

	packageHeader PackageHeader (0..1)
	trade Trade (0..*)
	tradeReferenceInformationModel TradeReferenceInformationModel (0..*)
	tradeIdentifier TradeIdentifier (0..*)
	approvals Approvals (0..1) <"A container for approval states in the workflow.">

	condition Choice:
		required choice trade, tradeReferenceInformationModel , tradeIdentifier

type TradeReferenceInformation: <"Defines a type that allows trade identifiers and/or trade information to be represented for a trade.">

	originatingEvent OriginatingEvent (0..1) <"This may be used to describe why a trade was created. This can be used to provide context for a newly created trade that is not part of a post-trade event. For example, it can report that the trade was created as a result of netting activity, or due to a transfer, an allocation process, etc. Omitting this implies that the trade record was created as a result of a negotiated new trade.">
	terminatingEvent TerminatingEvent (0..1) <"This may be used to describe why a trade was terminated.">
	partyTradeIdentifier PartyTradeIdentifier (1..*) <"This allows the acknowledging party to supply additional trade identifiers for a trade underlying a request relating to a business event.">
	partyTradeInformation PartyTradeInformation (0..*) <"This allows the acknowledging party to supply additional trade information about a trade underlying a request relating to a business event.">
	productType ProductType (0..1)
	productId ProductId (0..1)

	condition Choice:
		optional choice originatingEvent, terminatingEvent

type TouchRateObservation extends TriggerRateObservation:

	touchRateObservationSequence TouchRateObservationSequence (0..1)
	isExercisable boolean (0..1) <"If the touch or no touch event hasn\'t generated an exercise, then we specify whether the option is exercisable or not.">

	condition Choice:
		required choice touchRateObservationSequence, isExercisable

type TouchRateObservationSequence:

	exerciseSide ExerciseSideEnum (0..1)
	settlementType SettlementTypeEnum (0..1)
	cashSettlement SimplePayment (0..1)
	physicalSettlement PhysicalSettlement (0..1)
	payment NonNegativePayment (0..1)
	clearingInstructions ClearingInstructions (0..1)

	condition Choice:
		required choice settlementType, cashSettlement , physicalSettlement

type TriggerRateObservation:

	observationDate date (1..1) <"The date on which the rate observation occurred, in order to trigger the barrier event.observationDate">
	observationTime BusinessCenterTime (0..1) <"The time at which the observation occurred.">
	informationSource InformationSource (0..1)
	triggerRateObservationSequence0 TriggerRateObservationSequence0 (0..1)
	triggerRateObservationSequence1 TriggerRateObservationSequence1 (0..1)
	triggerCondition TriggerConditionEnum (1..1) <"The side of the trigger rate/price (level) on which a rate observation occurred, in order to trigger the barrier event.">

	condition Choice:
		required choice triggerRateObservationSequence0, triggerRateObservationSequence1

type TriggerRateObservationSequence0:

	triggerRate number (1..1) <"The rate value (level) which was attained/breached, in order to trigger the barrier event.">
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the currency pair and quote basis for an FX rate.">
	observedRate number (0..1) <"The observed rate value which triggered the barrier event.">

type TriggerRateObservationSequence1:

	triggerPrice PositiveMoney (1..1) <"The price value (level) which was attained/breached, in order to trigger the barrier event.">
	observedPrice PositiveMoney (0..1) <"The observed price value which triggered the barrier event.">

type Velocity:

	periodMultiplier int (1..1)
	period PeriodTimeEnum (1..1)

type Withdrawal: <"A structure describing the removal of a trade from a service, such as a reporting service.">

	withdrawalSequence WithdrawalSequence (0..1)
	trade Trade (0..1) <"The full trade representation that is being withdrawn.">
	effectiveDate date (1..1)
	requestedAction RequestedWithdrawalAction (0..1)
	reason WithdrawalReason (0..*)
	reportingRegime ReportingRegimeIdentifier (0..*) <"DEPRECATED. The supervisor/regulator to which this withdrawal applies">

	condition Choice:
		required choice withdrawalSequence, trade

type WithdrawalSequence:

	partyTradeIdentifier PartyTradeIdentifier (1..*) <"Identifiers of the trade that is being withdrawn.">
	partyTradeInformation WithdrawalPartyTradeInformation (0..*) <"Holds party-specific information about the trade that is being withdrawn from.">

type WithdrawalPartyTradeInformation: <"A type defining party-specific additional information that may be recorded against a trade, for withdrawal purposes.">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	relatedParty RelatedParty (0..*) <"This may be used to identify one or more parties that perform a role within the transaction. If this is within a partyTradeInformation block, the related party performs the role with respect to the party identifie by the \"partyReference\" in the partyTradeInformation block.">
	reportingRegime ReportingRegimeIdentifier (0..*) <"Allows the organization to specify which if any relevant regulators or other supervisory bodies this is relevant for, and what reporting rules apply.">

type WithdrawalReason: <"A type that describes why a trade was withdrawn.">

	value Scheme (1..1)
	withdrawalReasonScheme NonEmptyURI (0..1)

type AgreementAndEffectiveDatesModel: <"A model group defining agreement and effective dates.">

	agreementDate date (1..1) <"The date on which the change was agreed.">
	executionDateTime ExecutionDateTime (0..1) <"The date and time at which the negotiated change to the terms of the original contract was agreed, such as via telephone or electronic trading system (i.e., agreement date/time).">
	effectiveDate date (1..1) <"The date on which the change become effective.">

type ChangeEventsBaseModel: <"Choice between change-related events.">

	change TradeChangeContent (1..1)

type CompressionModel: <"A model group holding information about compressions affecting this trade/event.">

	compressionActivity CompressionActivity (1..1) <"Compression information for the trade.">

type OptionsEventsBaseModel: <"Choice between options related events.">

	optionExercise OptionExercise (0..1) <"A structure describing an option exercise event. The optionExercise event supports partial exercise (specify the number of options or amount to exercise), full exercise (use fullExercise flag), as well as the option to request options not to be exercised.">
	optionExpiry OptionExpiry (0..*) <"A structure describing an option expiring event (i.e. passing its last exercise time and becoming worthless.)">
	optionEvent OptionEvent (0..1) <"A structure describing knock in, knock out, touch and no touch events.">

	condition Choice:
		one-of

type PostTradeEventsBaseModel: <"Choice between amendment, increase, termination, and novation events.">

	amendment TradeAmendmentContent (0..1)
	increase TradeNotionalChange (0..1)
	postTradeEventsBaseModelSequence PostTradeEventsBaseModelSequence (0..1)
	novation TradeNovationContent (0..1)
	withdrawal Withdrawal (0..1)

	condition Choice:
		one-of

type PostTradeEventsBaseModelSequence:

	terminatingEvent TerminatingEvent (0..1) <"This may be used to describe why a trade was terminated.">
	termination TradeNotionalChange (1..1)

type TradingAndPostTradeEventsModel: <"Choice between a trading, a post-trade event, and the extension point additional event">

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	postTradeEventsBaseModel PostTradeEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)

	condition Choice:
		one-of

type TradingEventsModel: <"Information about a trading event that represent a new trading activity (on a newly-created trade), or in some cases the a representation of the trade\'s current state. Also allows the \"additionEvent\" extension point.">

	tradingEventsBaseModel TradingEventsBaseModel (0..1)
	additionalEvent AdditionalEvent (0..1)

	condition Choice:
		one-of

type TradingEventsBaseModel: <"Information about a trading event that represents a new trading activity (on a newly-created trade or package of trades), or in some cases the a representation of the trade\'s current state..">

	tradePackage TradePackage (0..1)
	tradingEventsBaseModelSequence TradingEventsBaseModelSequence (0..1)

	condition Choice:
		one-of

type TradingEventsBaseModelSequence:

	originatingEvent OriginatingEvent (0..1)
	trade Trade (1..1)

type EventValuationModel: <"A model group holding valuation information for an event.">

	quote BasicQuotation (1..*) <"Pricing information for the trade.">

type FeeTradeModel:

	feeTradeIdentifier PartyTradeIdentifier (0..1) <"Indicates a reference to the implied trade (the \"fee trade\") that the associated novation fee based on. This is equivalent to the new trade that is created by the novation (between the transferee and the remaining party), but is between the transferor and the transferee.">
	feeTrade Trade (0..1) <"Indicates the original trade between the transferor and the remaining party.">

	condition Choice:
		one-of

type NewTradeModel:

	newTradeIdentifier PartyTradeIdentifier (0..*) <"Indicates a reference to the new trade between the transferee and the remaining party.">
	newTrade Trade (0..1) <"Indicates the new trade between the transferee and the remaining party.">

	condition Choice:
		one-of

type NovationAmountsModel:

	novationAmountsOldModel NovationAmountsOldModel (0..1)
	novationAmount TradeLegSizeChange (0..*)

	condition Choice:
		one-of

type NovationAmountsOldModel:

	novationAmountsOldModelSequence0 NovationAmountsOldModelSequence0 (0..1)
	novationAmountsOldModelSequence1 NovationAmountsOldModelSequence1 (0..1)
	novationAmountsOldModelSequence2 NovationAmountsOldModelSequence2 (0..1)

	condition Choice:
		one-of

type NovationAmountsOldModelSequence0:

	novatedAmount Money (1..*) <"The amount which represents the portion of the Old Contract being novated.">
	remainingAmount Money (0..*) <"The amount which represents the portion of the Old Contract not being novated.">

type NovationAmountsOldModelSequence1:

	novatedNumberOfOptions number (1..1) <"The number of options which represent the portion of the Old Contract being novated.">
	remainingNumberOfOptions number (0..1) <"The number of options which represent the portion of the Old Contract not being novated.">

type NovationAmountsOldModelSequence2:

	novatedNumberOfUnits number (1..1) <"The number of options which represent the portion of the Old Contract being novated.">
	remainingNumberOfUnits number (0..1) <"The number of options which represent the portion of the Old Contract not being novated.">

type NovationDatesModel:

	novationDate date (1..1) <"Specifies the date that one party\'s legal obligations with regard to a trade are transferred to another party. It corresponds to the Novation Date section of the 2004 ISDA Novation Definitions, section 1.16.">
	executionDateTime ExecutionDateTime (0..1) <"The date and time at which the change was agreed.">
	novationTradeDate date (0..1) <"Specifies the date the parties agree to assign or novate a Contract. If this element is not specified, the novationContractDate will be deemed to be the novationDate. It corresponds to the Novation Trade Date section of the 2004 ISDA Novation Definitions, section 1.17.">

type NovationRolesModel: <"The roles of the parties involved in the novation.">

	transferor PartyReference (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. In a three-way novation the party referenced is the Transferor (outgoing party) in the novation. The Transferor means a party which transfers by novation to a Transferee all of its rights, liabilities, duties and obligations with respect to a Remaining Party. In a four-way novation the party referenced is Transferor 1 which transfers by novation to Transferee 1 all of its rights, liabilities, duties and obligations with respect to Transferor 2. ISDA 2004 Novation Term: Transferor (three-way novation) or Transferor 1 (four-way novation).">
	transferorAccount AccountReference (0..1)
	transferee PartyReference (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. In a three-way novation the party referenced is the Transferee (incoming party) in the novation. Transferee means a party which accepts by way of novation all rights, liabilities, duties and obligations of a Transferor with respect to a Remaining Party. In a four-way novation the party referenced is Transferee 1 which accepts by way of novation the rights, liabilities, duties and obligations of Transferor 1. ISDA 2004 Novation Term: Transferee (three-way novation) or Transferee 1 (four-way novation).">
	otherTransferee PartyReference (0..1) <"A pointer style reference to a party identifier defined elsewhere in the document. In a five-way novation the party referenced is the Transferee\'s legal entity that is involved in the settlement of the fee leg of the novation transaction (this might be a different legal entity than the one that assumes the novation trade). NB: this element has been added pending confirmation of the business need/context in which it would be used, and might not appear in a subsequent draft of this schema.">
	transfereeAccount AccountReference (0..1)
	otherTransfereeAccount AccountReference (0..1)
	remainingParty PartyReference (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. In a three-way novation the party referenced is the Remaining Party in the novation. Remaining Party means a party which consents to a Transferor\'s transfer by novation and the acceptance thereof by the Transferee of all of the Transferor\'s rights, liabilities, duties and obligations with respect to such Remaining Party under and with respect of the Novated Amount of a transaction. In a four-way novation the party referenced is Transferor 2 per the ISDA definition and acts in the role of a Transferor. Transferor 2 transfers by novation to Transferee 2 all of its rights, liabilities, duties and obligations with respect to Transferor 1. ISDA 2004 Novation Term: Remaining Party (three-way novation) or Transferor 2 (four-way novation).">
	remainingPartyAccount AccountReference (0..1)
	otherRemainingParty PartyReference (0..1) <"A pointer style reference to a party identifier defined elsewhere in the document. This element is not applicable in a three-way novation and should be omitted. In a four-way novation the party referenced is Transferee 2. Transferee 2 means a party which accepts by way of novation the rights, liabilities, duties and obligations of Transferor 2. ISDA 2004 Novation Term: Transferee 2 (four-way novation).">
	otherRemainingPartyAccount AccountReference (0..1)

type NovationTermsModel: <"Documentation and other terms (such as date terms) specific to this novation event.">

	fullFirstCalculationPeriod boolean (0..1) <"This element corresponds to the applicability of the Full First Calculation Period as defined in the 2004 ISDA Novation Definitions, section 1.20.">
	firstPeriodStartDate FirstPeriodStartDate (0..2) <"Element that is used to be able to make sense of the “new transaction” without requiring reference back to the “old transaction”. In the case of interest rate products there are potentially 2 “first period start dates” to reference – one with respect to each party to the new transaction. For Credit Default Swaps there is just the one with respect to the party that is the fixed rate payer.">
	nonReliance Empty (0..1) <"This element corresponds to the non-Reliance section in the 2004 ISDA Novation Definitions, section 2.1 (c) (i). The element appears in the instance document when non-Reliance is applicable.">
	creditDerivativesNotices CreditDerivativesNotices (0..1) <"This element should be specified if one or more of either a Credit Event Notice, Notice of Publicly Available Information, Notice of Physical Settlement or Notice of Intended Physical Settlement, as applicable, has been delivered by or to the Transferor or the Remaining Party. The type of notice or notices that have been delivered should be indicated by setting the relevant boolean element value(s) to true. The absence of the element means that no Credit Event Notice, Notice of Publicly Available Information, Notice of Physical Settlement or Notice of Intended Physical Settlement, as applicable, has been delivered by or to the Transferor or the Remaining Party.">
	contractualDefinitions ContractualDefinitions (0..*) <"The definitions (such as those published by ISDA) that will define the terms of the novation transaction.">
	contractualTermsSupplement ContractualTermsSupplement (0..*) <"A contractual supplement (such as those published by ISDA) that will apply to the trade.">

type OldTradeModel:

	oldTradeIdentifier PartyTradeIdentifier (0..*) <"Indicates a reference to the original trade between the transferor and the remaining party.">
	oldTrade Trade (0..1) <"Indicates the original trade between the transferor and the remaining party.">

	condition Choice:
		one-of

type OptionExerciseAmountModel:

	exerciseAction ExerciseActionEnum (0..1)
	expiry boolean (0..1)
	fullExercise boolean (0..1)
	optionExerciseAmountModelSequence0 OptionExerciseAmountModelSequence0 (0..1)
	optionExerciseAmountModelSequence1 OptionExerciseAmountModelSequence1 (0..1)
	optionExerciseAmountModelSequence2 OptionExerciseAmountModelSequence2 (0..1)
	specifiedExercise OptionExerciseAmounts (0..*) <"Specifies the Number of Units">

	condition Choice:
		one-of

type OptionExerciseAmountModelSequence0:

	exerciseInNotionalAmount Money (1..1) <"Specifies the fixed amount by which the option should be exercised expressed as notional amount.">
	outstandingNotionalAmount Money (1..1) <"Specifies the Notional amount after the Change">

type OptionExerciseAmountModelSequence1:

	exerciseInNumberOfOptions number (1..1) <"Specifies the fixed amount by which the option should be exercised expressed as number of options.">
	outstandingNumberOfOptions number (1..1) <"Specifies the Number of Options after the Change.">

type OptionExerciseAmountModelSequence2:

	exerciseInNumberOfUnits number (1..1) <"Specifies the fixed amount by which the option should be exercised express as number of units.">
	outstandingNumberOfUnits number (1..1) <"Specifies the Number of Units">

type ProposedMatchModel: <"A structure that describes a potential match for a trade or event, together with descriptors of that match (quality, etc.).">

	matchId MatchId (0..1) <"A unique identifier assigned by the matching service to each set of matched positions.">
	difference TradeDifference (0..*) <"A type used to record the details of a difference between two sides of a business event.">
	matchScore number (0..1) <"Numeric score to represent the quality of the match.">

type ReportingNotionalChangeModel:

	notionalChange NotionalChangeEnum (0..1) <"Indication as to whether the transaction is an increase or decrease of notional of a derivative contract. Only applies when there is change in notional for a derivative contract">
	changeInNotional MoneyRef (0..*) <"The change in notional amount for a prior report as a result of this event. The current notional will be reported in the trade itself. This corresponds to MiFIR Nominal or Monetary amount values; these can be distinguished by the esmaNotionalType indicator.">
	changeInNumberOfOptions AmountRef (0..*) <"The change in nominal amount from a prior report as a result of this event. The current number of options will be reported in the trade itself. This corresponds to the MiFIR \"units\" value.">
	changeInQuantity UnitQuantityRef (0..*) <"The change in quantity(s) from a prior report as a result of this event. The current quantity will be reported in the trade itself. This corresponds to the MiFIR \"units\" value.">

	condition Choice:
		required choice changeInNotional, changeInNumberOfOptions , changeInQuantity

type TradeAlterationPaymentModel: <"A model group defining a payment structure.">

	payment Payment (0..*) <"Describes a payment made in settlement of the change. Normally there will be a single fee, but there could be additional payments such as principal exchanges resulting from the termination.">

type TradeLegFixedAmountChangeModel:

	knownAmountReference AmountReference (0..1)
	changeInKnownAmount NonNegativeMoney (1..1)
	outstandingKnownAmount NonNegativeMoney (1..1)

type TradeLegNotionalChangeModel:

	notionalReference NotionalReference (0..1)
	changeInNotionalAmount NonNegativeMoney (1..1)
	outstandingNotionalAmount NonNegativeMoney (1..1)

type TradeLegNotionalScheduleChangeModel:

	notionalScheduleReference NotionalReference (0..1)
	changeInNotionalSchedule NonNegativeAmountSchedule (1..1)
	outstandingNotionalSchedule NonNegativeAmountSchedule (1..1)

type TradeLegNumberOfOptionsChangeModel:

	numberOfOptionsReference NumberOfOptionsReference (0..1)
	changeInNumberOfOptions number (1..1)
	outstandingNumberOfOptions number (1..1)

type TradeLegNumberOfUnitsChangeModel:

	numberOfUnitsReference NumberOfUnitsReference (0..1)
	changeInNumberOfUnits number (1..1)
	outstandingNumberOfUnits number (1..1)

type TradeNotionalChangeModel: <"DEPRECATED. A structure describing a change to the trade notional.">

	tradeNotionalChangeModelSequence0 TradeNotionalChangeModelSequence0 (0..1)
	tradeNotionalChangeModelSequence1 TradeNotionalChangeModelSequence1 (0..1)
	tradeNotionalChangeModelSequence2 TradeNotionalChangeModelSequence2 (0..1)

	condition Choice:
		one-of

type TradeNotionalChangeModelSequence0:

	changeInNotionalAmount NonNegativeMoney (1..*) <"Specifies the fixed amount by which the Notional Amount changes. The direction of the change (increase or decrease) is specified by the event type (Termination =&gt; reduction, Increase =&gt; greater.)">
	outstandingNotionalAmount NonNegativeMoney (1..*) <"Specifies the Notional amount after the Change">

type TradeNotionalChangeModelSequence1:

	changeInNumberOfOptions number (1..1) <"Specifies the fixed amount by which the Number of Options changes">
	outstandingNumberOfOptions number (1..1) <"Specifies the Number of Options after the Change.">

type TradeNotionalChangeModelSequence2:

	changeInNumberOfUnits number (1..1) <"Specifies the fixed amount by which the Number of Units changes">
	outstandingNumberOfUnits number (1..1) <"Specifies the Number of Units">

type TradeOrInfoModel: <"Defines a model group that allows either details of an event or information about a trade to be provided. Typically this will be used in a response to a request.">

	tradeOrInfoModelSequence TradeOrInfoModelSequence (0..1)
	tradeReferenceInformationModel TradeReferenceInformationModel (0..1)
	tradePackage TradePackage (0..1)

	condition Choice:
		one-of

type TradeOrInfoModelSequence:

	originatingEvent OriginatingEvent (0..1) <"This may be used to describe why a trade was created. This can be used to provide context for a newly created trade that is not part of a post-trade event. For example, it can report that the trade was created as a result of netting activity, or due to a transfer, an allocation process, etc. Omitting this implies that the trade record was created as a result of a negotiated new trade.">
	trade Trade (1..1)

type TradeReferenceInformationModel: <"Defines a model group that allows information about a trade to be represented.">

	tradeReferenceInformation TradeReferenceInformation (1..1) <"Information about a trade.">

type UnitQuantityRef extends UnitQuantity: <"A type defining a quantity and unit with a reference.">

	quantityReference NotionalReference (0..1)

type AdditionalData: <"Provides extra information not represented in the model that may be useful in processing the message i.e. diagnosing the reason for failure.">

	mimeType MimeType (1..1) <"Indicates the type of media used to provide the extra information. mimeType is used to determine the software product(s) that can read the content. MIME Types are described in RFC 2046.">
	string String (0..1) <"Provides extra information as string. In case the extra information is in XML format, a CDATA section must be placed around the source message to prevent its interpretation as XML content.">
	hexadecimalBinary string (0..1) <"Provides extra information as binary contents coded in hexadecimal.">
	base64Binary string (0..1) <"Provides extra information as binary contents coded in base64.">
	originalMessage string (0..1) <"Provides extra information as binary contents coded in base64.">

	condition Choice:
		required choice string, hexadecimalBinary , base64Binary , originalMessage

type Acknowledgement extends ResponseMessage:

	originalMessage UnprocessedElementWrapper (0..1)
	partiesAndAccountsModel PartiesAndAccountsModel (0..1)

type BusinessProcess: <"A type that can be used to identify the type of business process in a request. Examples include Allocation, Clearing, Confirmation, etc.">

	value Scheme (1..1)
	businessProcessScheme NonEmptyURI (0..1)

type CorrectableRequestMessage extends RequestMessage: <"A type defining the content model for a request message that can be subsequently corrected or retracted.">

	isCorrection boolean (1..1) <"Indicates if this message corrects an earlier request.">
	correlationAndSequenceModel CorrelationAndSequenceModel (0..1)
	onBehalfOfModel OnBehalfOfModel (0..1)

type CorrelationId: <"A type defining a correlation identifier and qualifying scheme">

	value NonEmptyScheme (1..1)
	correlationIdScheme NonEmptyURI (1..1)

type EventIdentifier: <"Identification of a business event, for example through its correlation id or a business identifier.">

	eventIdentifierSequence EventIdentifierSequence (0..1)
	tradeIdentifier TradeIdentifier (0..1)

	condition Choice:
		one-of

type EventIdentifierSequence:

	correlationIdModel CorrelationIdModel (1..1)
	sequenceModel SequenceModel (0..1)

type EventStatus: <"A coding scheme used to describe the matching/confirmation status of a trade, post-trade event, position, or cash flows.">

	value Scheme (1..1)
	eventStatusScheme NonEmptyURI (0..1)

type EventStatusItem: <"A type used in event status enquiry messages which relates an event identifier to its current status value.">

	eventIdentifier EventIdentifier (1..1) <"An instance of a unique event identifier.">
	status EventStatus (1..1) <"An event status value.">

type Exception extends Message: <"A type defining the basic content for a message sent to inform another system that some exception has been detected.">

	header ExceptionMessageHeader (1..1)
	validationModel ValidationModel (1..1)
	correlationAndOptionalSequenceModel CorrelationAndOptionalSequenceModel (0..1)
	exceptionModel ExceptionModel (1..1)

type ExceptionMessageHeader extends MessageHeader: <"A type defining the content model for an exception message header.">

	inReplyTo MessageId (0..1) <"A copy of the unique message identifier (within it own coding scheme) to which this message is responding.">
	messageHeaderModel MessageHeaderModel (1..1)

type Message extends Document: <"A type defining the basic structure of all FpML messages which is refined by its derived types.">

type MessageAddress: <"The data type used for identifying a message address.">

	value Scheme (1..1)
	messageAddressScheme NonEmptyURI (0..1)

type MessageHeader: <"A type defining the content model for a generic message header that is refined by its derived classes.">

	messageId MessageId (1..1) <"A unique identifier (within its coding scheme) assigned to the message by its creating party.">

type MessageId: <"The data type use for message identifiers.">

	value NonEmptyScheme (1..1)
	messageIdScheme NonEmptyURI (1..1)

type NonCorrectableRequestMessage extends RequestMessage: <"A type defining the content model for a request message that cannot be subsequently corrected or retracted.">

	correlationAndSequenceModel CorrelationAndSequenceModel (0..1)
	onBehalfOfModel OnBehalfOfModel (0..1)

type NotificationMessage extends Message: <"A type defining the basic content for a message sent to inform another system that some \'business event\' has occured. Notifications are not expected to be replied to.">

	header NotificationMessageHeader (1..1)
	validationModel ValidationModel (1..1)
	correlationAndOptionalSequenceModel CorrelationAndOptionalSequenceModel (0..1)
	onBehalfOfModel OnBehalfOfModel (0..1)

type NotificationMessageHeader extends MessageHeader: <"A type that refines the generic message header to match the requirements of a NotificationMessage.">

	inReplyTo MessageId (0..1) <"A copy of the unique message identifier (within it own coding scheme) to which this message is responding.">
	messageHeaderModel MessageHeaderModel (1..1)

type ImplementationSpecification: <"A version of a specification document used by the message generator to format the document.">

	name NormalizedString (0..1)
	version ImplementationSpecificationVersion (0..1)
	date date (0..1)

type ImplementationSpecificationVersion:

	value Scheme (1..1)
	implementationSpecificationVersionScheme NonEmptyURI (0..1)

type PartyMessageInformation: <"A type defining additional information that may be recorded against a message.">

	partyReference PartyReference (1..1) <"Identifies that party that has ownership of this information.">

type PortfolioReference extends PortfolioReferenceBase: <"A structure used to group together individual messages that can be acted on at a group level.">

	sequenceNumber int(min: 1) (1..1) <"A numeric, sequentially ascending (i.e. gapless) value (starting at 1) that can be used to identify and distinguish the individual constituents of a portfolio request. A recipient should ensure that all sequence numbers from 1 to the final sequence number (where submissionsComplete is true) have arrived before completing the portfolio request.">
	submissionsComplete boolean (0..1) <"Indicates whether all individual requests have been submitted for this portfolio request.">

type PortfolioConstituentReference extends PortfolioReferenceBase: <"A structure used to group together individual messages that can be acted on at a group level.">

	sequenceNumber int(min: 1) (1..1) <"A numeric, sequentially ascending (i.e. gapless) value (starting at 1) that can be used to identify and distinguish the individual constituents of a portfolio request. A recipient should ensure that all sequence numbers from 1 to the final sequence number (where submissionsComplete is true) have arrived before completing the portfolio request.">

type PortfolioReferenceBase: <"A structure used to identify a portfolio in a message.">

	portfolioName PortfolioName (1..1) <"An identifier that is unique for each portfolio-level request, and which can be used to group together the individual messages in the portfolio request.">

type ProblemLocation: <"Provides a lexical location (i.e. a line number and character for bad XML) or an XPath location (i.e. place to identify the bad location for valid XML).">

	value NormalizedString (1..1)
	locationType Token (0..1) <"The value of the locationType attribute defines which type of location has been given. It may take the values \'lexical\' or \'xpath\'.">

type Reason: <"A type defining a content model for describing the nature and possible location of a error within a previous message.">

	reasonCode ReasonCode (1..1) <"A machine interpretable error code.">
	location ProblemLocation (0..1) <"A value indicating the location of the problem within the subject message.">
	description String (0..1) <"Plain English text describing the associated error condition">
	validationRuleId Validation (0..1) <"A reference identifying a rule within a validation scheme">
	additionalData AdditionalData (0..*) <"Any string of additional data that may help the message processor, for example in a rejection message this might contain a code value or the text of any one of the messages (within a CDATA section).">

type ReasonCode: <"Defines a list of machine interpretable error codes.">

	value Scheme (1..1)
	reasonCodeScheme NonEmptyURI (0..1)

type RequestMessage extends Message: <"A type defining the basic content of a message that requests the receiver to perform some business operation determined by the message type and its content.">

	header RequestMessageHeader (1..1)
	validationModel ValidationModel (1..1)

type RequestMessageHeader extends MessageHeader: <"A type refining the generic message header content to make it specific to request messages.">

	messageHeaderModel MessageHeaderModel (1..1)

type ReportId: <"A type that can be used to hold an identifier for a report instance.">

	value NonEmptyScheme (1..1)
	reportIdScheme NonEmptyURI (0..1)

type ReportSectionIdentification: <"A type that allows the specific report and section to be identified.">

	reportId ReportId (0..1) <"An identifier for the specific instance of this report.">
	sectionNumber int(min: 1) (0..1) <"A strictly ascending sequential (gapless) numeric value that can be used to identify the section of a report.">

type ResponseMessage extends Message: <"A type refining the generic message content model to make it specific to response messages.">

	header ResponseMessageHeader (1..1)
	validationModel ValidationModel (1..1)
	correlationAndOptionalSequenceModel CorrelationAndOptionalSequenceModel (1..1)
	onBehalfOfModel OnBehalfOfModel (0..1)

type ResponseMessageHeader extends MessageHeader: <"A type refining the generic message header to make it specific to response messages.">

	inReplyTo MessageId (1..1) <"A copy of the unique message identifier (within it own coding scheme) to which this message is responding.">
	messageHeaderModel MessageHeaderModel (1..1)

type ServiceAdvisory: <"A type defining the content model for a human-readable notification to the users of a service.">

	category ServiceAdvisoryCategory (1..1) <"The category or type of the notification message, e.g. availability, product coverage, rules, etc.">
	description String (1..1) <"A human-readable notification.">
	effectiveFrom zonedDateTime (0..1) <"The time at which the information supplied by the advisory becomes effective. For example, if the advisory advises of a newly planned service outage, it will be the time the service outage begins.">
	effectiveTo zonedDateTime (0..1) <"The time at which the information supplied by the advisory becomes no longer effective. For example, if the advisory advises of a newly planned service outage, it will be the time the service outage ends.">

type ServiceAdvisoryCategory: <"A type that can be used to describe the category of an advisory message, e.g.. Availability, Rules, Products, etc., etc..">

	value Scheme (1..1)
	serviceAdvisoryCategoryScheme NonEmptyURI (0..1)

type ServiceProcessingCycle: <"A type that can be used to describe the processing phase of a service. For example, EndOfDay, Intraday.">

	value Scheme (1..1)
	serviceProcessingCycleScheme NonEmptyURI (0..1)

type ServiceProcessingEvent: <"A type that can be used to describe a stage or step in processing provided by a service, for example processing completed.">

	value Scheme (1..1)
	serviceProcessingEventScheme NonEmptyURI (0..1)

type ServiceProcessingStatus: <"A type defining the content model for report on the status of the processing by a service. In the future we may wish to provide some kind of scope or other qualification for the event, e.g. the currencies, products, or books to which it applies.">

	cycle ServiceProcessingCycle (0..1) <"The processing cycle or phase that this message describes. For example, EndOfDay or Intraday.">
	step ServiceProcessingStep (0..1) <"The stage within a processing cycle or phase that this message describes. For example, Netting or Valuation.">
	event ServiceProcessingEvent (1..1) <"The event that occurred within the cycle or step, for example \"Started\" or \"Completed\"..">

type ServiceProcessingStep: <"A type that can be used to describe what stage of processing a service is in. For example, Netting or Valuation.">

	value Scheme (1..1)
	serviceProcessingStep NonEmptyURI (0..1)

type ServiceStatus: <"A type that can be used to describe the availability or other state of a service, e.g. Available, Unavaialble.">

	value Scheme (1..1)
	serviceStatusScheme NonEmptyURI (0..1)

type UnprocessedElementWrapper: <"A type holding a structure that is unvalidated">

type VerificationStatus: <"The verification status of the position as reported by the sender (Verified, Disputed).">

	value Scheme (1..1)
	verificationStatusScheme NonEmptyURI (0..1)

type CorrelationModel: <"A model group defining the elements used for process correlation. The correlation ID is used to link followup corrections and retractions to the original request, and to help identify which replies link to which requests. The parent correlation ID is used to keep track of the parent process.">

	parentCorrelationId CorrelationId (0..1) <"An optional identifier used to correlate between related processes">
	correlationIdModel CorrelationIdModel (1..1)

type CorrelationAndOptionalSequenceModel: <"A model group defining the full messsage correlation mechanism, but with optional sequence. Please note that for reports in Reporting view, usage of the correlation and sequence model is not well defined in the standard an may be deprecated from future versions of the standard. Use the ReportReference structure to identify report instances and section numbers if a report must be divided into chunks.">

	correlationModel CorrelationModel (1..1)
	sequenceModel SequenceModel (0..1)

type CorrelationAndSequenceModel: <"A model group defining the full messsage correlation mechanism. The correlation ID is used to link followup corrections and retractions to the original request, and to help identify which replies link to which requests. (The \"inReplyTo\" element may also be used for this purpose, but it contains a message identifier rather than a business object identifier.) The sequence ID is used to establish an ordering between multiple messages related to the same business object (identified by the same correlation identifier). It contains a value the must ascend (possibly with gaps) messages on the same correlation ID.">

	correlationModel CorrelationModel (1..1)
	sequenceModel SequenceModel (1..1)

type CorrelationIdModel: <"A model group defining the element used for process correlation. The correlation ID is used to link followup corrections and retractions to the original request, and to help identify which replies link to which requests.">

	correlationId CorrelationId (1..1) <"A qualified identifier used to correlate between messages">

type ExceptionModel: <"A model group which has exception elements.">

	reason Reason (1..*) <"An instance of the Reason type used to record the nature of any errors associated with a message.">
	additionalData AdditionalData (0..1) <"Any string of additional data that may help the message processor, for example in a rejection message this might contain a code value or the text of the original request (within a CDATA section).">

type MessageHeaderModel: <"Defines the structure that contains routing and identification information, which allows processing and transfer of the message. It contains only messaging information that is applicable to all messages. If the information is not message related or is not applicable to all messages then it is not defined in the message header.">

	sentBy MessageAddress (1..1) <"The unique identifier (within its coding scheme) for the originator of a message instance.">
	sendTo MessageAddress (0..*) <"A unique identifier (within its coding scheme) indicating an intended recipent of a message.">
	copyTo MessageAddress (0..*) <"A unique identifier (within the specified coding scheme) giving the details of some party to whom a copy of this message will be sent for reference.">
	creationTimestamp zonedDateTime (1..1) <"The date and time (on the source system) when this message instance was created.">
	expiryTimestamp zonedDateTime (0..1) <"The date and time (on the source system) when this message instance will be considered expired.">
	implementationSpecification ImplementationSpecification (0..1) <"The version(s) of specifications that the sender asserts the message was developed for.">
	partyMessageInformation PartyMessageInformation (0..*) <"Additional message information that may be provided by each involved party.">
	signature SignatureType (0..*)

type PortfolioConstituentReferenceModel: <"Defines a model group that allows a constituent of a portfolio to be included in a request retransmission message.">

	portfolioReference PortfolioConstituentReference (1..1)

type PortfolioReferenceModel: <"Defines a model group that allows a portfolio reference request structure to be included in a message.">

	portfolioReference PortfolioReference (1..1)

type PortfolioReferenceBaseModel: <"Defines a model group that allows a portfolio to be identified in a response message.">

	portfolioReference PortfolioReferenceBase (1..1)

type PortfolioReferenceOrReportIdentificationModel: <"Defines a model group that allows either details of a portoflio constituent or report constituent to be provided. Typically this will be used in a request retransmission message.">

	portfolioConstituentReferenceModel PortfolioConstituentReferenceModel (0..1)
	reportSectionIdentificationModel ReportSectionIdentificationModel (0..1)

	condition Choice:
		one-of

type ReportSectionIdentificationModel: <"Defines a model group that allows a chunck of a report to be included in a request retransmission message.">

	reportIdentification ReportSectionIdentification (1..1)

type SequenceModel: <"A model group defining the element used for message sequencing">

	sequenceNumber int(min: 1) (1..1) <"A numeric value that can be used to order messages with the same correlation identifier from the same sender.">

type CompoundingFrequency:

	value Scheme (1..1)
	compoundingFrequencyScheme NonEmptyURI (0..1)

type DefaultProbabilityCurve extends PricingStructureValuation: <"A set of default probabilities.">

	baseYieldCurve PricingStructureReference (1..1) <"A reference to the yield curve values used as a basis for this credit curve valuation.">
	defaultProbabilities TermCurve (0..1) <"A collection of default probabilities.">

type ForwardRateCurve: <"A curve used to model a set of forward interest rates. Used for forecasting interest rates as part of a pricing calculation.">

	assetReference AssetReference (0..1) <"A reference to the rate index whose forwards are modeled.">
	rateCurve TermCurve (1..1) <"The curve of forward values.">

type FxRateSet extends QuotedAssetSet: <"A collection of spot FX rates used in pricing.">

type MultiDimensionalPricingData: <"A pricing data set that contains a series of points with coordinates. It is a sparse matrix representation of a multi-dimensional matrix.">

	quotationCharacteristicsModel QuotationCharacteristicsModel (0..1)
	point PricingStructurePoint (1..*)

type ParametricAdjustment: <"An adjustment used to accommodate a parameter of the input trade, e.g. the strike.">

	name NormalizedString (1..1) <"The name of the adjustment parameter (e.g. \"Volatility Skew\").">
	inputUnits PriceQuoteUnits (0..1) <"The units of the input parameter, e.g. Yield.">
	datapoint ParametricAdjustmentPoint (1..*) <"The values of the adjustment parameter.">

type ParametricAdjustmentPoint: <"A value of the adjustment point, consisting of the x value and the corresponding y value.">

	parameterValue number (1..1) <"The value of the independent variable (e.g. strike offset).">
	adjustmentValue number (1..1) <"The value of the dependent variable, the actual adjustment amount.">

type PricingStructurePoint: <"A single valued point with a set of coordinates that define an arbitrary number of indentifying indexes (0 or more). Note that the collection of coordinates/coordinate references for a PricingStructurePoint must not define a given dimension (other than \"generic\") more than once. This is to avoid ambiguity.">

	pricingCoordinateOrReferenceModel PricingCoordinateOrReferenceModel (0..*)
	underlyingAssetOrReferenceModel UnderlyingAssetOrReferenceModel (0..1)
	quotationModel QuotationModel (1..1)
	id string (0..1)

type TermCurve: <"A curve consisting only of values over a term. This is a restricted form of One Dimensional Structure.">

	interpolationMethod InterpolationMethod (0..1)
	extrapolationPermitted boolean (0..1)
	point TermPoint (1..*)

type TermPoint: <"A value point that can have a time dimension. Allows bid, mid, ask, and spread values to be represented.">

	term TimeDimension (1..1) <"The time dimension of the point (tenor and/or date)">
	bidMidAskModel BidMidAskModel (1..1)
	spreadValue number (0..1) <"The spread value can be used in conjunction with the \"mid\" value to define the bid and the ask value.">
	^definition AssetReference (0..1) <"An optional reference to an underlying asset that defines the meaning of the value, i.e. the product that the value corresponds to. For example, this could be a discount instrument.">
	id string (0..1)

type VolatilityMatrix extends PricingStructureValuation: <"A matrix of volatilities with dimension 0-3.">

	dataPoints MultiDimensionalPricingData (1..1) <"The raw volatility matrix data, expressed as a multi-dimensional array.">
	adjustment ParametricAdjustment (0..*) <"An adjustment factor, such as for vol smile/skew.">

type ZeroRateCurve: <"A curve used to model a set of zero-coupon interest rates.">

	compoundingFrequency CompoundingFrequency (1..1) <"The frequency at which the rates are compounded (e.g. continuously compounded).">
	rateCurve TermCurve (1..1) <"The curve of zero-coupon values.">

type BidMidAskModel: <"The bid, mid, or ask values relevant for a quote">

	bid number (0..1) <"A price \"bid\" by a buyer for an asset, i.e. the price a buyer is willing to pay.">
	mid number (0..1) <"A price midway between the bid and the ask price.">
	ask number (0..1) <"A price \"asked\" by a seller for an asset, i.e. the price at which a seller is willing to sell.">

type CreditCurveCharacteristicsModel: <"The set of characterstics that describe the outputs of a credit curve.">

	creditEntityModel CreditEntityModel (1..1)
	creditEvents CreditEvents (0..1) <"The material credit event.">
	seniority CreditSeniority (1..1) <"The level of seniority of the deliverable obligation.">
	secured boolean (1..1) <"Whether the deliverable obligation is secured or unsecured.">
	obligationCurrency Currency (1..1) <"The currency of denomination of the deliverable obligation.">
	obligations Obligations (0..1) <"The underlying obligations of the reference entity on which you are buying or selling protection">
	deliverableObligations DeliverableObligations (0..1) <"What sort of obligation may be delivered in the event of the credit event. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category">

type FxCurveCharacteristicsModel: <"The set of characterstics that describe the outputs of a fx curve.">

	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">

type RecoveryRateModel: <"The model of the recovery rate (single value or curve).">

	recoveryRate number (0..1) <"A single recovery rate, to be used for all terms.">
	recoveryRateCurve TermCurve (0..1) <"A curve of recovery rates, allowing different terms to have different recovery rates.">

	condition Choice:
		one-of

type UnderlyingAssetOrReferenceModel: <"Include or reference an underlying asset definition.">

	underlyingAsset Asset (0..1)
	underlyingAssetReference AssetReference (0..1) <"A reference to an underlying asset that defines the meaning of the value, i.e. the product that the value corresponds to. For example, this could be a caplet or simple european swaption.">

	condition Choice:
		one-of

type YieldCurveCharacteristicsModel: <"The set of characteristics that describe the outputs of a yield curve.">

	algorithm String (0..1)
	forecastRateIndex ForecastRateIndex (0..1)

type SignatureType:

	signedInfo SignedInfoType (1..1)
	signatureValue SignatureValueType (1..1)
	keyInfo KeyInfoType (0..1)
	object ObjectType (0..*)
	id string (0..1)

type SignatureValueType:

	value string (1..1)
	id string (0..1)

type SignedInfoType:

	canonicalizationMethod CanonicalizationMethodType (1..1)
	signatureMethod SignatureMethodType (1..1)
	reference ReferenceType (1..*)
	id string (0..1)

type CanonicalizationMethodType:

	algorithm string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type SignatureMethodType:

	hmacOutputLength HMACOutputLengthType (0..1)
	algorithm string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type ReferenceType:

	transforms TransformsType (0..1)
	digestMethod DigestMethodType (1..1)
	digestValue DigestValueType (1..1)
	id string (0..1)
	uri string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)
	_type string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type TransformsType:

	transform TransformType (1..*)

type TransformType:

	transformTypeChoice TransformTypeChoice (0..*)
	algorithm string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type TransformTypeChoice:

	xPath string (0..1)

type DigestMethodType:

	algorithm string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)

type KeyInfoType:

	keyInfoTypeChoice KeyInfoTypeChoice (1..*)
	id string (0..1)

type KeyInfoTypeChoice:

	keyName string (0..1)
	keyValue KeyValueType (0..1)
	retrievalMethod RetrievalMethodType (0..1)
	x509Data X509DataType (0..1)
	pgpData PGPDataType (0..1)
	spkiData SPKIDataType (0..1)
	mgmtData string (0..1)

	condition Choice:
		one-of

type KeyValueType:

	dsaKeyValue DSAKeyValueType (0..1)
	rsaKeyValue RSAKeyValueType (0..1)

	condition Choice:
		one-of

type RetrievalMethodType:

	transforms TransformsType (0..1)
	uri string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)
	_type string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type X509DataType:

	x509DataTypeSequence X509DataTypeSequence (1..*)

type X509DataTypeSequence:

	x509IssuerSerial X509IssuerSerialType (0..1)
	x509SKI string (0..1)
	x509SubjectName string (0..1)
	x509Certificate string (0..1)
	x509CRL string (0..1)

	condition Choice:
		one-of

type X509IssuerSerialType:

	x509IssuerName string (1..1)
	x509SerialNumber int (1..1)

type PGPDataType:

	pgpDataTypeSequence0 PGPDataTypeSequence0 (0..1)
	pgpDataTypeSequence1 PGPDataTypeSequence1 (0..1)

	condition Choice:
		one-of

type PGPDataTypeSequence0:

	pgpKeyID string (1..1)
	pgpKeyPacket string (0..1)

type PGPDataTypeSequence1:

	pgpKeyPacket string (1..1)

type SPKIDataType:

	spkiDataTypeSequence SPKIDataTypeSequence (1..*)

type SPKIDataTypeSequence:

	spkiSexp string (1..1)

type ObjectType:

	objectTypeSequence ObjectTypeSequence (0..*)
	id string (0..1)
	mimeType string (0..1)
	encoding string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type ObjectTypeSequence:

type ManifestType:

	reference ReferenceType (1..*)
	id string (0..1)

type SignaturePropertiesType:

	signatureProperty SignaturePropertyType (1..*)
	id string (0..1)

type SignaturePropertyType:

	signaturePropertyTypeChoice SignaturePropertyTypeChoice (1..*)
	target string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (1..1)
	id string (0..1)

type SignaturePropertyTypeChoice:

type DSAKeyValueType:

	dsaKeyValueTypeSequence0 DSAKeyValueTypeSequence0 (0..1)
	g CryptoBinary (0..1)
	y CryptoBinary (1..1)
	j CryptoBinary (0..1)
	dsaKeyValueTypeSequence1 DSAKeyValueTypeSequence1 (0..1)

type DSAKeyValueTypeSequence0:

	p CryptoBinary (1..1)
	q CryptoBinary (1..1)

type DSAKeyValueTypeSequence1:

	seed CryptoBinary (1..1)
	pgenCounter CryptoBinary (1..1)

type RSAKeyValueType:

	modulus CryptoBinary (1..1)
	exponent CryptoBinary (1..1)

type AdmissionToTrading: <"Information about whether and when a product was admitted to trading on a facility.">

	requested boolean (1..1) <"Whether the issuer of the financial instrument has requested or approved the trading or admission to trading of their financial instruments on a trading venue.">
	requestDate zonedDateTime (0..1) <"Date and time of the request for admission to trading on the trading venue.">
	approvalDate zonedDateTime (0..1) <"Date and time the issuer has approved admission to trading or trading in its financial instruments on a trading venue.">
	admissionDate zonedDateTime (0..1) <"Date and time of the admission to trading on the trading venue or the date and time when the instrument was first traded or an order or quote was first received by the trading venue.">
	terminationDate zonedDateTime (0..1) <"Date and time when the financial instrument ceases to be traded or to be admitted to trading on the trading venue.">

type Algorithm:

	name string (1..1) <"The name of the algorithm.">
	role AlgorithmRole (1..1) <"The category of the function of the algorithm. The related individual performs the role specified in this field for the base party. For example, if the role is \"Trader\", the related person acts acts or acted as the base party\'s trader.">

type AlgorithmRole: <"A type describing a role played by an algorithm in one or more transactions. Examples include roles such as TradingDecision, RoutingDecision. This can be extended to provide custom roles.">

	value Scheme (1..1)
	algorithmRoleScheme NonEmptyURI (0..1)

type Allocation:

	allocationTradeId TradeIdentifier (1..*) <"Unique ID for the allocation. Multiple allocation trade IDs are provided to allow for the use of USI/UTI representations along with party-specific trade identifiers.">
	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	allocatedFraction number (0..1) <"The fractional allocation (0.45 = 45%) of the notional and \"block\" fees to this particular client subaccount.">
	allocatedNotional Money (0..2) <"The notional allocation (amount and currency) to this particular client account.">
	allocationContentModel AllocationContentModel (1..1)

	condition Choice:
		required choice allocatedFraction, allocatedNotional

type AllocationReportingStatus: <"Code that describes what type of allocation applies to the trade. Options include Unallocated, PreAllocation, PostAllocation.">

	value Scheme (1..1)
	allocationReportingStatusScheme NonEmptyURI (0..1)

type Allocations: <"The allocations for a single side of a trade.">

	allocatingPartyReference PartyReference (0..1) <"A pointer style reference to one of the parties to the trade, defined elsewhere in the document. The party referenced has requested its position in the trade to be allocated to several other parties or accounts.">
	allocation Allocation (1..*)

type Approval: <"A specific approval state in the workflow.">

	_type ApprovalType (1..1) <"The type of approval (e.g. \"pre-clearing credit\").">
	status NormalizedString (1..1) <"The current state of approval (.e.g preapproved, pending approval, etc.)">
	approver PersonId (0..1) <"The full name or identifiying ID of the relevant approver.">
	approvingPartyReference PartyReference (0..1) <"A pointer style reference to a party defined elsewhere in the document. The party referenced has approved the specified item (e.g. trade or allocation).">
	approvedPartyReference PartyReference (0..1) <"A pointer style reference to a party defined elsewhere in the document. The party referenced was approved for the specified item (e.g. trade or allocation) by the approving party (if specified).">
	approvalId ApprovalId (0..1) <"An identifer for a specific appoval, to allow the approval to be identified and tracked.">

type ApprovalId: <"An approval identifier allocated by a party. FpML does not define the domain values associated with this element.">

	value NonEmptyScheme (1..1)
	approvalIdScheme NonEmptyURI (0..1)
	id string (0..1)

type Approvals:

	approval Approval (1..*)

type ApprovalType: <"A type that qualifies the type of approval.">

	value Scheme (1..1)
	approvalTypeScheme NonEmptyURI (0..1)

type ClearingStatusValue: <"The current status value of a clearing request.">

	value Scheme (1..1)
	clearingStatusScheme NonEmptyURI (0..1)

type CollateralizationType: <"Code that describes what type of collateral is posted by a party to a transaction. Options include Uncollateralized, Partial, Full, One-Way.">

	value Scheme (1..1)
	collateralTypeScheme NonEmptyURI (0..1)

type ConfirmationMethod: <"A type used to represent the type of mechanism that can be used to confirm a trade.">

	value Scheme (1..1)
	confirmationMethodScheme NonEmptyURI (0..1)

type ContractId: <"A contact id identifier allocated by a party. FpML does not define the domain values associated with this element.">

	value NonEmptyScheme (1..1)
	contractIdScheme NonEmptyURI (1..1)
	id string (0..1)

type ContractIdentifier: <"A type defining a contract identifier issued by the indicated party.">

	partyReference PartyReference (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. The party referenced has allocated the contract identifier.">
	contractId ContractId (0..*) <"A contract id which is not version aware.">
	versionedContractId VersionedContractId (0..*) <"A contract id which is version aware.">
	id string (0..1)

	condition Choice:
		required choice contractId, versionedContractId

type CreditDerivativesNotices:

	creditEvent boolean (1..1) <"This element corresponds to the Credit Event Notice Delivered Under Old Transaction and Deemed Delivered Under New Transaction under the EXHIBIT C to 2004 ISDA Novation Definitions.">
	publiclyAvailableInformation boolean (1..1) <"This element corresponds to the Notice of Publicly Available Information Delivered Under Old Transaction and Deemed Delivered Under New Transaction under the EXHIBIT C to 2004 ISDA Novation Definitions.">
	physicalSettlement boolean (1..1) <"This element corresponds to the Notice of Intended Physical Settlement Delivered Under Old Transaction under the EXHIBIT C to 2004 ISDA Novation Definitions.">

type CreditDocument: <"A credit arrangement used in support of swaps trading.">

	value Scheme (1..1)
	creditDocumentScheme NonEmptyURI (0..1)

type CurrencyPairClassification: <"A type containing a code representing the risk classification of a currency pair, as specified by a regulator.">

	value Scheme (1..1)
	currencyPairClassificationScheme NonEmptyURI (0..1)
	id string (0..1)

type Document: <"The abstract base type from which all FpML compliant messages and documents must be derived.">

	expectedBuild int(min: 1) (0..1) <"This optional attribute can be supplied by a message creator in an FpML instance to specify which build number of the schema was used to define the message when it was generated.">
	actualBuild int(min: 1) (0..1) <"The specific build number of this schema version. This attribute is not included in an instance document. Instead, it is supplied by the XML parser when the document is validated against the FpML schema and indicates the build number of the schema file. Every time FpML publishes a change to the schema, validation rules, or examples within a version (e.g., version 4.2) the actual build number is incremented. If no changes have been made between releases within a version (i.e. from Trial Recommendation to Recommendation) the actual build number stays the same.">

type EndUserExceptionDeclaration: <"Records supporting information justifying an end user exception under 17 CFR part 39.">

	creditDocument CreditDocument (0..*) <"What arrangements will be made to provide credit? (e.g. CSA, collateral pledge, guaranty, available resources, financing).">
	organizationCharacteristic OrganizationCharacteristic (0..*) <"Allows the organization to specify which categories or characteristics apply to it for end-user exception determination. Examples include \"FinancialEntity\", \"CaptiveFinanceUnit\", \"BoardOfDirectorsApproval\".">
	transactionCharacteristic TransactionCharacteristic (0..*) <"Allows the relevant transaction level categories or characteristics to be recorded for end-user exception determination. Examples include \"BoardOfDirectorsApproval\", \"HedgesCommercialRisk\".">
	supervisorRegistration SupervisorRegistration (0..*) <"Allows the organization to specify which if any relevant regulators it is registered with, and if so their identification number. For example, it could specify that it is SEC registered and provide its Central Index Key.">

type EntityClassification: <"A type describing the entity of a party, for example Financial, NonFinancial etc.">

	value Scheme (1..1)
	entityClassificationScheme NonEmptyURI (0..1)

type ExecutionDateTime: <"A type defining the trade execution date time and the source of it. For use inside containing types which already have a Reference to a Party that has assigned this trade execution date time.">

	value zonedDateTime (1..1)
	executionDateTimeScheme NonEmptyURI (0..1) <"Identification of the source (e.g. clock id) generating the execution date time.">

type ExecutionType: <"A type used to represent the type of market where a trade can be executed.">

	value Scheme (1..1)
	executionTypeScheme NonEmptyURI (0..1)

type ExecutionVenueType: <"A type used to represent the type of market where a trade can be executed.">

	value Scheme (1..1)
	executionVenueTypeScheme NonEmptyURI (0..1)

type FacilityExecutionExceptionDeclaration: <"Provides supporting evidence when a party invoked exception to not execute the trade on facility such as SEF and DCM even though the particular product is mandated to execute on a SEF.">

	reason Token (0..*) <"Reason for not executing the trade on SEF or other facility.">
	organizationCharacteristic OrganizationCharacteristic (0..*) <"Allows the organization to specify which categories or characteristics apply to it for end-user exception determination. Examples include \"FinancialEntity\", \"CaptiveFinanceUnit\", \"BoardOfDirectorsApproval\".">
	transactionCharacteristic TransactionCharacteristic (0..*) <"Allows the relevant transaction level categories or characteristics to be recorded for end-user exception determination. Examples include \"BoardOfDirectorsApproval\", \"HedgesCommercialRisk\".">
	supervisorRegistration SupervisorRegistration (0..*) <"Allows the organization to specify which if any relevant regulators it is registered with, and if so their identification number. For example, it could specify that it is SEC registered and provide its Central Index Key.">

type FirstPeriodStartDate:

	value date (1..1)
	href string (1..1)

type InstrumentTradeQuantity: <"A structure describing the amount of an instrument that was traded.">

	number number (0..1) <"The (absolute) number of units of the underlying instrument that were traded.">
	nominal Money (0..1) <"The monetary value of the security (eg. fixed income security) that was traded).">

	condition Choice:
		one-of

type InstrumentTradePricing: <"A structure describing the price paid for the instrument.">

	quote BasicQuotation (1..*)
	couponStartDate date (0..1) <"The date interest started accruing for the accrued interest calculation on an interest bearing security.">
	exDividendDate date (0..1) <"The date when a distribution of dividends or interest is deducted from a securities asset, or set aside for payment to the original bondholders. From the ex-date, any dividends that are owing on the security are paid to the original owner. As a consequence of this, on the ex-date, the securities price typically drops by the amount of the distribution (plus or minus any market activity).">
	tradedFlatOfAccrued boolean (0..1) <"Whether the accrued interest in included when the trade settles. (\"true\" means accrued interest is not included when the trade settles.)">

type InstrumentTradePrincipal: <"A structure describing the value in \"native\" currency of an instrument that was traded.">

	principalAmount NetAndGross (0..1) <"The net and/or gross value of the amount traded in native currency.">

type LinkId: <"The data type used for link identifiers.">

	value NonEmptyScheme (1..1)
	id string (0..1)
	linkIdScheme NonEmptyURI (1..1)

type NetAndGross: <"A structure including a net and/or a gross amount and possibly fees and commissions.">

	netAndOrGrossModel NetAndOrGrossModel (1..1)

type NotionalReportingType: <"How a notional is to be reported for this reporting regime. E.g. for ESMA EMIR, it would be Nominal or Monetary Amount">

	value Scheme (1..1)
	notionalTypeScheme NonEmptyURI (0..1)

type OrderId: <"A type that an identifier for an order.">

	value NonEmptyScheme (1..1)
	orderIdScheme NonEmptyURI (0..1)

type OrderIdentifier: <"A type that an order\'s identifier(s).">

	orderId OrderId (1..1)

type OrganizationCharacteristic: <"A characteristic of an organization used in declaring an end-user exception.">

	value Scheme (1..1)
	organizationCharacteristicScheme NonEmptyURI (0..1)

type OtcClassification: <"Indicator as to the type of transaction in accordance with Articles 20(3)(a) and 21(5)(a) of Regulation (EU) 600/2014.">

	value Scheme (1..1)
	otcClassificationScheme NonEmptyURI (0..1)

type PackageInformation: <"A type defining additional information that may be recorded against a package of trades.">

	relatedParty RelatedParty (0..*) <"This may be used to identify one or more parties that perform a role within the transaction. If this is within a partyTradeInformation block, the related party performs the role with respect to the party identifie by the \"partyReference\" in the partyTradeInformation block.">
	category TradeCategory (0..*) <"Used to categorize trades into user-defined categories, such as house trades vs. customer trades.">
	executionDateTime ExecutionDateTime (0..1) <"Trade execution date time, for example as provided by a central execution facility. Normally this refers to the original execution time of the trade, not the execution time of any post-trade events that may have affected it. However, in the case of a post trade event that reports the new version of the trade (for example, the novation trade in an novation event, or the amended trade in an amendment event), the execution date time may contain the time that the newly created or modified trade was created or modified.">
	timestamps TradeProcessingTimestamps (0..1) <"Allows timing information about a trade to be recorded.">
	intentToAllocate boolean (0..1) <"Specifies whether the trade is anticipated to be allocated.">
	allocationStatus AllocationReportingStatus (0..1) <"Specifies whether the trade is anticipated to be allocated, has been allocated, or will not be allocated.">
	intentToClear boolean (0..1) <"Specifies whether the trade is anticipated to be cleared via a derivative clearing organization">
	clearingStatus ClearingStatusValue (0..1) <"Describes the status with respect to clearing (e.g. AwaitingAcceptance, Pending, Accepted, Rejected, etc.)">
	executionVenueType ExecutionVenueType (0..1) <"Used to describe the type of venue where trade was executed, e.g via an execution facility or privately.">

type PackageSummary: <"Summary information about a trade package.">

	packageIdentifier IssuerTradeId (0..1)
	orderIdentifier OrderIdentifier (0..1)
	packageType PackageType (0..*)
	size PositiveDecimal (0..1)
	sequenceNumber PositiveDecimal (0..1)

type PackageType: <"A type that describes what thpe of package this is, e.g. Butterfly.">

	value Scheme (1..1)
	packageTypeScheme NonEmptyURI (0..1)

type PartyEntityClassification: <"A type that specifies the classification of a party.">

	partyReference PartyReference (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. The party referenced has the classification in the associated \"entityClassification\" element below.">
	entityClassification EntityClassification (1..1) <"Indicates the category or classification or business role of the organization referenced by the partyTradeInformation with respect to this reporting regime, for example Financial, NonFinancial etc.">

type PartyPortfolioName: <"A type to represent a portfolio name for a particular party.">

	partyReference PartyReference (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. The party referenced has allocated the trade identifier.">
	portfolioName PortfolioName (1..*)
	id string (0..1)

type PartyRelationshipType: <"A type containing a code representing how two parties are related, e.g. Affiliated, Intragroup, None.">

	value Scheme (1..1)
	partyRelationshipTypeScheme NonEmptyURI (0..1)
	id string (0..1)

type PartyTradeIdentifier extends TradeIdentifier: <"A type defining one or more trade identifiers allocated to the trade by a party. A link identifier allows the trade to be associated with other related trades, e.g. trades forming part of a larger structured transaction. It is expected that for external communication of trade there will be only one tradeId sent in the document per party.">

	linkId LinkId (0..*) <"A link identifier allowing the trade to be associated with other related trades, e.g. the linkId may contain a tradeId for an associated trade or several related trades may be given the same linkId. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">
	allocationTradeId TradeIdentifier (0..*) <"The trade id of the allocated trade. This is used by the block trade to reference the allocated trade.">
	resultingTradeId TradeIdentifierExtended (0..*) <"The trade id of a resulting trade (beta or gamma trade) that resulted from this trade during a clearing or similar operation (e.g. prime brokerage).">
	blockTradeId TradeIdentifier (0..1) <"The trade id of the block trade. This is used by each one of the allocated trades to reference the block trade. This element can also represent the trade id of the parent trade for N-level allocations. In the case, this element is only used to model N-level allocations in which the trade acts as block and allocated trade at the same time. This basically means the ability to allocate a block trade to multiple allocation trades, and then allocate these in turn to other allocation trades (and so on if desired).">
	originatingTradeId TradeIdentifier (0..*) <"The trade id of the trade(s) upon which this was based, for example the ID of the trade that was submitted for clearing if this is a cleared trade, or of the original trade if this was novated or cancelled and rebooked, or the list of trades that were netted or compressed together in the case of a compression event. The originatingEvent will explain why the trade was created; the existence and number of originatingTradeId elements should correspond to the originatingEvent, and they should be interpreted using that field. If the trade is inside a business event structure (such as a novation or a compression event) this element shuld not be populated; instead the event shoudl be used to represent the other trades.">
	productComponentIdentifier ProductComponentIdentifier (0..*) <"Deprecated: The USIs of the components of this trade, when this trade contains a strategy.">

	condition Choice:
		required choice allocationTradeId, resultingTradeId

type PartyTradeIdentifiers: <"A type containing multiple partyTradeIdentifier.">

	partyTradeIdentifier PartyTradeIdentifier (1..*)

type PartyTradeInformation: <"A type defining party-specific additional information that may be recorded against a trade.">

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	relatedParty RelatedParty (0..*) <"This may be used to identify one or more parties that perform a role within the transaction. If this is within a partyTradeInformation block, the related party performs the role with respect to the party identifie by the \"partyReference\" in the partyTradeInformation block.">
	reportingRole ReportingRole (0..1) <"Identifies the role of this party in reporting this trade (e.g. originator, counterparty).">
	unit Unit (0..*) <"Identifies the unit/division/desk etc. that executed or supports this trade">
	relatedBusinessUnit RelatedBusinessUnit (0..*) <"Provides information about a unit/division/desk etc. that executed or supports this trade">
	relatedPerson RelatedPerson (0..*) <"Provides information about a person that executed or supports this trade">
	algorithm Algorithm (0..*) <"Provides information about an algorithm that executed or otherwise participated in this trade this trade">
	isAccountingHedge boolean (0..1) <"Specifies whether the trade used to hedge a risk for accounting purposes for the specified party. (TODO: do we need to distinguish between asset and liability hedges?)">
	category TradeCategory (0..*) <"Used to categorize trades into user-defined categories, such as house trades vs. customer trades.">
	trader Trader (0..*) <"Identifies the person or persons who assumed the role of trader for this trade. New implementations are encouraged to use the relatedPerson structure instead.">
	executionDateTime ExecutionDateTime (0..1) <"Trade execution date time, for example as provided by a central execution facility. Normally this refers to the original execution time of the trade, not the execution time of any post-trade events that may have affeted it. However, in the case of a post trade event that reports the new version of the trade (for example, the novation trade in an novation event, or the amended trade in an amendment event), the execution date time may contain the time that the newly created or modified trade was created or modified.">
	timestamps TradeProcessingTimestamps (0..1) <"Allows timing information about a trade to be recorded.">
	intentToAllocate boolean (0..1) <"Specifies whether the trade is anticipated to be allocated.">
	allocationStatus AllocationReportingStatus (0..1) <"Specifies whether the trade is anticipated to be allocated, has been allocated, or will not be allocated.">
	intentToClear boolean (0..1) <"Specifies whether the trade is anticipated to be cleared via a derivative clearing organization">
	clearingStatus ClearingStatusValue (0..1) <"Describes the status with respect to clearing (e.g. AwaitingAcceptance, Pending, Accepted, Rejected, etc.)">
	collateralizationType CollateralizationType (0..1) <"Specifies whether this party posts collateral. For Recordkeeping, the collateralization type refers to collateral that is posted by this firm, and One-Way is not meaningful. In other words, if the collateralization type is Full, this trade is fully collateralized by this party. For Transparency view, the options include Full, Partial, Uncollateralized, and One-Way.">
	collateralPortfolio PortfolioName (0..1) <"Provides a name, code, or other identifier for the collateral portfolio to which this belongs.">
	reportingRegime ReportingRegime (0..*) <"Allows the organization to specify which if any relevant regulators or other supervisory bodies this is relevant for, and what reporting rules apply.">
	partyTradeInformationSequence PartyTradeInformationSequence (0..1)
	endUserExceptionDeclaration EndUserExceptionDeclaration (0..1) <"Claims an end user exception and provides supporting evidence. If a relatedParty block with a role of ClearingExceptionParty is present, that related party indicates which party is claiming the end user exception.">
	nonStandardTerms boolean (0..1) <"Indicates that the trade has price-affecting characteristics in addition to the standard real-time reportable terms. The flag indicates that the price for this trade is not to be construed as being indicative of the market for standardised trades with otherwise identical reportable terms.">
	offMarketPrice boolean (0..1) <"Indicates that the price does not reflect the current market. For example, in a credit trade where the two counterparties are not of equal credit standing, there is no initial margin and one party pays collateral to the other in the form of an add-on to the price (say a price that would otherwise be 100 at the market is struck at 105 to include the collateral, resulting in a very off-market looking price.)">
	pricingContext PricingContext (0..*) <"Describes why the price of this trade does not reflect the current market price. For example, the trade may have been traded off-market as part of a termination or compression operation.">
	largeSizeTrade boolean (0..1) <"Specifies whether the sender of this trade considers it to be a large notional trade or block trade for reporting purposes, and thus eligible for delayed public reporting. Normally this will only be applicable for off-facility trades.">
	executionType ExecutionType (0..1) <"Used to describe how the trade was executed, e.g. via voice or electronically.">
	executionVenueType ExecutionVenueType (0..1) <"Used to describe the type of venue where trade was executed, e.g via an execution facility or privately.">
	verificationMethod VerificationMethod (0..1) <"Used to describe how the trade was or will be verified, e.g via a confirmation facility, via private electronic service, or via written documentation. This affect the timing of real-time reporting requirements. This field is provisional pending detailed confirmation of the data requirements, and may not be included in subsequent working drafts.">
	confirmationMethod ConfirmationMethod (0..1) <"Used to describe how the trade was confirmed, e.g via a confirmation facility, via private electronic service, or via written documentation. This affects the process flow for confirmation messages. This field is provisional pending detailed confirmation of the data requirements, and may not be included in subsequent working drafts.">
	compressedTrade boolean (0..1) <"Specifies whether this trade is a result of compression activity.">
	transactionClassificationModel TransactionClassificationModel (0..1)
	isDisputed boolean (0..1) <"Used to report whether the trade is in dispute">

	condition Choice:
		required choice partyTradeInformationSequence, endUserExceptionDeclaration

type PartyTradeInformationSequence:

	endUserException boolean (0..1) <"Specifies whether the trade is not obligated to be cleared via a derivative clearing organization, i.e. wehter there is an exemption from clearing. For historical reasons this is called \"end-user exception\", but this may be used to indication any exception from normal clearing mandates caused by the type of the partiees or their relationship, such as inter-affiliate trades. If a relatedParty block with a role of ClearingExceptionParty is present, that related party indicates which party is claiming the end user exception.">
	endUserExceptionReason ClearingExceptionReason (0..1) <"Specifies a reason that the trade is exempted from a clearing requirement. This exemption may be an end-user exception, or another type such as in inter-affiliate trade.">

type PercentageRule extends PaymentRule: <"A type defining a content model for a calculation rule defined as percentage of the notional amount.">

	paymentPercent number (1..1) <"A percentage of the notional amount.">
	notionalAmountReference NotionalAmountReference (1..1) <"A reference to the notional amount.">

type Portfolio: <"A type representing an arbitary grouping of trade references.">

	partyPortfolioName PartyPortfolioName (0..1) <"The name of the portfolio together with the party that gave the name.">
	tradeId TradeId (0..*)
	partyTradeIdentifier PartyTradeIdentifier (0..*)
	portfolio Portfolio (0..*) <"An arbitary grouping of trade references (and possibly other portfolios).">
	id string (0..1)

	condition Choice:
		required choice tradeId, partyTradeIdentifier

type ClearingExceptionReason: <"The reason a trade is exempted from a clearing mandate.">

	value Scheme (1..1)
	clearingExceptionReasonScheme NonEmptyURI (0..1)

type PortfolioName: <"The data type used for portfolio names.">

	value NonEmptyScheme (1..1)
	id string (0..1)
	portfolioNameScheme NonEmptyURI (0..1)

type PricingContext: <"The reason a trade\'s price does not reflect the current market price.">

	value Scheme (1..1)
	pricingContextScheme NonEmptyURI (0..1)

type ProductComponentIdentifier: <"Deprecated: A type defining a USI for the a subproduct component of a strategy.">

	premiumProductReference ProductReference (0..1) <"Indicates which product within a strategy this ID is associated with.">
	issuer IssuerId (1..1)
	tradeId TradeId (1..1)

type ProductSummary: <"Summary information about the product that was traded. This is intended primarily for trade reporting by TRs.">

	finalSettlementDate date (0..1)
	settlementType SettlementTypeEnum (0..1)
	seniority CreditSeniority (0..1) <"DEPRECATED. Use instead the field within credit products: indexReferenceInformation/seniority (RPTWG decision 2017-09)">
	indexFactor number (0..1) <"DEPRECATED. Use instead the field within credit products: indexReferenceInformation/indexFactor (RPTWG decision 2017-09)">
	admissionToTrading AdmissionToTrading (0..1)

type RegulatorId: <"An ID assigned by a regulator to an organization registered with it. (NOTE: should this just by represented by an alternate party ID?)">

	value NonEmptyScheme (1..1)
	regulatorIdScheme NonEmptyURI (0..1)

type ReportingBoolean: <"How a Boolean value is to be reported for this regulator. Typically \"true\" or \"false\", but for ESMA \"X\" is also allowed, to indicate not supplied.">

	value Scheme (1..1)
	reportingBooleanScheme NonEmptyURI (0..1)

type ReportingPurpose: <"A value that explains the reason or purpose that information is being reported. Examples might include RealTimePublic reporting, PrimaryEconomicTerms reporting, Confirmation reporting, or Snapshot reporting.">

	value Scheme (1..1)
	reportingPurposeScheme NonEmptyURI (0..1)

type ReportingRegime: <"Provides information about how the information in this message is applicable to a regulatory reporting process.">

	reportingRegimeSequence0 ReportingRegimeSequence0 (0..1)
	supervisorRegistration SupervisorRegistration (0..*) <"Identifies the specific regulator or other supervisory body for which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC, ESMA.">
	reportingRole ReportingRole (0..1) <"Identifies the role of this party in reporting this trade for this regulator; roles could include ReportingParty and Voluntary reporting.">
	reportingPurpose ReportingPurpose (0..*) <"The reason this message is being sent, for example Snapshot, PET, Confirmation, RealTimePublic.">
	mandatorilyClearable ReportingBoolean (0..1) <"Whether the particular trade type in question is required by this regulator to be cleared.">
	reportingRegimeSequence1 ReportingRegimeSequence1 (0..1)
	exceedsClearingThreshold boolean (0..1) <"Indicates whether the counterparty exceeds the volume threshold above which trades are required to be cleared.">
	relatedParty RelatedParty (0..*) <"This may be used to identify one or more parties that perform a role within the transaction. If this is within a partyTradeInformation block, the related party performs the role with respect to the party identifie by the \"partyReference\" in the partyTradeInformation block.">
	entityClassification EntityClassification (0..1) <"Indicates the category or classification or business role of the organization referenced by the partyTradeInformation with respect to this reporting regime, for example Financial, NonFinancial etc.">
	partyEntityClassification PartyEntityClassification (0..*) <"Indicates the category or classification or business role of a trade party with respect to this reporting regime, for example Financial, NonFinancial, Dealer, Non-Dealer, LocalParty, etc.">
	tradePartyRelationshipType PartyRelationshipType (0..1) <"Indicates how the parties to the trade (the counterparties) are related to each other with respect to this reporting regime, e.g. Affiliated, Intragroup, etc..">
	actionType ActionType (0..1) <"Reports a regulator-specific code for the action associated with this submission. Used, for example, to report the ESMA action type.">
	preEnactmentTrade boolean (0..1) <"Reports that this trade was executed prior to the enactment of the relevant reporting regulation.">
	notionalType NotionalReportingType (0..1) <"How the notional amount should be reported for the reporting regime. For example, for ESMA MiFIR it would be Nominal or MonetaryAmount.">
	currencyPairClassification CurrencyPairClassification (0..1) <"Reports a regulator-specific code classifying the currency pair in the trade into risk categories such as Major Currencies or Emerging Markets.">
	transmissionOfOrder boolean (0..1)

	condition Choice0:
		required choice reportingRegimeSequence0, supervisorRegistration

	condition Choice1:
		optional choice entityClassification, partyEntityClassification

type ReportingRegimeSequence0:

	name ReportingRegimeName (1..1) <"Identifies the reporting regime under which this data is reported. For example, Dodd-Frank, MiFID, HongKongOTCDRepository, ODRF">
	supervisorRegistration SupervisorRegistration (0..*) <"Identifies the specific regulator or other supervisory body for which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC, ESMA.">

type ReportingRegimeSequence1:

	mandatoryFacilityExecution boolean (1..1) <"Whether the particular product must be executed on a SEF or DCM. See to Dodd-Frank section 723(a)(8).">
	mandatoryFacilityExecutionException boolean (0..1) <"Specifies whether the party invoked exception to not execute the trade on facility such as SEF and DCM even though the particular product is mandated to execute on a SEF.">
	mandatoryFacilityExecutionExceptionDeclaration FacilityExecutionExceptionDeclaration (0..1) <"Provides supporting evidence when a party invoked exception to not execute the trade on facility such as SEF and DCM even though the particular product is mandated to execute on a SEF.">

type ReportingLevel: <"A type containing a code representing the level at which this is reported (e.g. Trade or Position)">

	value Scheme (1..1)
	reportingLevelScheme NonEmptyURI (0..1)
	id string (0..1)

type ReportingRole: <"A type containing a code representing the role of a party in a report, e.g. the originator, the recipient, the counterparty, etc. This is used to clarify which participant\'s information is being reported.">

	value Scheme (1..1)
	reportingRoleScheme NonEmptyURI (0..1)
	id string (0..1)

type ShortSale: <"A short sale concluded by an investment firm on its own behalf or on behalf of a client, as described in Article 11.">

	value Scheme (1..1)
	shortSaleScheme NonEmptyURI (0..1)

type StrategyComponentIdentification: <"Associates trade identifiers with components of a strategy.">

	tradeIdentifierReference PartyTradeIdentifierReference (1..*) <"A reference to a party trade ID. If there are multiple trade IDs for a single component (e.g. USI, UTI, party-specific identifier), create a single \"strategyComponentIdentifier\" with a reference to the component, and multiple tradeIdentifierReferences, one referencing each applicable identifier.">
	componentReference ProductReference (1..1) <"A reference to a component of the strategy (typically a product).">

type SupervisorRegistration: <"Provides information about a regulator or other supervisory body that an organization is registered with.">

	supervisorRegistrationModel SupervisorRegistrationModel (1..1)

type TimestampTypeScheme: <"The type or meaning of a timestamp.">

	value Scheme (1..1)
	timestampScheme NonEmptyURI (0..1)

type Trade: <"A type defining an FpML trade.">

	tradeHeader TradeHeader (1..1) <"The information on the trade which is not product specific, e.g. trade date.">
	product Product (1..1)
	otherPartyPayment Payment (0..*) <"Other fees or additional payments associated with the trade, e.g. broker commissions, where one or more of the parties involved are not principal parties involved in the trade.">
	brokerPartyReference PartyReference (0..*) <"Identifies that party (or parties) that brokered this trade.">
	calculationAgentModel CalculationAgentModel (1..1)
	determiningParty PartyReference (0..2) <"The party referenced is the ISDA Determination Party that specified in the related Confirmation as Determination Party.">
	barrierDeterminationAgent PartyReference (0..1) <"The party referenced is specified in the related Confirmation as Barrier Determination Agent.">
	hedgingParty PartyReference (0..2) <"The party referenced is the ISDA Hedging Party that specified in the related Confirmation as Hedging, or if no Hedging Party is specified, either party to the Transaction.">
	collateral Collateral (0..1) <"Defines collateral obiligations of a Party">
	documentation Documentation (0..1) <"Defines the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed.">
	governingLaw GoverningLaw (0..1) <"Identification of the law governing the transaction.">
	allocations Allocations (0..2) <"\"Short-form\" representation of allocations in which the key block economics are stated once within the trade structure, and the allocation data is contained in this allocations structure.">
	approvals Approvals (0..1) <"A container for approval states in the workflow.">
	id string (0..1)

type TradeCategory: <"A scheme used to categorize positions.">

	value Scheme (1..1)
	categoryScheme NonEmptyURI (0..1)

type TradeDifference: <"A type used to record the details of a difference between two business objects/">

	differenceType DifferenceTypeEnum (1..1) <"The type of difference that exists.">
	differenceSeverity DifferenceSeverityEnum (1..1) <"An indication of the severity of the difference.">
	element String (1..1) <"The name of the element affected.">
	basePath String (0..1) <"XPath to the element in the base object.">
	baseValue String (0..1) <"The value of the element in the base object.">
	otherPath String (0..1) <"XPath to the element in the other object.">
	otherValue String (0..1) <"Value of the element in the other trade.">
	missingElement String (0..*) <"Element(s) that are missing in the other trade.">
	extraElement String (0..*) <"Element(s) that are extraneous in the other object.">
	message String (1..1) <"A human readable description of the problem.">

type TradeHeader: <"A type defining trade related information which is not product specific.">

	partyTradeIdentifier PartyTradeIdentifier (1..*) <"The trade reference identifier(s) allocated to the trade by the parties involved.">
	partyTradeInformation PartyTradeInformation (0..*) <"Additional trade information that may be provided by each involved party.">
	tradeSummary TradeSummary (0..1)
	productSummary ProductSummary (0..1)
	originatingPackage PackageSummary (0..1) <"Information about the trade package if any that the trade originated from.">
	tradeDate IdentifiedDate (1..1) <"The trade date. This is the date the trade was originally executed. In the case of a novation, the novated part of the trade should be reported (by both the remaining party and the transferee) using a trade date corresponding to the date the novation was agreed. The remaining part of a trade should be reported (by both the transferor and the remaining party) using a trade date corresponding to the original execution date.">
	clearedDate IdentifiedDate (0..1) <"If the trade was cleared (novated) through a central counterparty clearing service, this represents the date the trade was cleared (transferred to the central counterparty).">

type TradeIdentifier: <"A type defining a trade identifier issued by the indicated party.">

	issuerTradeIdModel IssuerTradeIdModel (0..1)
	tradeIdentifierSequence TradeIdentifierSequence (0..1)
	id string (0..1)

	condition Choice:
		required choice issuerTradeIdModel, tradeIdentifierSequence

type TradeIdentifierSequence:

	partyAndAccountReferencesModel PartyAndAccountReferencesModel (1..1)
	tradeIdentifierSequenceChoice TradeIdentifierSequenceChoice (1..*)

type TradeIdentifierSequenceChoice:

	tradeId TradeId (0..1)
	versionedTradeId VersionedTradeId (0..1) <"A trade identifier accompanied by a version number. In regulatory reporting views, this should be avoided except for internal mnessaging.">

	condition Choice:
		one-of

type TradeIdentifierExtended extends TradeIdentifier: <"A type defining a trade identifier with a reference to the party that this trade is associated with.">

	associatedPartyReference PartyReference (1..1)

type TradeProcessingTimestamps: <"Allows timing information about when a trade was processed and reported to be recorded.">

	orderEntered zonedDateTime (0..1) <"When an order was first generated, as recorded for the first time when it was first entered by a person or generated by a trading algorithm (i.e., the first record of the order).">
	orderSubmitted zonedDateTime (0..1) <"The time when an order is submitted by a market participant to an execution facility, as recorded based on the timestamp of the message that was sent by the participant. If the participant records this time (i.e. it is in the participant\'s party trade information), it will be the time the message was sent. If the execution facility records this time (i.e. it is in the facility\'s party trade information), it will be the time the message was received.">
	publiclyReported zonedDateTime (0..1) <"When the public report of this was created or received by this party. If the participant records this time (i.e. it is in the participant\'s party trade information), it will be the time the message was sent. If the execution records this time (i.e. it is in the facility\'s party trade information), it will be the time the message was received.">
	publicReportAccepted zonedDateTime (0..1) <"When the public report of this was most recently corrected or corrections were sent or received by this party.">
	publicReportUpdated zonedDateTime (0..1) <"When the public report of this was first accepted for submission to a regulator.">
	nonpubliclyReported zonedDateTime (0..1) <"When the non-public report of this was created or received by this party.">
	nonpublicReportAccepted zonedDateTime (0..1) <"When the non-public report of this was first accepted for submission to a regulator.">
	nonpublicReportUpdated zonedDateTime (0..1) <"When the non-public report of this was most recently corrected or corrections were received by this party.">
	submittedForConfirmation zonedDateTime (0..1) <"When this trade was supplied to a confirmation service or counterparty for confirmation.">
	updatedForConfirmation zonedDateTime (0..1) <"When the most recent correction to this trade was supplied to a confirmation service or counterparty for confirmation.">
	confirmed zonedDateTime (0..1) <"When this trade was confirmed.">
	submittedForClearing zonedDateTime (0..1) <"When this trade was supplied to a clearing service for clearing.">
	updatedForClearing zonedDateTime (0..1) <"When the most recent correction to this trade was supplied to a clearing service for clearing.">
	cleared zonedDateTime (0..1) <"When this trade was cleared.">
	allocationsSubmitted zonedDateTime (0..1) <"When allocations for this trade were submitted or received by this party.">
	allocationsUpdated zonedDateTime (0..1) <"When allocations for this trade were most recently corrected.">
	allocationsCompleted zonedDateTime (0..1) <"When allocations for this trade were completely processed.">
	timestamp TradeTimestamp (0..*) <"Other timestamps for this trade. This is provisional in Recordkeeping and Transparency view and may be reviewed in a subsequent draft.">

type Trader:

	value Scheme (1..1)
	traderScheme NonEmptyURI (0..1)

type TradeSummary: <"Summary information about the trade.">

	isPackageTrade boolean (0..1)
	isPrimeBrokerTrade boolean (0..1)
	reportingLevel ReportingLevel (0..1)

type TradeTimestamp: <"A generic trade timestamp">

	_type TimestampTypeScheme (1..1)
	value zonedDateTime (1..1)

type TradingWaiver: <"Indication as to whether the transaction was executed under a pre-trade waiver in accordance with Articles 4 and 9 of Regulation (EU) 600/2014.">

	value Scheme (1..1)
	tradingWaiverScheme NonEmptyURI (0..1)

type TransactionCharacteristic: <"A characteristic of a transaction used in declaring an end-user exception.">

	value Scheme (1..1)
	transactionCharacteristicScheme NonEmptyURI (0..1)

type Validation: <"A reference identifying a rule within a validation scheme.">

	value Scheme (1..1)
	validationScheme NonEmptyURI (0..1)

type VerificationMethod: <"A type used to represent the type of mechanism that can be used to verify a trade.">

	value Scheme (1..1)
	verificationMethodScheme NonEmptyURI (0..1)

type VersionedContractId: <"Contract Id with Version Support">

	contractId ContractId (1..1)
	versionHistoryModel VersionHistoryModel (1..1)

type VersionedTradeId: <"Trade Id with Version Support">

	tradeId TradeId (1..1)
	versionHistoryModel VersionHistoryModel (1..1)

type AllocationContentModel:

	collateral Collateral (0..1) <"The sum that must be posted upfront to collateralize against counterparty credit risk.">
	creditChargeAmount Money (0..1) <"Special credit fee assessed to certain institutions.">
	approvals Approvals (0..1) <"A container for approval states in the workflow.">
	masterConfirmationDate date (0..1) <"The date of the confirmation executed between the parties and intended to govern the allocated trade between those parties.">
	relatedParty RelatedParty (0..*) <"Specifies any relevant parties to the allocation which should be referenced.">

type CalculationAgentModel:

	calculationAgent CalculationAgent (0..1) <"The ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.">
	calculationAgentBusinessCenter BusinessCenter (0..1) <"The city in which the office through which ISDA Calculation Agent is acting for purposes of the transaction is located The short-form confirm for a trade that is executed under a Sovereign or Asia Pacific Master Confirmation Agreement ( MCA ), does not need to specify the Calculation Agent. However, the confirm does need to specify the Calculation Agent City. This is due to the fact that the MCA sets the value for Calculation Agent but does not set the value for Calculation Agent City.">

type NetAndOrGrossModel: <"A group including a net and/or a gross amount.">

	net number (0..1) <"Value excluding fees and commissions.">
	netAndOrGrossModelSequence NetAndOrGrossModelSequence (0..1)

	condition Choice:
		one-of

type NetAndOrGrossModelSequence:

	gross number (1..1) <"Value including fees and commissions.">
	net number (0..1) <"Value excluding fees and commissions.">

type SupervisorRegistrationModel: <"Provides information about a regulator or other supervisory body that an organization is registered with.">

	supervisoryBody SupervisoryBody (1..1) <"The regulator or other supervisory body the organization is registered with (e.g. SEC).">
	registrationNumber RegulatorId (0..1) <"The ID assigned by the regulator (e.g. SEC\'s Central Index Key).">

type TradeOrTradeReferenceModel: <"Choice between identification and representation of trade execution.">

	trade Trade (0..1) <"An element that allows the full details of the trade to be used as a mechanism for identifying the trade for which the post-trade event pertains">
	tradeReference PartyTradeIdentifiers (0..1) <"A container since an individual trade can be referenced by two or more different partyTradeIdentifier elements - each allocated by a different party.">

	condition Choice:
		one-of

type TransactionClassificationModel:

	isSecuritiesFinancing boolean (0..1) <"Whether the transaction falls within the scope of activity but is exempted from reporting under [Securities Financing Transactions Regulation]">
	otcClassification OtcClassification (0..*) <"Classification of the OTC transaction. Note: Coding scheme definition to encapsulate: Articles 20(3)(a) and 21(5)(a) of Regulation (EU) 600/2014. e.g. default=\"http://www.fpml.org/coding-scheme/esma-mifir-otc-classification\"">
	tradingWaiver TradingWaiver (0..*) <"Classification of the pre-trade waiver, if any, that the transaction was executed under. Note: Coding scheme to encapsulate: Articles 4 and 9 of Regulation (EU) 600/2014. e.g. default=\"http://www.fpml.org/coding-scheme/esma-mifir-trading-waiver\"">
	shortSale ShortSale (0..1) <"Classification of the transaction as a short sale or not and, if short, of the type of transaction. Note: Coding scheme to encapsulate: Article 11 of Regulation (EU) 600/2014. e.g. default=\"http://www.fpml.org/coding-scheme/esma-mifir-short-sale\"">
	isCommodityHedge boolean (0..1) <"Whether the transaction reduces risk in an objectively measurable way. Only applicable for commodity derivative transactions.">

type ValidationModel:

	validation Validation (0..*) <"A list of validation sets the sender asserts the document is valid with respect to.">

type AssetOrTermPointOrPricingStructureReference extends Reference: <"Reference to an underlying asset, term point or pricing structure (yield curve).">

	href string (1..1)

type BasicAssetValuation extends Valuation: <"A structure that holds a set of measures about an asset.">

	quote BasicQuotation (1..*) <"One or more numerical measures relating to the asset, possibly together with sensitivities of that measure to pricing inputs">

type DenominatorTerm: <"The type defining a denominator term of the formula. Its value is (sum of weighted partials) ^ power.">

	weightedPartial WeightedPartialDerivative (1..1) <"A partial derivative multiplied by a weighting factor.">
	power int(min: 1) (1..1) <"The power to which this term is raised.">

type DerivativeCalculationMethod:

	value Scheme (1..1)
	derivativeCalculationMethodScheme NonEmptyURI (0..1)

type DerivativeCalculationProcedure: <"A description of how a numerical derivative is computed.">

	method DerivativeCalculationMethod (0..1) <"The method by which a derivative is computed, e.g. analytic, numerical model, perturbation, etc.">
	derivativeCalculationParametersModel DerivativeCalculationParametersModel (0..1)

type DerivativeFormula: <"A formula for computing a complex derivative from partial derivatives. Its value is the sum of the terms divided by the product of the denominator terms.">

	term FormulaTerm (1..1) <"A term of the formula. Its value is the product of the its coefficient and the referenced partial derivatives.">
	denominatorTerm DenominatorTerm (1..1) <"A denominator term of the formula. Its value is (sum of weighted partials) ^ power.">

type FormulaTerm: <"A type defining a term of the formula. Its value is the product of the its coefficient and the referenced partial derivatives.">

	coefficient number (1..1) <"The coefficient by which this term is multiplied, typically 1 or -1.">
	partialDerivativeReference PricingParameterDerivativeReference (1..*) <"A reference to the partial derivative.">

type GenericDimension: <"A generic (user defined) dimension, e.g. for use in a correlation surface. e.g. a currency, stock, etc. This would take values like USD, GBP, JPY, or IBM, MSFT, etc.">

	value String (1..1)
	name NormalizedString (1..1) <"The name of the dimension. E.g.: \"Currency\", \"Stock\", \"Issuer\", etc.">
	href string (0..1) <"A reference to an instrument (e.g. currency) that this value represents.">

type InstrumentSet: <"A collection of instruments usable for quotation purposes. In future releases, quotable derivative assets may be added after the underlying asset.">

	instrumentSetSequence InstrumentSetSequence (0..*)

type InstrumentSetSequence:

	underlyingAsset Asset (0..1)
	curveInstrument Asset (0..1)

	condition Choice:
		one-of

type MarketReference extends Reference: <"Reference to a market structure.">

	href string (1..1)

type PerturbationType:

	value Scheme (1..1)
	perturbationTypeScheme NonEmptyURI (0..1)

type PricingDataPointCoordinate: <"A set of index values that identify a pricing data point. For example: (strike = 17%, expiration = 6M, term = 1Y.">

	pricingStructureIndexModel PricingStructureIndexModel (1..*)
	id string (0..1)

type PricingDataPointCoordinateReference extends Reference: <"Reference to a Pricing Data Point Coordinate.">

	href string (1..1)

type PricingInputReplacement: <"The substitution of a pricing input (e.g. curve) for another, used in generating prices and risks for valuation scenarios.">

	originalInputReference PricingStructureReference (1..1) <"A reference to the original value of the pricing input.">
	replacementInputReference PricingStructureReference (1..1) <"A reference to the substitution to do.">

type PricingInputType:

	value Scheme (1..1)
	pricingInputTypeScheme NonEmptyURI (0..1)

type PricingMethod: <"For an asset (e.g. a reference/benchmark asset), the pricing structure used to price it. Used, for example, to specify that the rateIndex \"USD-LIBOR-Telerate\" with term = 6M is priced using the \"USD-LIBOR-Close\" curve.">

	assetReference AnyAssetReference (1..1) <"The asset whose price is required.">
	pricingInputReference PricingStructureReference (1..1) <"A reference to the pricing input used to value the asset.">

type PricingParameterDerivative: <"A definition of the mathematical derivative with respect to a specific pricing parameter.">

	description String (0..1) <"A description, if needed, of how the derivative is computed.">
	parameterReference AssetOrTermPointOrPricingStructureReference (0..1) <"A reference to the pricing input parameter to which the sensitivity is computed. If it is omitted, the derivative definition is generic, and applies to any input point in the valuation set.">
	inputDateReference ValuationReference (0..*) <"Reference(s) to the pricing input dates that are shifted when the sensitivity is computed. Depending on the time advance method used, this list could vary. Used for describing time-advance derivatives (theta, carry, etc.)">
	calculationProcedure DerivativeCalculationProcedure (0..1) <"The method by which a derivative is computed, e.g. analytic, numerical model, perturbation, etc., and the corresponding parameters">
	id string (0..1)

	condition Choice:
		required choice parameterReference, inputDateReference

type PricingParameterDerivativeReference extends Reference: <"Reference to a partial derivative.">

	href string (1..1)

type PricingParameterShift: <"A definition of a shift with respect to a specific pricing parameter.">

	parameterReference AssetOrTermPointOrPricingStructureReference (1..1)
	shift number (1..1) <"The size of the denominator, e.g. 0.0001 = 1 bp.">
	shiftUnits PriceQuoteUnits (0..1) <"The units of the denominator, e.g. currency. If not present, use the units of the PricingInputReference.">
	id string (0..1)

type PricingStructureValuation extends Valuation: <"An abstract pricing structure valuation base type. Used as a base for values of pricing structures such as yield curves and volatility matrices. Derived from the \"Valuation\" type.">

	pricingInputDatesModel PricingInputDatesModel (1..1)

type QuotedAssetSet: <"A collection of quoted assets.">

	instrumentSet InstrumentSet (0..1) <"A collection of instruments used as a basis for quotation.">
	assetQuote BasicAssetValuation (0..*) <"A collection of valuations (quotes) for the assets needed in the set. Normally these quotes will be for the underlying assets listed above, but they don\'t necesarily have to be.">

type SensitivityDefinition: <"A set of characteristics describing a sensitivity.">

	name String (0..1) <"The name of the derivative, e.g. first derivative, Hessian, etc. Typically not required, but may be used to explain more complex derivative calculations.">
	valuationScenarioReference ValuationScenarioReference (0..1) <"Reference to the valuation scenario to which this sensitivity definition applies. If the SensitivityDefinition occurs within a SensitivitySetDefinition, this is not required and normally not used. In this case, if it is supplied it overrides the valuationScenarioReference in the SensitivitySetDefinition.">
	computedDerivativeModel ComputedDerivativeModel (0..1)
	sensitivityDescriptionModel SensitivityDescriptionModel (0..1)
	id string (0..1)

	condition Choice:
		required choice computedDerivativeModel, sensitivityDescriptionModel

type SensitivitySetDefinition: <"A sensitivity report definition, consisting of a collection of sensitivity definitions.">

	name String (0..1) <"The name of the sensitivity set definition, e.g. \"USDLIBOR curve sensitivities\".">
	sensitivityCharacteristics QuotationCharacteristics (0..1) <"The default characteristics of the quotation, e.g. type, units, etc.">
	valuationScenarioReference ValuationScenarioReference (0..1) <"Reference to the valuation scenario to which this sensitivity definition applies, e.g. a reference to the EOD valuation scenario. If not supplied, this sensitivity set definition is generic to a variety of valuation scenarios.">
	pricingInputType PricingInputType (0..1) <"The type of the pricing input to which the sensitivity is shown, e.g. a yield curve or volatility matrix.">
	pricingInputReference PricingStructureReference (0..1) <"A reference to the pricing input to which the sensitivity is shown, e.g. a reference to a USDLIBOR yield curve.">
	scale number (1..1) <"The size of the denominator, e.g. 0.0001 = 1 bp. For derivatives with respect to time, the default period is 1 day.">
	sensitivityDefinition SensitivityDefinition (0..*) <"A set of sensitivity definitions. Either one per point reported, or one generic definition that applies to all points.">
	calculationProcedure DerivativeCalculationProcedure (0..1) <"The method by which each derivative is computed, e.g. analytic, numerical model, perturbation, etc., and the corresponding parameters (eg. shift amounts).">
	id string (0..1)

type SensitivitySetDefinitionReference extends Reference: <"A reference to a sensitivity set definition.">

	href string (1..1)

type TimeDimension: <"The time dimensions of a term-structure. The user must supply either a tenor or a date or both.">

	tenor Period (0..1) <"The amount of time from the base date of the pricing input to the specified term point, e.g. 6M or 5Y.">
	timeDimensionSequence TimeDimensionSequence (0..1)

	condition Choice:
		one-of

type TimeDimensionSequence:

	date date (1..1) <"The absolute date corresponding to this term point, for example January 3, 2005.">
	tenor Period (0..1) <"The amount of time from the base date of the pricing input to the specified term point, e.g. 6M or 5Y.">

type Valuation: <"A valuation of an valuable object - an asset or a pricing input. This is an abstract type, used as a base for values of pricing structures such as yield curves as well as asset values.">

	objectReference AnyAssetReference (0..1) <"A reference to the asset or pricing structure that this values.">
	valuationScenarioReference ValuationScenarioReference (0..1) <"A reference to the valuation scenario used to calculate this valuation. If the Valuation occurs within a ValuationSet, this value is optional and is defaulted from the ValuationSet. If this value occurs in both places, the lower level value (i.e. the one here) overrides that in the higher (i.e. ValuationSet).">
	id string (0..1)
	definitionRef string (0..1) <"An optional reference to the scenario that this valuation applies to.">

type ValuationReference extends Reference: <"Reference to a Valuation or any derived structure such as PricingStructureValuation.">

	href string (1..1)

type ValuationScenario: <"A set of rules for generating a valuation.">

	name String (0..1) <"The (optional) name for this valuation scenario, used for understandability. For example \"EOD Valuations\".">
	valuationDate IdentifiedDate (1..1) <"The date for which the assets are valued.">
	marketReference MarketReference (0..1) <"A reference to the market environment used to price the asset.">
	shift PricingParameterShift (0..*) <"A collection of shifts to be applied to market inputs prior to computation of the derivative.">
	replacement PricingInputReplacement (0..*) <"A collection of shifts to be applied to market inputs prior to computation of the derivative.">
	id string (0..1)

type ValuationScenarioReference extends Reference: <"Reference to a valuation scenario.">

	href string (1..1)

type WeightedPartialDerivative: <"A partial derivative multiplied by a weighting factor.">

	partialDerivativeReference PricingParameterDerivativeReference (1..1) <"A reference to a partial derivative defined in the ComputedDerivative.model, i.e. defined as part of this sensitivity definition.">
	weight number (1..1) <"The weight factor to be applied to the partial derivative, e.g. 1 or -1, or some other scaling value.">

type AnalyticDerivativeParametersModel: <"Parameters used in the computation of a derivative using analytical (closed form formula) techiques.">

	derivativeFormula String (0..1) <"The formula used to compute the derivative (perhaps could be updated to use the Formula type in EQS.).">

type ComputedDerivativeModel:

	partialDerivative PricingParameterDerivative (1..*) <"A partial derivative of the measure with respect to an input.">
	formula DerivativeFormula (0..1) <"A formula defining how to compute the derivative from the partial derivatives. If absent, the derivative is just the product of the partial derivatives. Normally only required for more higher-order derivatives, e.g. Hessians.">

type DerivativeCalculationParametersModel: <"Parameters used in the computation of a derivative.">

	finiteDifferenceDerivativeParametersModel FiniteDifferenceDerivativeParametersModel (0..1)
	analyticDerivativeParametersModel AnalyticDerivativeParametersModel (0..1)
	substitutionDerivativeParametersModel SubstitutionDerivativeParametersModel (0..1)

	condition Choice:
		one-of

type FiniteDifferenceDerivativeParametersModel: <"Parameters used in the computation of a derivative using numerical (finite difference) techniques.">

	perturbationAmount number (0..1) <"The size and direction of the perturbation used to compute the derivative, e.g. 0.0001 = 1 bp.">
	averaged boolean (1..1) <"The value is calculated by perturbing by the perturbationAmount and then the negative of the perturbationAmount and then averaging the two values (i.e. the value is half of the difference between perturbing up and perturbing down).">
	perturbationType PerturbationType (0..1) <"The type of perturbation, if any, used to compute the derivative (Absolute vs Relative).">

type PricingCoordinateOrReferenceModel: <"A pricing structure coordinate, or a reference to one. This can be used to either directly define a coordinate or reference an existing coordinate.">

	coordinate PricingDataPointCoordinate (0..1) <"An explicit, filled in data point coordinate. This might specify expiration, strike, etc.">
	coordinateReference PricingDataPointCoordinateReference (0..1) <"A reference to a pricing data point coordinate within this document.">

	condition Choice:
		one-of

type PricingInputDatesModel: <"The dates that might be relevant for a pricing input, e.g. what valuation date it applies to, when it was built, when the data comes from, etc..">

	baseDate IdentifiedDate (1..1) <"The base date for which the structure applies, i.e. the curve date. Normally this will align with the valuation date.">
	spotDate IdentifiedDate (0..1) <"The spot settlement date for which the structure applies, normally 0-2 days after the base date. The difference between the baseDate and the spotDate is termed the settlement lag, and is sometimes called \"days to spot\".">
	inputDataDate IdentifiedDate (0..1) <"The date from which the input data used to construct the pricing input was obtained. Often the same as the baseDate, but sometimes the pricing input may be \"rolled forward\", in which input data from one date is used to generate a curve for a later date.">
	endDate IdentifiedDate (0..1) <"The last date for which data is supplied in this pricing input.">
	buildDateTime zonedDateTime (0..1) <"The date and time when the pricing input was generated.">

type PricingStructureIndexModel: <"The index (an ordinate) of a pricing structure. The index expresses how far along a particular dimension (e.g. time, strike, etc.) a point is located.">

	term TimeDimension (0..1) <"A time dimension that represents the term of a financial instrument, e.g. of a zero-coupon bond on a curve, or of an underlying caplet or swap for an option.">
	expiration TimeDimension (0..1) <"A time dimension that represents the time to expiration of an option.">
	strike number (0..1) <"A numerical dimension that represents the strike rate or price of an option.">
	generic GenericDimension (0..1)

	condition Choice:
		one-of

type SensitivityDescriptionModel:

	term TimeDimension (0..1) <"The time dimension of the sensitivity point (tenor and/or date).">
	pricingCoordinateOrReferenceModel PricingCoordinateOrReferenceModel (0..*)

	condition Choice:
		one-of

type SubstitutionDerivativeParametersModel: <"Parameters used in the computation of a derivative by substituting a supplied market environment.">

	replacementMarketInput PricingStructureReference (1..1) <"A reference to the replacement version of the market input, e.g. a bumped yield curve.">
