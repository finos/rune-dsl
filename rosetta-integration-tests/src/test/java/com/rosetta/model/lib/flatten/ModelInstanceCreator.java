package com.rosetta.model.lib.flatten;


import com.google.inject.Guice;
import com.google.inject.Injector;
import com.regnosys.rosetta.tests.util.CodeGeneratorTestHelper;
import com.rosetta.model.lib.RosettaModelObject;

import javax.inject.Inject;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;

/**
 * Creates instances of Rosetta model objects from Rosetta code.
 * This class uses the {@link CodeGeneratorTestHelper} to generate and compile
 * Rosetta code, then uses reflection to invoke the generated "evaluate" method
 * to create an instance of the model object.
 */
public class ModelInstanceCreator {

    @Inject
    private CodeGeneratorTestHelper helper;

    /**
     * Creates a RosettaModelObject instance from the provided Rosetta code file.
     *
     * @param loadFunction  The fully qualified name of the static "evaluate" method
     *                      that creates the model object instance. This method should
     *                      be generated by the Rosetta code generator.
     * @param rosettaFilePath The path to the Rosetta code file.
     * @return An instance of the RosettaModelObject defined in the Rosetta code.
     * @throws RuntimeException if there are any errors during code generation, compilation,
     *                          or instantiation of the model object.
     */
    public RosettaModelObject create(String loadFunction, Path rosettaFilePath) {
        try {
            String model = Files.readString(rosettaFilePath);
            Map<String, String> code = helper.generateCode(model);
            Map<String, Class<?>> classes = helper.compileToClasses(code);
            Class<?> func = classes.get(String.format(loadFunction));
            Injector injector = Guice.createInjector();
            Object instance = injector.getInstance(func);
            Method evaluate = instance.getClass().getMethod("evaluate");
            return (RosettaModelObject) evaluate.invoke(instance);
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException |
                 IOException e) {
            throw new RuntimeException(e);
        }
    }
}