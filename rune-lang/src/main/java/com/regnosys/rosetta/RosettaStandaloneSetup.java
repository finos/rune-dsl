/*
 * Copyright (c) REGnosys 2018 (www.regnosys.com)
 * generated by Xtext 2.39.0
 */
package com.regnosys.rosetta;

import com.google.inject.Binder;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;
import com.regnosys.rosetta.config.file.RosettaConfigurationFileProvider;
import com.regnosys.rosetta.rosetta.RosettaPackage;
import com.regnosys.rosetta.rosetta.expression.ExpressionPackage;
import com.regnosys.rosetta.rosetta.simple.SimplePackage;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EValidator;

/**
 * Initialization support for running Xtext languages without Equinox extension registry.
 */
public class RosettaStandaloneSetup extends RosettaStandaloneSetupGenerated {

    private String configFile;

    public static void doSetup() {
        new RosettaStandaloneSetup().createInjectorAndDoEMFRegistration();
    }

    public RosettaStandaloneSetup setConfigFile(String configFile) {
        this.configFile = configFile;
        return this;
    }

    @Override
    public Injector createInjector() {
        return Guice.createInjector(new RosettaRuntimeModule(), binder -> {
            if (configFile != null) {
                binder.bind(RosettaConfigurationFileProvider.class).toInstance(RosettaConfigurationFileProvider.createFromFile(configFile));
            }
        });
    }


    @Override
    public Injector createInjectorAndDoEMFRegistration() {
        EValidator.Registry.INSTANCE.clear(); // This line is to ensure tests don't use the same validator instance.
        if (!EPackage.Registry.INSTANCE.containsKey(RosettaPackage.eNS_URI)) {
            EPackage.Registry.INSTANCE.put(RosettaPackage.eNS_URI, RosettaPackage.eINSTANCE);
        }
        if (!EPackage.Registry.INSTANCE.containsKey(SimplePackage.eNS_URI)) {
            EPackage.Registry.INSTANCE.put(SimplePackage.eNS_URI, SimplePackage.eINSTANCE);
        }
        if (!EPackage.Registry.INSTANCE.containsKey(ExpressionPackage.eNS_URI)) {
            EPackage.Registry.INSTANCE.put(ExpressionPackage.eNS_URI, ExpressionPackage.eINSTANCE);
        }
        return super.createInjectorAndDoEMFRegistration();
    }
}
